#include <stdio.h>

#include "autista.h"
#include "show.h"
#include "upd.h"
#include "../utils/io.h"
#include "../utils/validation.h"

struct mezzo *mezzo_drvr;

int drvr_allocation (void)
{
	mezzo_drvr = malloc (sizeof(struct mezzo));
	if(mezzo_drvr == NULL){
		printf("Fallimento malloc su mezzo (Autista)\n\n"); 
		return -1; 
	}
}

int get_drvr_action(void)
{
	char options[5] = {'1','2','3','4','5'};
	char op;

	puts("*********************************");
	puts("*   INTERFACCIA AUTISTA    *");
	puts("*********************************\n");
	puts("*** Quale operazione vorresti eseguire? ***\n");
	puts("1) Consulta i viaggi ed i mezzi a cui sei assegnato");
	puts("2) Consulta le localit√† ed i dati temporali delle mete previste per un viaggio ");
	puts("3) Consulta le mappe");
	puts("4) Aggiorna il valore del conta km dopo un viaggio"); 
	puts("5) Esci");


	op = multi_choice("Select an option", options, 5);
	return op - '1';
}


bool exe_drvr_act(drvr_act sel)
{	
	switch (sel)
		{case VIAGGI_ASSEGNATI:{
		show_assigned_trip(); 
		return true;
		}
     	
     	case ORARI_VISITE:{
     	show_dest_time();
		return true; 
		 }

	 	case MAPPE:	{
	 	show_drvr_map(); 
		return true;
		 }

	 	case AGGIORNA_KM:{ 
		update_km(mezzo_drvr);
		return true; 
		 }

		case QUIT_DRVR:
		return false; 
		
	break;
	}

	return true;
}

void run_drvr_interface (void)
{ 	char sel; 
	if(mezzo_drvr == NULL)
		drvr_allocation(); 
	while (true){
	sel =  get_drvr_action(); 
	if (!exe_drvr_act(sel))
		break; 
	
	}
}


#pragma once
#include "../model/trpdb.h"

typedef enum {
	VIAGGI_ASSEGNATI,
	ORARI_VISITE,
	MAPPE,
	AGGIORNA_KM, 
	QUIT_DRVR
} drvr_act;

extern void run_drvr_interface (void); 
#include <stdio.h>

#include"cliente.h"
#include "ins.h"
#include "show.h"

#include "../utils/io.h"
#include "../utils/validation.h"


int get_cstmr_action(void)
{
	char options[5] = {'1','2','3','4','5'};
	char op;
	puts("*********************************");
	puts("*   Interfaccia cliente     *");
	puts("*********************************\n");
	puts("*** Quale operazione vorresti eseguire? ***\n");
	puts("1) Visualizza i tour disponibili ed i relativi viaggi previsti");
	puts("2) Consulta le mete relative ad un viaggio");
	puts("3) Consulta i servizi offerti da un albergo");
	puts("4) Consulta i comfort presenti su un modello");
	puts("5) Esci ");

	op = multi_choice("Scegli un opzione? ", options, 5);
	return op - '1';
}

bool exe_cstmr_act(cstmr_act sel)
{
	switch (sel)
		{case TOUR_INFO:{
		show_tour_information(); 
		return true; 
		}
		
		case METE_TOUR:{
		show_tour_destination(); 
		return true;
		}

	 	case SERVIZI_ALBERGO:{
		show_service_destination();
		return true;
		 }

	 	case COMFORT_MODELLO:{
		show_comfort_model();
		return true; 
		 }
		
		case QUIT_CSTMR:
		return false;
	}

	return true;
}




void run_cstmr_interface (void)
{ 	char sel; 
	while (true){
	sel = get_cstmr_action(); 
	if (!exe_cstmr_act(sel))
		break; 
	}
}


#pragma once

#include "../model/trpdb.h"

typedef enum  {
	TOUR_INFO,
	METE_TOUR,
	SERVIZI_ALBERGO,
	COMFORT_MODELLO, 
	QUIT_CSTMR
} cstmr_act;

extern void show_tour_information(void);
extern void show_tour_destination(void);
extern void show_service_destination(void);
extern void show_comfort_model(void); 
extern void run_cstmr_interface (void);#include <string.h>
#include "../model/trpdb.h"
#include "dlt.h" 
#include "show.h"



void dlt_trip(struct viaggio *viaggio)
{	
	if(show_trip(viaggio)!=-1) 
    if(yes_or_no("Vuoi cancellare questo viaggio? (s/n)",'s','n',false,false) == true)
        do_delete_trip(viaggio); 
}
void dlt_tour(struct tour *tour)
{
	if(show_tour(tour)!=-1) 
    if(yes_or_no("Vuoi cancellare questo tour? (s/n)",'s','n',false,false) == true)
        do_delete_tour(tour); 
}
void dlt_sparepart(struct ricambio *ricambio)
{	if(show_sparepart(ricambio)!=-1)
		 if(yes_or_no("Vuoi cancellare questo ricambio? (s/n)",'s','n',false,false) == true)
        	do_delete_sparepart(ricambio); 

    
}
void dlt_review (struct revisione *revisione)
{
	if(show_review(revisione)!=-1) 
    if(yes_or_no("Vuoi cancellare questa revisione? (s/n)",'s','n',false,false) == true)
        do_delete_review(revisione);
}
void dlt_bus(struct mezzo *mezzo)
{	
	if(show_bus(mezzo)!=-1) 
    if(yes_or_no("Vuoi cancellare questo mezzo? (s/n)",'s','n',false,false) == true)
        do_delete_bus(mezzo);
}
void dlt_reservation (struct prenotazione * prenotazione)
{	
	if(show_reservation(prenotazione)!=-1) 
    if(yes_or_no("Vuoi cancellare questa prenotazione? (s/n)",'s','n',false,false) == true)
        do_delete_reservation(prenotazione);
    
}

void dlt_costumer (struct cliente * cliente)
{	
	if(show_costumer(cliente)!=-1) 
    if(yes_or_no("Vuoi cancellare questo cliente? (s/n)",'s','n',false,false) == true)
        do_delete_costumer(cliente);
    
}
void dlt_stay(struct soggiorno *soggiorno)
{ 	
    if(show_stay(soggiorno)!=-1) 
    if(yes_or_no("Vuoi cancellare questa associazione? (s/n)",'s','n',false,false) == true)
        do_delete_stay(soggiorno);
}
void dlt_skills(struct competenze *competenze)
{ 
    if(show_skills(competenze)!=-1) 
    if(yes_or_no("Vuoi cancellare queste competenze? (s/n)",'s','n',false,false) == true)
        do_delete_skills(competenze);
}
 void dlt_employee(struct dipendente *dipendente)
{	
	if(show_employee(dipendente)!=-1)
	 if(yes_or_no("Vuoi cancellare questo dipendente? (s/n)",'s','n',false,false) == true)
        do_delete_employee(dipendente);

}   
void dlt_fmo(struct fmo *fmo)
{	
	if(show_fmo(fmo)!=-1)
	 if(yes_or_no("Vuoi cancellare questa relazione foto-modello? (s/n)",'s','n',false,false) == true)
        do_delete_fmo(fmo);
}
void dlt_fme(struct fme *fme)
{	
	if(show_fme(fme)!=-1)
	 if(yes_or_no("Vuoi cancellare questa relazione foto-meta? (s/n)",'s','n',false,false) == true)
        do_delete_fme(fme);
}
void dlt_ofr(struct offre *offre)
{	
	if(show_ofr(offre)!=-1)
	 if(yes_or_no("Vuoi cancellare questa offerta? (s/n)",'s','n',false,false) == true)
        do_delete_ofr(offre);
}


void dlt_user(struct utente *utente)
{
	if(show_user(utente)!=-1)
	 if(yes_or_no("Vuoi cancellare questo utente? (s/n)",'s','n',false,false) == true)
        do_delete_user(utente);
}
void dlt_seat(struct postoprenotato *postoprenotato)
{
	if(show_seat(postoprenotato)!=-1)
	 if(yes_or_no("Vuoi cancellare questo posto prenotato? (s/n)",'s','n',false,false) == true)
        do_delete_seat(postoprenotato);
}
void dlt_model(struct modello *modello)
{
	if(show_model(modello)!=-1)
	 if(yes_or_no("Vuoi cancellare questo modello? (s/n)",'s','n',false,false) == true)
        do_delete_model(modello);
}
void dlt_certify(struct tagliando *tagliando)
{
	if(show_certify(tagliando)!=-1)
	 if(yes_or_no("Vuoi cancellare questo tagliando? (s/n)",'s','n',false,false) == true)
        do_delete_certify(tagliando);
}
void dlt_destination(struct meta *meta)
{	
	if(show_destination(meta)!=-1)
	 if(yes_or_no("Vuoi cancellare questa meta? (s/n)",'s','n',false,false) == true)
        do_delete_destination(meta);
}
void dlt_visit(struct visita *visita)
{	
	if(show_visit(visita)!=-1)
	 if(yes_or_no("Vuoi cancellare questa visita? (s/n)",'s','n',false,false) == true)
        do_delete_visit(visita);
}
void dlt_location(struct localita *localita)
{	
	if(show_location(localita)!=-1)
	 if(yes_or_no("Vuoi cancellare questa localita? (s/n)",'s','n',false,false) == true)
        do_delete_location(localita);
}
void dlt_room(struct camera *camera)
{
	if(show_room(camera)!=-1)
	 if(yes_or_no("Vuoi cancellare questa camera? (s/n)",'s','n',false,false) == true)
        do_delete_room(camera);

}
void dlt_map(struct mappa *mappa)
{
	if(show_map(mappa)!=-1)
	 if(yes_or_no("Vuoi cancellare questa mappa? (s/n)",'s','n',false,false) == true)
        do_delete_map(mappa);

}
void dlt_picture(struct documentazionefotografica *documentazionefotografica)
{
	if(show_picture(documentazionefotografica)!=-1)
	 if(yes_or_no("Vuoi cancellare questa foto? (s/n)",'s','n',false,false) == true)
        do_delete_picture(documentazionefotografica);

}
void dlt_comfort(struct comfort *comfort)
{
	if(show_comfort(comfort)!=-1)
	 if(yes_or_no("Vuoi cancellare questo comfort? (s/n)",'s','n',false,false) == true)
        do_delete_comfort(comfort);

}
void dlt_service(struct servizio *servizio)
{
	if(show_service(servizio)!=-1)
	 if(yes_or_no("Vuoi cancellare questo servizio? (s/n)",'s','n',false,false) == true)
        do_delete_service(servizio);

}

void dlt_sostitution( struct sostituito *sostituito)
{
	if(show_sostitution(sostituito)!=-1)
		if(yes_or_no("Vuoi cancellare questa sostituzione? (s/n)",'s','n',false,false) == true)
        	do_delete_sostitution(sostituito);

}

void dlt_rt( struct rt *rt)
{
	if(show_rt(rt)!=-1)
		if(yes_or_no("Vuoi cancellare questa relazione tra revisione e tagliando? (s/n)",'s','n',false,false) == true)
        	do_delete_rt(rt);

}

void dlt_presents( struct presenti *presenti)
{
	if(show_presents(presenti)!=-1)
		if(yes_or_no("Vuoi cancellare questa relazione tra comfort e modello? (s/n)",'s','n',false,false) == true)
        	do_delete_presents(presenti);

}#pragma once

#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>

#include "../utils/io.h"
#include "../utils/validation.h"
#include "../model/trpdb.h"


extern void dlt_costumer(struct cliente *cliente);
extern void dlt_reservation(struct prenotazione *prenotazione);
extern void dlt_seat(struct postoprenotato *postoprenotato);
extern void dlt_review(struct revisione *revisione);
extern void dlt_sparepart(struct ricambio *ricambio);
extern void dlt_bus(struct mezzo *mezzo);
extern void dlt_model(struct modello *modello);
extern void dlt_certify(struct tagliando *tagliando);
extern void dlt_stay(struct soggiorno *soggiorno);
extern void dlt_sostitution( struct sostituito *sostituito); 
extern void dlt_tour(struct tour *tour);
extern void dlt_trip(struct viaggio *viaggio);
extern void dlt_destination(struct  meta *meta);
extern void dlt_visit(struct visita *visita);
extern void dlt_room(struct camera *camera);
extern void dlt_location(struct localita *localita);
extern void dlt_map(struct mappa *mappa);
extern void dlt_picture(struct documentazionefotografica *documentazionefotografica) ;
extern void dlt_employee(struct dipendente *dipendente);
extern void dlt_user(struct utente *utente);
extern void dlt_ofr(struct offre *offre); 
extern void dlt_service(struct servizio *servizio);
extern void dlt_fmo(struct fmo *fmo); 
extern void dlt_fme(struct fme *fme); 
extern void dlt_bus(struct mezzo *mezzo);
extern void dlt_sparepart(struct ricambio *ricambio);
extern void dlt_comfort(struct comfort *comfort);
extern void dlt_skills(struct competenze *competenze); 
extern void dlt_presents(struct presenti *presenti); 
extern void dlt_rt(struct rt *rt); 

#include <stdio.h>

#include "hostess.h"
#include "ins.h"
#include "show.h"
#include "upd.h"

#include "../utils/io.h"
#include "../utils/validation.h"

struct cliente *cliente_hstss; 
struct prenotazione *prenotazione_hstss;
struct postoprenotato *postoprenotato_hstss;
struct  viaggio *viaggio_hstss;
struct soggiorno * soggiorno_hstss;
struct utente * utente_hstss; 

int allocation_hstss(void)
{
	cliente_hstss = malloc(sizeof(struct cliente)); 
	if(cliente_hstss == NULL)
		{printf("Fallimento malloc su cliente (hostess) \n\n"); 
		 return -1; 
		}
	prenotazione_hstss = malloc(sizeof(struct prenotazione)); 
	if(prenotazione_hstss == NULL)
		{printf("Fallimento malloc su prenotazione (hostess) \n\n");
		 return -1; 
		}
	postoprenotato_hstss = malloc(sizeof(struct postoprenotato));
	if(postoprenotato_hstss == NULL)
		{printf("Fallimento malloc su postoprenotato (hostess) \n\n"); 
		 return -1; 
		}
	viaggio_hstss = malloc(sizeof(struct viaggio)); 
	if(viaggio_hstss == NULL)
		{printf("Fallimento malloc su viaggio (hostess) \n\n"); 
		 return -1;
		}
	soggiorno_hstss = malloc(sizeof(struct soggiorno));
	if(soggiorno_hstss == NULL)
		{printf("Fallimento malloc soggiorno (hostess) \n\n"); 
		 return -1; 
		 }
	utente_hstss = malloc(sizeof(struct utente ));
	if(utente_hstss == NULL)
		{printf("Fallimento malloc utente  (hostess) \n\n"); 
		 return -1; 
		 }
	
}

int get_hstss_action(void)
{
	char options[7] = {'1','2','3','4','5'};
	char op;
	
	puts("*********************************");
	puts("*   INTERFACCIA HOSTESS    *");
	puts("*********************************\n");
	puts("*** Quale operazione vorresti eseguire? ***\n");
	puts("1) Consultare prenotazioni");
	puts("2) Inserire un nuovo cliente");
	puts("3) Inserire una nuova prenotazione");  
	puts("4) Conferma prenotazione ed intestazione posti");
	puts("5) Esci");

	op = multi_choice("Scegli un opzione", options, 5);

	return op -'1'; 
}

bool exe_hstss_act(char sel)
{	

	switch (sel)
		{	
			case INFO_PRENOTAZIONI: {
				show_reservation(prenotazione_hstss); 
				return true;
				}
			case INSERT_CLIENTE:{
				ins_costumer_hstss(cliente_hstss, utente_hstss); 
				return true; 
				}
		
			case INSERT_PRENOTAZIONE:{
				ins_prenotation(prenotazione_hstss); 
				return true;
				}
			case CONFERMA_PRENOTAZIONE:{
				validate_reservation (prenotazione_hstss, postoprenotato_hstss, soggiorno_hstss); 
				return true;
		 		}
			case QUIT_HSST: 
				return false; 
		
	}
	return true;
}




void run_hstss_interface (void)
{ 	
	char sel;
				
	if(	cliente_hstss == NULL || prenotazione_hstss == NULL || postoprenotato_hstss == NULL ||viaggio_hstss == NULL||soggiorno_hstss == NULL) {
		allocation_hstss();
		printf("\n\nAllocazione avvenuta.\n\n"); }

	while (true){
	sel = get_hstss_action(); 
	if (!exe_hstss_act(sel))
		break; 
	}

}	
#pragma once
#include <string.h>
#include <mysql/mysql.h>
#include <assert.h>

#include "../model/trpdb.h"

typedef enum{
	INFO_PRENOTAZIONI,
	INSERT_CLIENTE,
	INSERT_PRENOTAZIONE,
	CONFERMA_PRENOTAZIONE, 
	QUIT_HSST
} hstss_act;
 


extern void run_hstss_interface (void);
#include <string.h>
#include "ins.h"
#include "upd.h"
#include "show.h"

void ins_user(struct utente *utente) 
{	
	char buff[VARCHAR_LEN];
	printf("** Dettagli inserimento utente **\n\n");
	get_input("Inserisci la mail: ", VARCHAR_LEN, utente->email, false);
	get_input("Inserisci la password: ", VARCHAR_LEN, utente->pswrd, false);

	printf("\n Autista =	1; \n Cliente =	2; \n Hostess =	3; \n Meccanico =	4; \n Manager =	5;\n"); 
	get_input("Inserisci la tipologia: ", NUM_LEN, buff, false);
	utente->tipo = atoi(buff); 
		if(utente->tipo >5 || utente->tipo < 1)
	update_user_type(utente,utente->tipo); 
	do_insert_user(utente);
}




void ins_prenotation(struct prenotazione *prenotazione)
{	
	char buff[NUM_LEN];
	printf("\n** Dettagli inserimento prenotazione **\n\n");
	get_input("Inserisci l'indirizzo e-mail del cliente che ha effettuato la prenotazione : ", VARCHAR_LEN, prenotazione->clienteprenotante, false);
	get_input("Inserisci l'id del viaggio da prenotare : ", NUM_LEN, buff, false);
	prenotazione->viaggioassociato = atoi(buff); 
	get_input("Inserisci il numero di posti che si desiderano prenotare : ", NUM_LEN, buff, false);
	prenotazione->numerodipostiprenotati = atoi(buff); 

	do_insert_reservation(prenotazione); 
}

void ins_seat(struct postoprenotato *postoprenotato)
{	
	char buff[NUM_LEN]; 
	printf("\n** Dettagli inserimento passeggero **\n\n");
	get_input("Inserisci il numero di prenotazione: ", NUM_LEN, buff, false);
	postoprenotato->prenotazioneassociata = atoi(buff); 
	get_input("Inserisci il numero di posto: ", NUM_LEN, buff, false);
	postoprenotato->numerodiposto = atoi(buff); 
	get_input("Inserisci l'et√†: ", NUM_LEN, buff, false);
	postoprenotato->etapasseggero = atoi(buff); 
	get_input("Inserisci il nome: ", VARCHAR_LEN, postoprenotato-> nomepasseggero, false);
	get_input("Inserisci il cognome: ", VARCHAR_LEN, postoprenotato-> cognomepasseggero, false);

	do_insert_seat(postoprenotato); 
}

void ins_review(struct revisione *revisione, struct sostituito *sostituito, struct ricambio *ricambio)
{	
	char buff[NUM_LEN]; 
	bool ans;
	printf("\n** Dettagli inserimento revisione **\n\n");
	get_input("Inserisci la targa del mezzo revisionato : ", VARCHAR_LEN, revisione->mezzorevisionato, false);
	get_input("Inserisci la mail del meccanico che ha eseguito la revisione : ", VARCHAR_LEN, revisione->addettoallarevisione, false);
	get_input("Inserisci la descrizione delle operazioni eseguite (massimo 5000 caratteri): ", DES_LEN, revisione-> operazionieseguite, false);
	get_input("Inserisci il numero di km presenti sul conta chilometri del mezzo revisionato : ",NUM_LEN, buff, false);
	revisione-> chilometraggio = atoi(buff); 
	get_input("Inserisci la motivazione della revisione (massimo 5000 caratteri) : ", DES_LEN, revisione-> motivazione, false);
	while(true){
		get_input("Inserisci la data di inizio[YYYY-MM-DD]: ", DATE_LEN, revisione->datainizio, false);
		if(validate_date(revisione->datainizio))
			break;
		fprintf(stderr, "Data errata!\n");
	}
	while(true){
		get_input("Inserisci la data di conclusione[YYYY-MM-DD]: ", DATE_LEN, revisione->datafine, false);
		if(validate_date(revisione->datafine))
			break;
		fprintf(stderr, "Data errata!\n");
	}

ans = yes_or_no("In questa revisione sono statti sostituiti dei ricambi? ",'s','n',false, false); 
if(ans)
	{	
	get_input("Inserisci il codice del ricambio utilizzato : ", VARCHAR_LEN, sostituito->ricambioutilizzato,false);
	get_input("Inserisci la quantit√† di ricambi sostituiti : ",NUM_LEN, buff, false);
	sostituito->quantitasostituita = atoi(buff); 
	do_insert_sost_review(revisione,sostituito);
	}
else
	do_insert_review(revisione);
}

void ins_costumer(struct cliente *cliente)
{	

	
	printf("\n** Dettagli inserimento cliente **\n\n");
	get_input("Inserisci la mail: ", VARCHAR_LEN, cliente->emailcliente, false);
	get_input("Inserisci il nome: ", VARCHAR_LEN, cliente->nomecliente, false);
	get_input("Inserisci il cognome: ", VARCHAR_LEN, cliente->cognomecliente, false);
	get_input("Inserisci l'indirizzo: ", VARCHAR_LEN, cliente->indirizzocliente, false);
	get_input("Inserisci il codice fiscale: ", VARCHAR_LEN, cliente->codicefiscale, false);
	get_input("Inserisci il recapito telefonico: ", VARCHAR_LEN, cliente->recapitotelefonico, false);
	get_input("Inserisci il numero di fax: ", VARCHAR_LEN, cliente->fax, false);


	while(true){
		get_input("Inserisci l'ultima data d'invio dei documuenti [YYYY-MM-DD]: ", DATE_LEN, cliente->datadocumentazione, false);
		if(validate_date(cliente->datadocumentazione))
			break;
		fprintf(stderr, "Data errata!\n");
	}
	do_insert_costumer(cliente); 
}

void ins_costumer_hstss(struct cliente *cliente, struct utente *utente)
{	
	char buff[VARCHAR_LEN]; 
	printf("** Crea un utente per questo cliente **\n"); 
	get_input("Inserisci la mail: ", VARCHAR_LEN, cliente->emailcliente, false);
	get_input("Inserisci la password: ", VARCHAR_LEN, utente->pswrd, false);
	
	printf("\n** Dettagli inserimento cliente **\n\n");
	get_input("Inserisci il nome: ", VARCHAR_LEN, cliente->nomecliente, false);
	get_input("Inserisci il cognome: ", VARCHAR_LEN, cliente->cognomecliente, false);
	get_input("Inserisci l'indirizzo: ", VARCHAR_LEN, cliente->indirizzocliente, false);
	get_input("Inserisci il codice fiscale: ", VARCHAR_LEN, cliente->codicefiscale, false);
	get_input("Inserisci il recapito telefonico: ", NUM_LEN, cliente->recapitotelefonico, false);
	get_input("Inserisci il numero di fax: ", NUM_LEN, cliente->fax, false);


	while(true){
		get_input("Inserisci l'ultima data d'invio dei documuenti [YYYY-MM-DD]: ", DATE_LEN, cliente->datadocumentazione, false);
		if(validate_date(cliente->datadocumentazione))
			break;
		fprintf(stderr, "Data errata!\n");
	}
	do_insert_costumer_user(utente, cliente); 
}

void ins_sparepart(struct ricambio *ricambio)
{	
	char buff[NUM_LEN]; 
	printf("\n** Dettagli inserimento ricambio **\n\n");
	get_input("Inserisci il codice: ", VARCHAR_LEN, ricambio->codice, false);
	get_input("Inserisci il costo unitario: ", NUM_LEN, buff, false);
	ricambio->costounitario = atof(buff);
	get_input("Inserisci la quantit√† minima di riordino : ", NUM_LEN, buff, false);
	ricambio->quantitadiriordino= atoi(buff); 
	get_input("Inserisci la descrizione (massimo 5000 caratteri) : ", DES_LEN, ricambio-> descrizione, false);
	get_input("Inserisci la scorta minima: ", NUM_LEN, buff, false);
	ricambio->scortaminima = atoi(buff); 
	get_input("Inserisci quantita' di pezzi disponibili: ", NUM_LEN, buff, false);
	ricambio->quantitainmagazzino = atoi(buff);
	do_insert_sparepart(ricambio);
}

void ins_bus(struct mezzo *mezzo)
{	
	char buff[VARCHAR_LEN]; 
	printf("\n** Dettagli inserimento mezzo **\n\n");
	get_input("Inserisci la targa : ", VARCHAR_LEN, mezzo->targa, false);
	get_input("Inserisci il modello : ", VARCHAR_LEN, mezzo->modellomezzo, false);
	get_input("Inserisci gli ingombri : ", VARCHAR_LEN, mezzo->ingombri, false);
	get_input("Inserisci l'autonomia : ", NUM_LEN, buff , false);
	mezzo-> autonomia = atoi(buff); 
	get_input("Inserisci il valore attuale del conta chilometri: ", NUM_LEN, buff, false);
	mezzo-> valorecontakm = atoi(buff); 
		while(true){
		get_input("Inserisci la data dell'ultima revisione presso la motorizzazione [YYYY-MM-DD]: ", DATE_LEN, mezzo->dataultimarevisioneinmotorizzazione, false);
		if(validate_date(mezzo->dataultimarevisioneinmotorizzazione))
			break;
		fprintf(stderr, "Data errata!\n");
	}
	while(true){
		get_input("Inserisci la data di immatricolazione  [YYYY-MM-DD]: ", DATE_LEN, mezzo->dataimmatricolazione, false);
		if(validate_date(mezzo->dataimmatricolazione))
			break;
		fprintf(stderr, "Data errata!\n");
	}
 do_insert_bus(mezzo);

}

void ins_another_skill (struct competenze *competenze)
{	
	printf("** Dettagli inserimento competenze **\n\n");
	get_input("Inserisci la mail del meccanico competente : ", VARCHAR_LEN, competenze->meccanicocompetente, false);
	do_insert_skills(competenze); 
}

void ins_model(struct modello *modello, struct competenze *competenze)
{	
	char buff[NUM_LEN];
	printf("\n** Dettagli inserimento modello **\n\n");
	get_input("Inserisci il nome : ", VARCHAR_LEN, modello->nomemodello, false);
	get_input("Inserisci la casa costruttrice : ", VARCHAR_LEN, modello->casacostruttrice, false);
	get_input("Inserisci i dati tecnici (massimo 5000 caratteri) : ", DES_LEN, modello-> datitecnici, false);
	get_input("Inserisci il numero di posti: ", NUM_LEN, buff, false);
	modello->numeroposti = atoi(buff);
	printf("** Dettagli inizializzazione competenze **\n\n");
	get_input("Inserisci il primo meccanico competente : ", VARCHAR_LEN, competenze->meccanicocompetente, false);
	get_input("Inserisci il secondo meccanico competente : ", VARCHAR_LEN, competenze->nomemeccanico, false);
	do_insert_model(modello, competenze); 
	
	while(yes_or_no("Vuoi inserire un'altro meccanico competente? ", 's', 'n', false, false)){
		strcpy(competenze->modelloassociato, modello->nomemodello); 
		ins_another_skill(competenze); 
	}
}

void ins_certify(struct tagliando *tagliando)
{	
	printf("\n** Dettagli inserimento tagliando **\n\n");
	get_input("Inserisci la tipologia del tagliando: ", VARCHAR_LEN, tagliando->tipologiatagliando, false);
	get_input("Inserisci le validita' superate (massimo 5000 caratteri) : ", DES_LEN, tagliando->validitasuperate, false);
	do_insert_certify(tagliando); 
}

void ins_stay(struct soggiorno *soggiorno)
{	
	char buff[NUM_LEN]; 
	printf("\n** Dettagli soggiorno**\n\n");
	get_input("Inserisci il numero della camera: ", NUM_LEN, buff, false);
	soggiorno->cameraprenotata = atoi(buff); 
	get_input("Inserisci l'albergo in cui √® ubicata la camera: ", NUM_LEN, buff,false);	
	soggiorno->albergoinquestione = atoi(buff); 
	get_input("Inserisci il numero della prenotazione in questione: ", NUM_LEN, buff, false);
	soggiorno->prenotazioneinquestione = atoi(buff); 
	get_input("Inserisci il numero di posto di viaggio dell'ospite: ", NUM_LEN, buff, false);
	soggiorno->ospite = atoi(buff); 
	while(true){
	get_input("Inserici la data d'inizio del soggiorno [YYYY-MM-DD]: ",DATE_LEN, soggiorno->datainiziosoggiorno,false); 
	if(validate_date(soggiorno->datainiziosoggiorno))
			break;
		fprintf(stderr, "Data errata!\n");
	}
	while(true){
		get_input("Inserisci la data di fine soggiorno [YYYY-MM-DD]: ",DATE_LEN, soggiorno->datafinesoggiorno, false);
		if(validate_date(soggiorno->datafinesoggiorno))
				break;
			fprintf(stderr, "Data errata!\n");
		} 
	do_insert_stay(soggiorno); 
}

void ins_sostitution( struct sostituito *sostituito)
{	
	char buff[NUM_LEN]; 
	printf("\n** Dettagli sostituzione ricambio**\n\n");
	get_input("Inserisci il numero della revsione in questione: ",NUM_LEN, buff, false);
	sostituito->revisioneassociata = atoi(buff);
	get_input("Inserisci il codice del ricambio utilizzato : ", VARCHAR_LEN, sostituito->ricambioutilizzato,false);
	get_input("Inserisci la quantit√† di ricambi sostituiti : ",NUM_LEN, buff, false);
	sostituito->quantitasostituita = atoi(buff);
	do_insert_sostitution(sostituito); 
}



void ins_tour(struct tour *tour){

	char buff[NUM_LEN]; 
	char buffer[DEC_LEN]; 
	char bit[BIT_LEN]; 
	
	printf("** Dettagli inserimento tour **\n\n");
	get_input("Inserisci la denominazione: ", VARCHAR_LEN, tour->denominazionetour, false);
	get_input("Inserisci la descrizione (massimo 5000 caratteri): ", DES_LEN, tour->descrizionetour, false);
	get_input("Inserisci il numero minimo di partecipanti: ", NUM_LEN,buff, false);
	tour->minimopartecipanti = atoi(buff); 
	get_input("Inserisci il costo dell'assicurazione: ", DEC_LEN, buffer , false);
	tour->assicurazionemedica = atof(buffer); 
	get_input("Inserisci il costo del bagaglio: ", DEC_LEN, buffer, false);
	tour->bagaglio = atof(buffer);
	get_input("Inserisci il costo della garanzia di annullamento: ", DEC_LEN, buffer, false);
	tour->garanziaannullamento = atof(buffer); 
	while(true){
		get_input("Inserisci l'indicazione sulla presenza di un'accompagnatrice: ", BIT_LEN, bit, false);
		if(validate_double(bit))
			break;
		fprintf(stderr, "Inserisci un valore compreso tra[0,1]!\n"); 
	}
	tour->accompagnatrice = atoi(bit); 
	do_insert_tour(tour); 
}

void ins_trip(struct viaggio *viaggio)
{	
	char buff[NUM_LEN]; 
	char buffer[DEC_LEN]; 
	printf("** Dettagli inserimento viaggio **\n\n");
	get_input("Inserisci il tour a cui e' associato: ", VARCHAR_LEN, viaggio->tourassociato, false);
	get_input("Inserisci la mail del conducente assegnato: ", VARCHAR_LEN, viaggio->conducente, false);
	get_input("Inserisci la mail dell'eventuale accompagnatrice: ", VARCHAR_LEN, viaggio->accompagnatrice, false);
	get_input("Inserisci la targa del mezzo impiegato: ", VARCHAR_LEN, viaggio->mezzoimpiegato, false);

	while(true) {
		get_input("Inserisci la data di partenza [YYYY-MM-DD]: ", DATE_LEN, viaggio->datadipartenzaviaggio, false);
		if(validate_date(viaggio->datadipartenzaviaggio))
			break;
		fprintf(stderr, "Data Errata!\n");
		}
	while(true) {
		get_input("Inserisci la data di ritorno [YYYY-MM-DD]: ", DATE_LEN, viaggio->datadiritornoviaggio, false);
		if(validate_date(viaggio->datadiritornoviaggio))
			break;
		fprintf(stderr, "Data Errata!\n");
		}

	get_input("Inserisci il prezzo: ", DEC_LEN, buffer, false);
	viaggio->costodelviaggio = atof(buffer); 
	get_input("Inserisci il numero di Km che verranno percorsi: ", NUM_LEN, buff, false);
	viaggio->numerodikm = atoi (buff); 
	get_input("Inserisci i posti disponibili totali: ", NUM_LEN, buff, false);
	viaggio->postidisponibili = atoi(buff); 
	do_insert_trip(viaggio); 
}


void ins_destination(struct meta *meta)
{	
	printf("** Dettagli inserimento meta **\n\n");
	get_input("Inserisci la localita di appartenenza: ", VARCHAR_LEN, meta->localitadiappartenenza, false);
	get_input("Inserisci la regione di appartenenza: ", VARCHAR_LEN, meta->regiodiappartenennza, false);
	get_input("Inserisci il nome: ", VARCHAR_LEN, meta->nomemeta, false);
	get_input("Inserisci l'indirizzo e-mail: ", VARCHAR_LEN, meta->emailmeta, false);
	get_input("Inserisci il numero di telefono: ", VARCHAR_LEN, meta->telefonometa, false);
	get_input("Inserisci il numero di fax: ", VARCHAR_LEN, meta->faxmeta, false);
	get_input("Inserisci l'indirizzo: ", VARCHAR_LEN, meta->indirizzo, false);
	get_input("Inserisci la tipologia (bene o albergo ): ", VARCHAR_LEN, meta->tipologiameta, false);

	if(strcmp(meta->tipologiameta, "albergo") == 0)
		get_input("Inserisci la categoria dell'albergo: ", VARCHAR_LEN, meta->categoriaalbergo, false);
	else
		while(true) {
	get_input("Inserisci l'orario di apertura del bene [HH:MM]: ", TIME_LEN, meta->orariodiapertura, false);
	if(validate_time(meta->orariodiapertura))
		break;
		}

	do_insert_destination(meta); 
}


void ins_visit(struct visita *visita)
{	
	char buff[NUM_LEN]; 
	char buffer[DEC_LEN]; 
	char tiny[BIT_LEN]; 
	printf("** Dettagli inserimento visita **\n\n");
	get_input("Inserisci l'ID del viaggio associato: ", NUM_LEN, buff, false);
	visita->viaggiorelativo = atoi(buff); 
	get_input("Inserisci l'ID della meta visitata: ", NUM_LEN, buff, false);
	visita->metavisitata = atoi(buff); 
	while(true) {
		get_input("Inserisci la data di arrivo prevista [YYYY-MM-DD]: ", DATE_LEN, visita->datadiarrivo, false);
		if(validate_date(visita->datadiarrivo))
			break;
		fprintf(stderr,"Data errata!"); 
			
	}
	while(true) {
		get_input("Inserisci la data di partenza prevista [YYYY-MM-DD]: ", DATE_LEN, visita->datadipartenza, false);
		if(validate_date(visita->datadipartenza))
			break;
		fprintf(stderr,"Data errata!");	
	}

	while(true) {
		get_input("Inserisci l'orario di arrivo previsto [HH:MM]: ", TIME_LEN, visita->oradiarrivo, false);
		if(validate_time(visita->oradiarrivo))
			break;
	fprintf(stderr,"Orario errato!");	
	}
	while(true) {
		get_input("Inserisci l'orario di partenza previsto [HH:MM]: ", TIME_LEN, visita->oradipartenza, false);
		if(validate_time(visita->oradipartenza))
			break;
	fprintf(stderr,"Orario errato!");
	}

	get_input("Inserisci l'indicazione sulla presenza della guida(si/no): ", BIT_LEN, tiny, false);
	visita->guida = atoi(tiny); 
	get_input("Inserisci l'importo dell'eventuale supplemento: ", DEC_LEN, buffer, false);
	visita->supplemento = atof(buffer); 
	get_input("Inserisci la descrizione dell'eventuale trattamento alberghiero (massimo 5000 caratteri): ", DES_LEN, visita->trattamentoalberghiero, false); 
	do_insert_visit(visita); 
}

void ins_room(struct camera *camera)
{	
	char buff[NUM_LEN]; 
	char buffer[DEC_LEN]; 
	printf("** Dettagli inserimento camera di albergo **\n\n");
	get_input("Inserisci il numero della camera : ", NUM_LEN, buff, false);
	camera->numerocamera = atoi(buff); 
	get_input("Inserisci l'ID dell'albergo in cui la camera √® ubicata : ", NUM_LEN, buff, false);
	camera->albergo = atoi(buff); 
	get_input("Inserisci la tipologia: ", VARCHAR_LEN, camera->tipologia, false);
	get_input("Inserisci il prezzo giornaliero del soggiorno: ", DEC_LEN, buffer, false);
	camera->costo = atof(buffer); 
	do_insert_room(camera); 
}

void ins_location(struct localita *localita)
{	
	printf("** Dettagli inserimento localita **\n\n");
	get_input("Inserisci il nome: ", VARCHAR_LEN, localita->nomelocalita, false);
	get_input("Inserisci ll nome della regione: ", VARCHAR_LEN, localita->regione, false);
	get_input("Inserisci il nome dello stato: ", VARCHAR_LEN, localita->stato, false);
	do_insert_location(localita); 
}


void ins_map(struct mappa *mappa)
{	
	printf("** Dettagli inserimento mappa **\n\n");
	get_input("Inserisci il nome della citta' rappresentata nella mappa: ", VARCHAR_LEN, mappa->citta, false);
	get_input("Inserisci il nome della regione in cui √® ubicata la citta' rappresentata: ", VARCHAR_LEN, mappa->localitarappresentata, false);
	get_input("Inserisci il livello di dettaglio: ", VARCHAR_LEN, mappa->dettaglio, false);
	get_input("Inserisci il nome della zona rappresentata dalla mappa: ", VARCHAR_LEN, mappa->zona, false);
	get_input("Inserisci il file della mappa: ", BLOB_LEN, mappa->immagine, false); 
	do_insert_map(mappa); 
}

void ins_picture(struct documentazionefotografica *documentazionefotografica) 
{	
	printf("** Dettagli inserimento nuova foto **\n\n");
	get_input("Inserisci la descrizione : ", DES_LEN, documentazionefotografica->descrzione, false);
	get_input("Inserisci l'immagine: ", PIC, documentazionefotografica->foto, false);
	do_insert_picture(documentazionefotografica); 
}

void ins_offert(struct offre *offre) 
{	
	char buff[VARCHAR_LEN];
	printf("** Dettagli inserimento offre **\n\n");
	get_input("Inserisci l'id del servizio offerto: ", NUM_LEN, buff, false);
	offre->idservizio = atoi(buff); 
	get_input("Inserisci l'id dell'albergo offerente : ", NUM_LEN, buff, false);
	offre->albergoofferente= atoi(buff); 
	do_insert_offert(offre);
}




void ins_service(struct servizio *servizio)
{	
	printf("** Dettagli inserimento servizio **\n\n");
	get_input("Inserisci il nome: ", VARCHAR_LEN, servizio->nomeservizio, false);
	get_input("Inserisci la descrizione (massimo 5000 caratteri): ", DES_LEN, servizio->descrizioneservizio, false);
	do_insert_service(servizio); 
}

void ins_fme(struct fme *fme)
{	
	char buff[NUM_LEN]; 
	printf("** Dettagli inserimento fme **\n\n");
	get_input("Inserisci l'di della meta in questione: ", NUM_LEN, buff, false);
	fme->meta = atoi(buff); 
	get_input("Inserisci l'id della foto in questione: ", NUM_LEN, buff, false);
	fme->foto = atoi(buff); 
	do_insert_fme(fme); 
}

void ins_fmo(struct fmo *fmo)
{	
	char buff[NUM_LEN]; 
	printf("** Dettagli inserimento fmo **\n\n");
	get_input("Inserisci il nome del modello in questione: ", VARCHAR_LEN, fmo->modello, false);
	get_input("Inserisci l'id della foto in questione: ", NUM_LEN, buff, false);
	fmo->foto = atoi(buff); 
	do_insert_fmo(fmo); 
}


void ins_comfort(struct comfort *comfort)
{	
	printf("** Dettagli inserimento comfort **\n\n");
	get_input("Inserisci il nome : ", VARCHAR_LEN, comfort->nomecomfort, false);
	get_input("Inserisci la descrizione (massimo 5000 caratteri) : ", DES_LEN, comfort->descrizionecomfort, false);
	do_insert_comfort(comfort); 
}

void ins_rt(struct rt *rt)
{	
	char buff[NUM_LEN]; 
	printf("** Dettagli inserimento rt **\n\n");
	get_input("Inserisci l'id della revisione in questione: ", NUM_LEN, buff, false);
	rt->revisionerelativa = atoi(buff);
	get_input("Inserisci l'id del tagliando in questione: ", NUM_LEN, buff, false);
	rt->tagliandoassociato= atoi(buff); 
	do_insert_rt(rt); 
}

void ins_presents(struct presenti *presenti)
{	
	char buff[NUM_LEN]; 
	printf("** Dettagli inserimento presenti **\n\n");
	get_input("Inserisci il nome del modello in questione: ", VARCHAR_LEN, presenti->modelloassciato, false);
	get_input("Inserisci l'id del comfort in questione: ", NUM_LEN, buff, false);
	presenti->comfortpresenti= atoi(buff); 
	do_insert_presents(presenti); 
}



void ins_skills(struct competenze *competenze)
{	
	printf("** Dettagli inserimento competenze **\n\n");
	get_input("Inserisci il nome del modello associato: ", VARCHAR_LEN, competenze->modelloassociato, false);
	get_input("Inserisci la mail del meccanico competente : ", VARCHAR_LEN, competenze->meccanicocompetente, false);
	do_insert_skills(competenze); 
}

void ins_employee(struct dipendente *dipendente) 
{	
	printf("** Dettagli inserimento dipendente **\n\n");
	get_input("Inserisci la mail: ", VARCHAR_LEN, dipendente->emaildipendente, false);
	get_input("Inserisci il nome: ", VARCHAR_LEN, dipendente->nomedipendente, false);
	get_input("Inserisci il cognome: ", VARCHAR_LEN, dipendente->cognomedipendente, false);
	get_input("Inserisci il numero di telefono aziendale: ", TEL_LEN ,dipendente->telefonoaziendale, false);
	do_insert_employee(dipendente);
	
}

void validate_reservation(struct prenotazione *prenotazione , struct postoprenotato *postoprenotato, struct soggiorno *soggiorno)
{
	char buff[NUM_LEN]; 
	printf("** Procedura conferma prenotazione **\n\n"); 
	get_input("Inserisci la mail del cliente prenotante: ", VARCHAR_LEN,prenotazione->clienteprenotante, false);
	get_reservation_info(prenotazione->clienteprenotante);
 	bool ans = yes_or_no("\n\n Vuoi confermare una di queste prenotazioni? (s/n) ",'s','n',false,false);
	if(!ans) {
		return;
		}
	get_input("Inserisci il numero di prenotazione che si intende confermare: ", NUM_LEN, buff, false);
	prenotazione->numerodiprenotazione = atoi(buff); 
	while(true){
		get_input("Modifica data di conferma [YYYY-MM-DD]: ", DATE_LEN, prenotazione ->datadiconferma, false);
		if(validate_date(prenotazione ->datadiconferma))
			break;
		fprintf(stderr, "Data errata!\n");
		}

	while(true){
		get_input("Modifica data di saldo [YYYY-MM-DD]: ", DATE_LEN, prenotazione->datasaldo, false);
		if(validate_date(prenotazione ->datasaldo))
			break;
		fprintf(stderr, "Data errata!\n");
		}

	do_validate_reservation(prenotazione);

	bool seat_ans, association_ans;   

	do {
		printf("\n\n** Associa un passeggero alla prenotazione ** \n\n"); 

		postoprenotato ->prenotazioneassociata = prenotazione ->numerodiprenotazione; 

		get_input("Inserisci il numero di posto: ", NUM_LEN, buff, false);
		postoprenotato->numerodiposto = atoi(buff); 
		get_input("Inserisci l'et√†: ", NUM_LEN, buff, false);
		postoprenotato->etapasseggero = atoi(buff); 
		get_input("Inserisci il nome: ", VARCHAR_LEN, postoprenotato-> nomepasseggero, false);
		get_input("Inserisci il cognome: ", VARCHAR_LEN, postoprenotato-> cognomepasseggero, false);

	do_insert_seat(postoprenotato);

		ans = yes_or_no("\n\n Vuoi associare una camera a questo passeggero? (s/n) ",'s','n',false,false);
		if (ans)
			do{	
				soggiorno->prenotazioneinquestione= prenotazione->numerodiprenotazione; 
				soggiorno->ospite  = postoprenotato->numerodiposto; 
				printf("\n** Associa soggiorno**\n\n");
				get_input("Inserisci il numero della camera: ", NUM_LEN, buff, false);
				soggiorno->cameraprenotata = atoi(buff); 
				get_input("Inserisci l'albergo in cui √® ubicata la camera: ", NUM_LEN, buff,false);	
				soggiorno->albergoinquestione = atoi(buff); 
				while(true){
					get_input("Inserici la data d'inizio del soggiorno [YYYY-MM-DD]: ",DATE_LEN, soggiorno->datainiziosoggiorno,false); 
					if(validate_date(soggiorno->datainiziosoggiorno))
						break;
					fprintf(stderr, "Data errata!\n");
				}
				while(true){
					get_input("Inserisci la data di fine soggiorno [YYYY-MM-DD]: ",DATE_LEN, soggiorno->datafinesoggiorno, false);
					if(validate_date(soggiorno->datafinesoggiorno))
						break;
					fprintf(stderr, "Data errata!\n");
				} 
				association_ans= yes_or_no("\n\n Vuoi associare un'altra camera a questo passeggero? (s/n) ",'s','n',false,false);
			}while(association_ans);
		seat_ans =yes_or_no("\n\n Vuoi associare un'altro passeggero a questa prenotazione ? (s/n) ",'s','n',false,false);
	} while(seat_ans); 

}#pragma once

#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>

#include "../utils/io.h"
#include "../utils/validation.h"
#include "../model/trpdb.h"


extern void ins_costumer(struct cliente *cliente);
extern void ins_costumer_hstss(struct cliente *cliente, struct utente *utente );
extern void ins_prenotation(struct prenotazione *prenotazione);
extern void ins_seat(struct postoprenotato *postoprenotato);
extern void ins_review(struct revisione *revisione, struct sostituito *sostituito, struct ricambio *ricambio);
extern void ins_sparepart(struct ricambio *ricambio);
extern void ins_bus(struct mezzo *mezzo);
extern void ins_model(struct modello *modello, struct competenze *competenze);
extern void ins_certify(struct tagliando *tagliando);
extern void ins_stay(struct soggiorno *soggiorno);
extern void ins_sostitution( struct sostituito *sostituito); 
extern void ins_tour(struct tour *tour);
extern void ins_trip(struct viaggio *viaggio);
extern void ins_destination(struct  meta *meta);
extern void ins_visit(struct visita *visita);
extern void ins_room(struct camera *camera);
extern void ins_location(struct localita *localita);
extern void ins_map(struct mappa *mappa);
extern void ins_picture(struct documentazionefotografica *documentazionefotografica) ;
extern void ins_employee(struct dipendente *dipendente);
extern void ins_user(struct utente *utente);
extern void ins_offert(struct offre *offre); 
extern void ins_service(struct servizio *servizio);
extern void ins_fmo(struct fmo *fmo); 
extern void ins_fme(struct fme *fme); 
extern void ins_bus(struct mezzo *mezzo);
extern void ins_sparepart(struct ricambio *ricambio);
extern void ins_comfort(struct comfort *comfort);
extern void ins_skills(struct competenze *competenze); 
extern void ins_costumer_user(struct utente *utente); 
extern void validate_reservation(struct prenotazione *prenotazione , struct postoprenotato *postoprenotato, struct soggiorno *soggiorno); 
extern void ins_presents(struct presenti *presenti); 
extern void ins_rt(struct rt *rt); 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "login.h"
#include "hostess.h"
#include "cliente.h"
#include "meccanico.h"
#include "autista.h"
#include "manager.h"
#include "../utils/io.h"

void view_login(struct credentials *cred)
{
	
	puts("*********************************");
	puts("*   BENVENUTI IN TRIPBUS *");
	puts("*********************************\n");
	get_input("Username: ", USERNAME_LEN, cred->username, false);
	get_input("Password: ", PASSWORD_LEN, cred->password, true);

}

bool ask_for_relogin(void)
{
	return yes_or_no("Vuoi accedere con utente differente?", 's', 'n', false, true);
	clear_screen(); 
	

}

int main (void)
{	
	bool answer = false; 
	bool ans = true; 


	size_t role; 

	struct credentials *cred;

	cred = malloc(sizeof(struct credentials));

	init_db();

	while (!answer){
		
		if(ans){
			view_login(cred); 
			role = attempt_login(cred);
		}

		switch(role){
			case AUTISTA: 
				run_drvr_interface();  
				break;
			case CLIENTE:
				run_cstmr_interface(); 
				break; 
			case HOSTESS:
				run_hstss_interface(); 
				break; 
			case MECCANICO: 
				run_mch_interface();  
				break; 
			case MANAGER: 
				run_mngr_interface(); 
			case QUIT: 
				printf("Quit!\n");
			}
			
			ans = ask_for_relogin(); 
			if(!ans){
				answer = yes_or_no("\n\nVuoi chiudere il database? (s/n) ",'s','n',false,false);
					if(answer){
						fini_db();
					}
			}
	}
	
	return 0; 
}


#pragma once

#include "../model/trpdb.h"

extern bool ask_for_relogin(void);
extern void view_login(struct credentials *cred);
compile: 
	gcc  *.c -o run  ../model/trpdb.c  ../utils/io.c ../utils/validation.c ../utils/db.c ../utils/dotenv.c `mysql_config --cflags --include --libs`

clean: 
	-rm run

#include <stdio.h>

#include "manager.h"
#include "ins.h"
#include "show.h"
#include "dlt.h"

#include "../utils/io.h"
#include "../utils/validation.h"

struct soggiorno * soggiorno;
struct camera *camera; 
struct documentazionefotografica *documentazionefotografica; 
struct cliente *cliente; 
struct comfort *comfort; 
struct competenze *competenze; 
struct dipendente * dipendente; 
struct fmo *fmo; 
struct fme *fme; 
struct localita *localita; 
struct mappa *mappa; 
struct meta *meta; 
struct mezzo *mezzo; 
struct modello *modello; 
struct offre *offre; 
struct postoprenotato *postoprenotato; 
struct prenotazione *prenotazione; 
struct presenti *presenti;
struct revisione *revisione;
struct rt *rt;  
struct ricambio *ricambio; 
struct servizio *servizio; 
struct sostituito *sostituito; 
struct tagliando *tagliando; 
struct tour *tour; 
struct viaggio *viaggio;
struct visita *visita;  
struct utente *utente; 

int allocation_gest(void)
{

	dipendente = malloc(sizeof(struct dipendente));
	if(dipendente == NULL)
		{printf("Fallimento malloc su dipendente (manager) \n\n"); 
		 return -1; 
		}

	servizio= malloc(sizeof(struct servizio));
	if(servizio== NULL)
		{printf("Fallimento malloc servizio(manager) \n\n"); 
		 return -1; 
	    }
	if(utente == NULL)
    	{utente = malloc(sizeof(struct utente));
		if(utente == NULL)
			{printf("Fallimento malloc utente (manager) \n\n"); 
		 return -1; 
			 }
		}

}

int allocation_costumer(void)
{	
	if(utente == NULL)
		{utente  = malloc(sizeof(struct utente )); 
		if(utente  == NULL)
			{printf("Fallimento malloc su utente  (manager)) \n\n"); 
			 return -1; 
			}
		}
	cliente = malloc(sizeof(struct cliente)); 
	if(cliente == NULL)
		{printf("Fallimento malloc su cliente (manager)) \n\n"); 
		 return -1; 
		}
	prenotazione = malloc(sizeof(struct prenotazione)); 
	if(prenotazione == NULL)
		{printf("Fallimento malloc su prenotazione (manager) \n\n");
		 return -1; 
		}
	postoprenotato = malloc(sizeof(struct postoprenotato));
	if(postoprenotato == NULL)
		{printf("Fallimento malloc su postoprenotato (manager) \n\n"); 
		 return -1; 
		}
	
	soggiorno = malloc(sizeof(struct soggiorno)); 
	if(soggiorno == NULL)
		{printf("Fallimento malloc su soggiorno (manager)) \n\n"); 
		 return -1; 
		}
		

}

int allocation_workshop(void)
{	

	mezzo = malloc(sizeof(struct mezzo));
	if(mezzo == NULL)
		{printf("Fallimento malloc su mezzo (manager) \n\n"); 
		 return -1;
		}
	modello = malloc (sizeof(struct modello));
	if(modello == NULL)
		{printf("Fallimento malloc su modello (manager) \n\n"); 
		 return -1;
		}
	revisione = malloc(sizeof(struct revisione));
	if(revisione == NULL)
		{printf("Fallimento malloc su revisione (manager) \n\n"); 
		 return -1;
		}

	ricambio = malloc(sizeof(struct ricambio));
	if(ricambio == NULL)
		{printf("Fallimento malloc su ricambio (manager) \n\n"); 
		 return -1;
		}
	
	tagliando = malloc(sizeof(struct tagliando));
	if(tagliando == NULL)
		{printf("Fallimento malloc su tagliando (manager) \n\n"); 
		 return -1;
		}
	comfort = malloc(sizeof(struct comfort));
	if(comfort == NULL)
		{printf("Fallimento malloc su comfort (manager) \n\n"); 
		 return -1;
		}
	competenze = malloc(sizeof(struct competenze)); 
	if(competenze == NULL)
		{printf("Fallimento malloc su competenze (manager) \n\n");
		 return -1; 
		}
	sostituito= malloc(sizeof(struct sostituito)); 
	if(sostituito== NULL)
		{printf("Fallimento malloc su sostituito(manager) \n\n");
		 return -1; 
		}

}

int allocation_tour(void){

	camera = malloc(sizeof(struct camera));
	if(camera == NULL)
		{printf("Fallimento malloc su camera (manager) \n\n"); 
		 return -1;
		}
	documentazionefotografica = malloc(sizeof(struct documentazionefotografica));
	if(documentazionefotografica == NULL)
		{printf("Fallimento malloc su documentazionefotografica (manager) \n\n"); 
		 return -1;
		}
	localita = malloc(sizeof(struct localita));
	if(localita == NULL)
		{printf("Fallimento malloc su localita (manager) \n\n"); 
		 return -1;
		}
	mappa = malloc(sizeof(struct mappa));
	if(mappa == NULL)
		{printf("Fallimento malloc su mappa (manager) \n\n"); 
		 return -1;
		}
	meta = malloc(sizeof(struct meta));
	if(meta == NULL)
		{printf("Fallimento malloc su meta (manager) \n\n"); 
		 return -1;
		}
	viaggio = malloc(sizeof(struct viaggio));
	if(viaggio == NULL)
		{printf("Fallimento malloc su viaggio (manager) \n\n"); 
		 return -1;
		}
	visita = malloc(sizeof(struct visita));
	if(visita == NULL)
		{printf("Fallimento malloc su visita (manager) \n\n"); 
		 return -1;
		}
	tour = malloc(sizeof(struct tour));
	if(tour == NULL)
		{printf("Fallimento malloc su tour (manager) \n\n"); 
		 return -1;
		}

}

int allocation_con_table(void)
{
	presenti = malloc(sizeof(struct presenti)); 
	if(presenti == NULL)
		{printf("Fallimento malloc su presenti (manager) \n\n"); 
		 return -1;
		}
	rt = malloc(sizeof(struct rt)); 
	if(rt == NULL)
		{printf("Fallimento malloc su rt (manager) \n\n"); 
		 return -1;
		}
	fmo = malloc(sizeof(struct fmo)); 
	if(fmo == NULL)
		{printf("Fallimento malloc su fmo (manager) \n\n"); 
		 return -1;
		}
	fme = malloc(sizeof(struct fme));
	if(fme == NULL)
		{printf("Fallimento malloc fme (manager) \n\n"); 
		 return -1; 
		 }
	offre = malloc(sizeof(struct offre));
	if(offre == NULL)
		{printf("Fallimento malloc offre (manager) \n\n"); 
		 return -1; 
	    }
	
}


int get_mngr_action(void) 
{	char options[4] = {'1','2','3','4'};
	char op; 
	puts("*** Quale operazione vorresti eseguire? ***\n");
	puts("1) Visualizzazione");
	puts("2) Inserimento");
	puts("3) Cancellazione");
	puts("4) Esci");
	op = multi_choice("Seleziona un'opzione", options, 4);
	return op - '1';
}

int get_mngr_group(void)
{	char options[6] = {'1','2','3','4','5','6'};
	char op; 
	puts("*********************************");
	puts("*   INTERFACCIA AMMINISTRATORE    *");
	puts("*********************************\n");
	puts("*** In quale ambito ? ***\n");
	puts("1) Gestione interna");
	puts("2) Gestione tour");
	puts("3) Gestione officina");
	puts("4) Gestione clienti");
	puts("5) Gestione tabelle connessione");
	puts("6) Esci");

	op = multi_choice("Seleziona un'opzione", options, 6);
	return op - '1';

}


bool get_table_tour(char sel)
{
	char act; 
	if(camera == NULL || documentazionefotografica == NULL || localita == NULL || mappa == NULL || meta == NULL ){
		allocation_tour();
		printf("Allocazione tour avvenuta\n\n"); 
	}
	switch(sel){
		case TABELLA_TOUR:{
			act = get_mngr_action();
				switch(act){
					case GESTIONE_SELECT: {
                    	show_tour(tour); 
               			return true; 
               		}
	            	case GESTIONE_INSERT: {
                   		ins_tour(tour); 
                		return true; 
                	}
	            	case GESTIONE_DELETE: {
                    	dlt_tour(tour); 
                	return true; 
               		}
	            	case QUIT_GEST_OP: {
                    	return false; 
                	}
				} 
			}
    	case TABELLA_VIAGGIO:{
			act = get_mngr_action();
						switch(act){
				case GESTIONE_SELECT: {
                    show_trip(viaggio); 
                return true; 
                }
	            case GESTIONE_INSERT: {
					ins_trip(viaggio); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_trip(viaggio);  
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		}
    	case TABELLA_META:{
			act = get_mngr_action();
						switch(act){
				case GESTIONE_SELECT: {
                    show_destination(meta); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_destination(meta); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_destination(meta); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		} 
    	case TABELLA_VISITA:{
			act = get_mngr_action();
						switch(act){
				case GESTIONE_SELECT: {
                    show_visit(visita); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_visit(visita); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_visit(visita); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		} 
		case TABELLA_CAMERA:{
			act = get_mngr_action();
						switch(act){
				case GESTIONE_SELECT: {
                    show_room(camera); 
                return true; 
                }
	            case GESTIONE_INSERT: {
					ins_room(camera);
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_room(camera); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		}
    	case TABELLA_LOCALITA:{
			act = get_mngr_action();
						switch(act){
				case GESTIONE_SELECT: {
                    show_location(localita); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_location(localita); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_location(localita); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		}
    	case TABELLA_MAPPA:{
			act = get_mngr_action();
						switch(act){
				case GESTIONE_SELECT: {
                    show_map(mappa); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_map(mappa); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_map(mappa);  
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		}
		case TABELLA_DOCUMENTAZIONEFOTOGRAFICA:{
			act = get_mngr_action();
						switch(act){
				case GESTIONE_SELECT: {
                    show_picture(documentazionefotografica); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_picture(documentazionefotografica); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_picture(documentazionefotografica);  
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		}
    	case QUIT_GEST_TOUR:{
		return false; 
	}
	}
}

int tour_section(void) //sezione tour
{	
	char options[9] = {'1','2','3','4','5','6','7','8','9'};
    char op; 
		puts("*** Su quale tabella della gestione tour? ***\n");
		puts("1) Tour");
		puts("2) Viaggio");
		puts("3) Meta");
		puts("4) Visita");
		puts("5) Camera"); 
		puts("6) Localit√†"); 
		puts("7) Mappa");
		puts("8) Documentazione fotografica"); 
		puts("9) Esci");
		op = multi_choice("Seleziona un'opzione", options, 9);
		get_table_tour(( op - '1'));
}


bool get_table_workshop(char sel){ 
	char act; 
	if (mezzo == NULL || modello == NULL || revisione == NULL || ricambio == NULL || tagliando == NULL || comfort == NULL || competenze == NULL)
		{
			allocation_workshop(); 
			printf("Allocazione costumer avvenuta\n\n"); 
		}
	switch(sel){
		case TABELLA_MODELLO: {
			act = get_mngr_action(); 
			switch(act){
				case GESTIONE_SELECT: {
                    show_model(modello); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_model(modello, competenze); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_model(modello); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		}
    	case TABELLA_MEZZO:{
			act = get_mngr_action(); 
			switch(act){
				case GESTIONE_SELECT: {
                    show_bus(mezzo); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_bus(mezzo); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_bus(mezzo); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		} 
    	case TABELLA_RICAMBIO:{
			act = get_mngr_action(); 
			switch(act){
				case GESTIONE_SELECT: {
                    show_sparepart(ricambio); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_sparepart(ricambio); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_sparepart(ricambio); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		}  
    	case TABELLA_REVISIONE:{
			act = get_mngr_action(); 
			switch(act){
				case GESTIONE_SELECT: {
                    show_review(revisione); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_review(revisione,sostituito,ricambio); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_review(revisione); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		}  
    	case TABELLA_TAGLIANDO:{
			act = get_mngr_action(); 
			switch(act){
				case GESTIONE_SELECT: {
                    show_certify(tagliando); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_certify(tagliando); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_certify(tagliando);
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		} 
		case TABELLA_COMFORT:{
		
			act = get_mngr_action(); 
			switch(act){
				case GESTIONE_SELECT: {
                    show_comfort(comfort); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                	ins_comfort(comfort); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_comfort(comfort);
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		} 
		case TABELLA_COMPETENZE:{
		
			act = get_mngr_action(); 
			switch(act){
				case GESTIONE_SELECT: {
                    show_skills(competenze); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                	ins_skills(competenze); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_skills(competenze);  
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		} 
		case TABELLA_SOSTITUITO:{
		
			act = get_mngr_action(); 
			switch(act){
				case GESTIONE_SELECT: {
                    show_sostitution(sostituito); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                	ins_sostitution(sostituito); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_sostitution(sostituito);  
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		} 
    	case QUIT_GEST_OFFICINA:{
			return false; 
		}
	}
}

int workshop_section(void) // sezione officina 
 {	    
		char options[9] = {'1','2','3','4','5','6','7','8','9'};
        char op; 
		 puts("*** Su quale tabella della gestione officina? ***\n");
	 	 puts("1) Modello ");
	 	 puts("2) Mezzo");
	 	 puts("3) Ricambio");
		 puts("4) Revisione");
		 puts("5) Tagliando");
		 puts("6) Comfort"); 
		 puts("7) Competenze"); 
		 puts("8) Sostituzione");
		 puts("9) Esci");
		 op = multi_choice("Seleziona un'opzione", options, 9);
		 get_table_workshop((op - '1'));
}


bool get_table_costumer (char sel )
{ 	
	char act; 
	if(cliente == NULL || prenotazione  == NULL || postoprenotato == NULL) {
		allocation_costumer();
		printf("\n\nAllocazione costumer avvenuta.\n\n");
     } 
    switch(sel){
		case TABELLA_CLIENTE: {
			act = get_mngr_action(); 
			switch(act){
				case GESTIONE_SELECT: {
                    show_costumer(cliente); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_costumer(cliente); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_costumer(cliente);  
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			}
		}

    	case TABELLA_PRENOTAZIONE:{
			act = get_mngr_action(); 
			switch(act){
				case GESTIONE_SELECT: {
                    show_reservation(prenotazione); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                	ins_prenotation(prenotazione); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_reservation(prenotazione);  
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			}
		} 

    	case TABELLA_POSTO_PRENOTATO:{
			act = get_mngr_action(); 
			switch(act){
				case GESTIONE_SELECT: {
                    show_seat(postoprenotato); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_seat(postoprenotato); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_seat(postoprenotato); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
		}
		case TABELLA_SOGGIORNO: {
        act = get_mngr_action();
            switch (act){
                case GESTIONE_SELECT: {
                    show_stay(soggiorno); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_stay(soggiorno); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_stay(soggiorno); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
            } 
			return true;
        } 
		case VALIDAZIONE_PRENOTAZIONE: {
			validate_reservation(prenotazione, postoprenotato,soggiorno); 
			return true; 
		}

    	case QUIT_GEST_CLIENTE: {
		return false; 
		}
	}

}

int costumer_section(void) // sezione clienti
{	
	char options[6] = {'1','2','3','4','5','6'};
    char op; 
    puts("*** Su quale tabella della gestione clienti? ***\n");
	puts("1) Cliente");
    puts("2) Prenotazione");
	puts("3) Posto prenotato");
	puts("4) Soggiorno");
	puts("5) Validazione prenotazioni");
	puts("6) Esci");
    op = multi_choice("Seleziona un'opzione", options, 6);
	get_table_costumer((op-'1')); 
}


bool get_table_gest (char sel)
{   char act;
    if( dipendente == NULL || servizio == NULL  || utente == NULL) {
		allocation_gest();
		printf("\n\nAllocazione gest avvenuta.\n\n");
     } 
    switch(sel){
        case TABELLA_DIPENDENTI: {
         act = get_mngr_action();
            switch (act){
                case GESTIONE_SELECT: {
                    show_employee(dipendente); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_employee(dipendente); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_employee(dipendente); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
			} 
			return true; 
        }

        case TABELLA_UTENTI: {
         act = get_mngr_action();
            switch (act){
                case GESTIONE_SELECT: {
                    show_user(utente); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_user(utente); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_user(utente); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
            } 
        return true; 
        }


		case TABELLA_SERVIZI: {
			act = get_mngr_action();
            switch (act){
                case GESTIONE_SELECT: {
                    show_service(servizio); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_service(servizio); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                     dlt_service(servizio);  
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
            } 
		return true; 
        }
        case QUIT_ANAG: {
        return false; 
        }
    }

}

int gest_section(void)
 {	    
		char options[4] = {'1','2','3','4'};
        char op; 
		 puts("*** Su quale tabella della gestione interna? ***\n");
	 	 puts("1) Dipendenti");
	 	 puts("2) Utenti");
		 puts("3) Servizi"); 
         puts("4) Esci"); 
		 op = multi_choice("Seleziona un'opzione", options, 4);
         get_table_gest((op - '1')); 
}

bool get_table_con_tab (char sel)
{   char act;
    if(offre == NULL||fme == NULL ||fmo == NULL || presenti == NULL || rt == NULL) {
		allocation_con_table();
		printf("\n\nAllocazione gest avvenuta.\n\n");
     } 
    switch(sel){    
		
        case TABELLA_OFFRE: {
			act = get_mngr_action();
            switch (act){
                case GESTIONE_SELECT: {
                    show_ofr(offre); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_offert(offre); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_ofr(offre); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
            } 
		return true; 
        }    

		 case TABELLA_PRESENTI: {
			act = get_mngr_action();
            switch (act){
                case GESTIONE_SELECT: {
                    show_presents(presenti); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_presents(presenti); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_presents(presenti); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                    return false; 
                }
            } 
		return true; 
        }    

        case TABELLA_FMO: {
			act = get_mngr_action();
            switch (act){
                case GESTIONE_SELECT: {
                    show_fmo(fmo); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_fmo(fmo); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_fmo(fmo);
                return true; 
                }
	            case QUIT_GEST_OP: {
                return false; 
				}
			}
			return true;
        
        } 
 
        case TABELLA_FME: {
			act = get_mngr_action();
            switch (act){
                case GESTIONE_SELECT: {
                    show_fme(fme); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                    ins_fme(fme); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                    dlt_fme(fme); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                return false; 
				}
			}
			return true;
        }
		case TABELLA_RT: {
			act = get_mngr_action();
            switch (act){
                case GESTIONE_SELECT: {
                   show_rt(rt); 
                return true; 
                }
	            case GESTIONE_INSERT: {
                   ins_rt(rt); 
                return true; 
                }
	            case GESTIONE_DELETE: {
                  dlt_rt(rt); 
                return true; 
                }
	            case QUIT_GEST_OP: {
                return false; 
				}
			}
			return true;
        }
        case QUIT_GEST_TAB: {
        return false; 
        }
    }
}


int tab_con_section(void)
 {	    
		char options[6] = {'1','2','3','4','5','6'};
        char op; 
		 puts("*** Su quale delle tabelle di connessione ? ***\n");
		 puts("1) Offre");
		 puts("2) Presenti"); 							///
         puts("3) Collegamento foto-modelli");
         puts("4) Collegamento foto-mete");
		 puts("5) Collegamento revisione-tagliando");  ///
         puts("6) Esci"); 
		 op = multi_choice("Seleziona un'opzione", options, 6);
         get_table_con_tab ((op - '1')); 
}



bool exe_mngr_group(char sel)
{	

	switch (sel)
		{	
			case GESTIONE_DIPENDENTI: {
				gest_section(); 
				return true;
				}
			case GESTIONE_CLIENTI:{
				costumer_section();  
				return true; 
				}
		
			case GESTIONE_OFFICINA:{
				workshop_section();  
				return true;
				}
     		case GESTIONE_TOUR:{
                tour_section(); 
				return true; 
				}
			case GESTIONE_TABELLE_CONNESSIONE:{
				tab_con_section();
				return true; 
			}
			case QUIT_GEST_GROUP:{ 
				return false;
		 		} 
		
	}
	return true;
}

void run_mngr_interface (void)
{ 	
	char sel;
	while (true){
	sel = get_mngr_group(); 
	if (!exe_mngr_group(sel))
		break; 
	}

}	
#pragma once
#include <string.h>
#include <mysql/mysql.h>
#include <assert.h>

#include "../model/trpdb.h"

typedef enum{
	GESTIONE_DIPENDENTI,
	GESTIONE_TOUR,
	GESTIONE_OFFICINA,
    GESTIONE_CLIENTI,
    GESTIONE_TABELLE_CONNESSIONE, 
	QUIT_GEST_GROUP
} gest_act;


typedef enum{
	GESTIONE_SELECT,
	GESTIONE_INSERT,
	GESTIONE_DELETE,
	QUIT_GEST_OP
} gest_op;

typedef enum{
    TABELLA_OFFRE,
    TABELLA_PRESENTI,
    TABELLA_FMO, 
    TABELLA_FME,
    TABELLA_RT,
	QUIT_GEST_TAB
} gest_con_tab;

typedef enum{
    TABELLA_DIPENDENTI,
    TABELLA_UTENTI,
    TABELLA_SERVIZI,
    QUIT_ANAG
}gest_str;

typedef enum{
    TABELLA_TOUR,
    TABELLA_VIAGGIO, 
    TABELLA_META, 
    TABELLA_VISITA, 
    TABELLA_CAMERA, 
    TABELLA_LOCALITA,
    TABELLA_MAPPA,
    TABELLA_DOCUMENTAZIONEFOTOGRAFICA,
    QUIT_GEST_TOUR
}gest_tour;

typedef enum{
    TABELLA_MODELLO,
    TABELLA_MEZZO, 
    TABELLA_RICAMBIO, 
    TABELLA_REVISIONE, 
    TABELLA_TAGLIANDO,
    TABELLA_COMFORT,
    TABELLA_COMPETENZE,
    TABELLA_SOSTITUITO,
    QUIT_GEST_OFFICINA
}gest_workshop;

typedef enum{
    TABELLA_CLIENTE,
    TABELLA_PRENOTAZIONE, 
    TABELLA_POSTO_PRENOTATO,
    TABELLA_SOGGIORNO, 
    VALIDAZIONE_PRENOTAZIONE, 
    QUIT_GEST_CLIENTE
}gest_costumer;




 
extern void run_mngr_interface (void);
#include <stdio.h>

#include "meccanico.h"
#include "ins.h"
#include "show.h"
#include "../utils/io.h"
#include "../utils/validation.h"

struct revisione *revisione_mch; 
struct sostituito *sostituito_mch; 
struct ricambio *ricambio_mch; 

int allocation_mch(void)
{
	revisione_mch = malloc(sizeof( struct revisione)); 
	if(revisione_mch == NULL){
		printf("Impossibile eseguire malloc su revisone\n"); 
		return -1; 
	}

	sostituito_mch = malloc(sizeof(struct sostituito));
	if(sostituito_mch == NULL){
		printf("Impossibile eseguire malloc su sostituito\n"); 
		return -1;
	} 

	ricambio_mch = malloc(sizeof(struct ricambio));
	if(ricambio_mch == NULL){
		printf("Impossibile eseguire malloc su ricambio\n"); 
		return -1;
	}
}

void selection (void)
{
char buff[NUM_LEN];
get_input("Inserisci il codice ricambio : ", VARCHAR_LEN, buff, false); 
revisione_mch->idrevisione = atoi(buff);
do_select_review(revisione_mch); 
show_review(revisione_mch); 
}


int get_mch_action(void)
{
	char options[3] = {'1','2','3'};
	char op;
			
	puts("*********************************");
	puts("*   INTERFACCIA MECCANICO    *");
	puts("*********************************\n");
	puts("*** Quale operazione vorresti eseguire? ***\n");
	puts("1) Inserisci una nuova revisione");
	puts("2) Consulta le revisioni scadute");
	puts("3) Esci");

	op = multi_choice("Select an option", options,3);
	return op - '1';
}

bool exe_mch_act(mch_act sel)
{	
	 
	switch (sel){
		case INS_REVISIONE:{
			ins_review(revisione_mch, sostituito_mch, ricambio_mch); 
		return true;   
		}
		case PIANIFICA_REVISIONE: {
			show_expired_review(); 
		return true; 
		}
		case QUIT_MCH:
		return false;
		
	break;
	}

	return true; 
}

void run_mch_interface (void)
{ 	
	char sel; 
	if(revisione_mch == NULL || sostituito_mch == NULL || ricambio_mch == NULL) 
		allocation_mch(); 
	while (true){
	sel = get_mch_action(); 
	if(!exe_mch_act(sel))
		break; 
	
	}
}



#pragma once
#include "../model/trpdb.h"

typedef enum {
	INS_REVISIONE,
	PIANIFICA_REVISIONE,
	QUIT_MCH
}mch_act;

	
/*
extern void show_expired_revisions(struct revisioni_scadute *revisioni_scadute); // Procedura visualizazzione revisioni scadute
extern void show_sparepart(struct ricambio *ricambio); // procedura visualizazzione ricambio
extern void update_sparepart_number(struct ricambio *ricambio);// Procedura modifica quantit√† in magazzino
*/
extern void run_mch_interface (void);
ELF          >    ¿(      @       ∞         @ 8  @         @       @       @       ÿ      ÿ                                                                                        ÿ      ÿ                                           ≈Ö     ≈Ö                   ∞      ∞      ∞     ‘•      ‘•                   ê[     êk     êk     ®      0                   †[     †k     †k                                8      8      8      0       0                    h      h      h      D       D              SÂtd   8      8      8      0       0              PÂtd    )      )      )     Ï      Ï             QÂtd                                                  RÂtd   ê[     êk     êk     p      p             /lib64/ld-linux-x86-64.so.2               GNU   ¿          Ä ¿                   GNU àÛÃ˝÷i‹*8-Á≤ÿC≤Ç%+         GNU                      I          ° ÄI   K       (å—eŒmfUa9Úã                            U                     #                     ≠                     Î                     û                      «                     +                                          ¿                     +                     ô                     	                     Œ                     ˘                     ‘                      ±                      ‘                     ï                     ˙                      ¬                      h                      ;                     r                     3                     }                     Ï                      H                     v                     ®                                          y                      _                     f                     3                     [                     ∞                     p                     ´                     C                     ‹                                          \                     Ò                                          J                                          Ñ                     ;                     M                     T                     ∑                     F                      $                     £                     ä                      a                                                                                    „                                            4                     ç                     å                     ’                     Ç                     ø                     R                                             ,                       ‡                     X                     ú    @p            ˘  "                   Û    Pp                `p             _ITM_deregisterTMCloneTable __gmon_start__ _ITM_registerTMCloneTable mysql_error mysql_stmt_bind_param mysql_stmt_close mysql_stmt_errno mysql_stmt_attr_set mysql_stmt_prepare mysql_stmt_error mysql_change_user mysql_stmt_store_result mysql_options mysql_sqlstate mysql_stmt_execute mysql_stmt_bind_result mysql_stmt_free_result mysql_stmt_reset mysql_stmt_next_result mysql_stmt_init mysql_init mysql_close mysql_stmt_sqlstate mysql_real_connect mysql_stmt_num_rows mysql_errno mysql_stmt_fetch getline __cxa_finalize fgets strchr fileno malloc strcspn longjmp regcomp __libc_start_main strcmp fprintf atof atoi tcgetattr fopen fclose strcpy getchar strtok_r memset stdout puts regfree fflush tolower toupper strstr strlen strdup getenv realloc sprintf stdin regerror tcsetattr snprintf stderr regexec setenv strerror strcat putchar exit __isoc99_sscanf fwrite __stack_chk_fail libmariadb.so.3 libc.so.6 libmysqlclient_18 GLIBC_2.3.4 GLIBC_2.4 GLIBC_2.7 GLIBC_2.34 GLIBC_2.2.5                                                                                    p         8Ss   ä        Ä         ti	   ú     ii   ®     ii   ≤     ¥ëñ   º     ui	   «      êk            †)      òk            `)      p            p     p             ¸      p            
¸     (p            ¸     0p            ¸     ÿo        J           ‡o                   Ëo        =           o        E           ¯o        F           @p        I           Pp        K           `p        L           ∏m                   ¿m                   »m                   –m                   ÿm                   ‡m                   Ëm                   m                   ¯m        	            n        
           n                   n                   n                    n                   (n                   0n                   8n                   @n                   Hn                   Pn                   Xn                   `n                   hn                   pn                   xn                   Än                   àn                   ên                   òn                   †n                   ®n                    ∞n        !           ∏n        "           ¿n        #           »n        $           –n        %           ÿn        &           ‡n        '           Ën        (           n        )           ¯n        *            o        +           o        ,           o        -           o        .            o        /           (o        0           0o        1           8o        2           @o        3           Ho        4           Po        5           Xo        6           `o        7           ho        8           po        9           xo        :           Äo        ;           ào        <           êo        >           òo        ?           †o        @           ®o        A           ∞o        B           ∏o        C           ¿o        D           »o        G           –o        H                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Û˙HÉÏHã·O HÖ¿tˇ–HÉƒ√     ˇ5ÇM Úˇ%ÉM  Û˙h    ÚÈ·ˇˇˇêÛ˙h   ÚÈ—ˇˇˇêÛ˙h   ÚÈ¡ˇˇˇêÛ˙h   ÚÈ±ˇˇˇêÛ˙h   ÚÈ°ˇˇˇêÛ˙h   ÚÈëˇˇˇêÛ˙h   ÚÈÅˇˇˇêÛ˙h   ÚÈqˇˇˇêÛ˙h   ÚÈaˇˇˇêÛ˙h	   ÚÈQˇˇˇêÛ˙h
   ÚÈAˇˇˇêÛ˙h   ÚÈ1ˇˇˇêÛ˙h   ÚÈ!ˇˇˇêÛ˙h   ÚÈˇˇˇêÛ˙h   ÚÈˇˇˇêÛ˙h   ÚÈÒ˛ˇˇêÛ˙h   ÚÈ·˛ˇˇêÛ˙h   ÚÈ—˛ˇˇêÛ˙h   ÚÈ¡˛ˇˇêÛ˙h   ÚÈ±˛ˇˇêÛ˙h   ÚÈ°˛ˇˇêÛ˙h   ÚÈë˛ˇˇêÛ˙h   ÚÈÅ˛ˇˇêÛ˙h   ÚÈq˛ˇˇêÛ˙h   ÚÈa˛ˇˇêÛ˙h   ÚÈQ˛ˇˇêÛ˙h   ÚÈA˛ˇˇêÛ˙h   ÚÈ1˛ˇˇêÛ˙h   ÚÈ!˛ˇˇêÛ˙h   ÚÈ˛ˇˇêÛ˙h   ÚÈ˛ˇˇêÛ˙h   ÚÈÒ˝ˇˇêÛ˙h    ÚÈ·˝ˇˇêÛ˙h!   ÚÈ—˝ˇˇêÛ˙h"   ÚÈ¡˝ˇˇêÛ˙h#   ÚÈ±˝ˇˇêÛ˙h$   ÚÈ°˝ˇˇêÛ˙h%   ÚÈë˝ˇˇêÛ˙h&   ÚÈÅ˝ˇˇêÛ˙h'   ÚÈq˝ˇˇêÛ˙h(   ÚÈa˝ˇˇêÛ˙h)   ÚÈQ˝ˇˇêÛ˙h*   ÚÈA˝ˇˇêÛ˙h+   ÚÈ1˝ˇˇêÛ˙h,   ÚÈ!˝ˇˇêÛ˙h-   ÚÈ˝ˇˇêÛ˙h.   ÚÈ˝ˇˇêÛ˙h/   ÚÈÒ¸ˇˇêÛ˙h0   ÚÈ·¸ˇˇêÛ˙h1   ÚÈ—¸ˇˇêÛ˙h2   ÚÈ¡¸ˇˇêÛ˙h3   ÚÈ±¸ˇˇêÛ˙h4   ÚÈ°¸ˇˇêÛ˙h5   ÚÈë¸ˇˇêÛ˙h6   ÚÈÅ¸ˇˇêÛ˙h7   ÚÈq¸ˇˇêÛ˙h8   ÚÈa¸ˇˇêÛ˙h9   ÚÈQ¸ˇˇêÛ˙h:   ÚÈA¸ˇˇêÛ˙h;   ÚÈ1¸ˇˇêÛ˙h<   ÚÈ!¸ˇˇêÛ˙h=   ÚÈ¸ˇˇêÛ˙h>   ÚÈ¸ˇˇêÛ˙h?   ÚÈÒ˚ˇˇêÛ˙h@   ÚÈ·˚ˇˇêÛ˙hA   ÚÈ—˚ˇˇêÛ˙hB   ÚÈ¡˚ˇˇêÛ˙hC   ÚÈ±˚ˇˇêÛ˙Úˇ%]K D  Û˙Úˇ%-I D  Û˙Úˇ%%I D  Û˙Úˇ%I D  Û˙Úˇ%I D  Û˙Úˇ%I D  Û˙Úˇ%I D  Û˙Úˇ%˝H D  Û˙Úˇ%ıH D  Û˙Úˇ%ÌH D  Û˙Úˇ%ÂH D  Û˙Úˇ%›H D  Û˙Úˇ%’H D  Û˙Úˇ%ÕH D  Û˙Úˇ%≈H D  Û˙Úˇ%ΩH D  Û˙Úˇ%µH D  Û˙Úˇ%≠H D  Û˙Úˇ%•H D  Û˙Úˇ%ùH D  Û˙Úˇ%ïH D  Û˙Úˇ%çH D  Û˙Úˇ%ÖH D  Û˙Úˇ%}H D  Û˙Úˇ%uH D  Û˙Úˇ%mH D  Û˙Úˇ%eH D  Û˙Úˇ%]H D  Û˙Úˇ%UH D  Û˙Úˇ%MH D  Û˙Úˇ%EH D  Û˙Úˇ%=H D  Û˙Úˇ%5H D  Û˙Úˇ%-H D  Û˙Úˇ%%H D  Û˙Úˇ%H D  Û˙Úˇ%H D  Û˙Úˇ%H D  Û˙Úˇ%H D  Û˙Úˇ%˝G D  Û˙Úˇ%ıG D  Û˙Úˇ%ÌG D  Û˙Úˇ%ÂG D  Û˙Úˇ%›G D  Û˙Úˇ%’G D  Û˙Úˇ%ÕG D  Û˙Úˇ%≈G D  Û˙Úˇ%ΩG D  Û˙Úˇ%µG D  Û˙Úˇ%≠G D  Û˙Úˇ%•G D  Û˙Úˇ%ùG D  Û˙Úˇ%ïG D  Û˙Úˇ%çG D  Û˙Úˇ%ÖG D  Û˙Úˇ%}G D  Û˙Úˇ%uG D  Û˙Úˇ%mG D  Û˙Úˇ%eG D  Û˙Úˇ%]G D  Û˙Úˇ%UG D  Û˙Úˇ%MG D  Û˙Úˇ%EG D  Û˙Úˇ%=G D  Û˙Úˇ%5G D  Û˙Úˇ%-G D  Û˙Úˇ%%G D  Û˙Úˇ%G D  Û˙Úˇ%G D  Û˙1ÌIâ—^Hâ‚HÉ‰PTE1¿1…Hç=/9  ˇ˚F Ùf.Ñ     Hç=AG Hç:G H9¯tHãﬁF HÖ¿t	ˇ‡Ä    √Ä    Hç=G Hç5
G H)˛HâH¡Ó?H¡¯H∆H—˛tHã≠F HÖ¿tˇ‡fD  √Ä    Û˙Ä=˝F  u+UHÉ=bF  HâÂtHã=ÜF ËÈ˙ˇˇËdˇˇˇ∆’F ]√ √Ä    Û˙ÈwˇˇˇÛ˙UHâÂøÑ   ËÖ˝ˇˇHâÆF HãßF HÖ¿uHç3Ü Hâ«Ë„˝ˇˇ∏ˇˇˇˇÎ ]√Û˙UHâÂHÉÏdHã%(   HâE¯1¿«EÛ1234∆E˜5HçÜ Hâ«Ë•˝ˇˇHç0Ü Hâ«Ëñ˝ˇˇHç?Ü Hâ«Ëá˝ˇˇHçXÜ Hâ«Ëx˝ˇˇHçyÜ Hâ«Ëi˝ˇˇHç¢Ü Hâ«ËZ˝ˇˇHç‰Ü Hâ«ËK˝ˇˇHçÏÜ Hâ«Ë<˝ˇˇHçá Hâ«Ë-˝ˇˇHçEÛ∫   Hâ∆Hç˝Ü Hâ«Ë&g àEÚæEÚÉË1HãU¯dH+%(   tËî˚ˇˇ…√Û˙UHâÂHÉÏâ}¸É}¸weãE¸HçÖ    HçøÜ ãHòHç≥Ü H–>ˇ‡Ëçt  ∏   Î:Ë˝t  ∏   Î.Ëzu  ∏   Î"Hã>E Hâ«Ëçv  ∏   Î∏    Î∏   …√Û˙UHâÂHÉÏHãE HÖ¿uË=˛ˇˇËu˛ˇˇàEˇæEˇâ«ËOˇˇˇÉÑ¿uÎ‰êê…√Û˙UHâÂHÉÏdHã%(   HâE¯1¿«EÛ1234∆E˜5HçÜ Hâ«Ëˇ˚ˇˇHç"Ü Hâ«Ë˚ˇˇHç1Ü Hâ«Ë·˚ˇˇHçJÜ Hâ«Ë“˚ˇˇHçkÜ Hâ«Ë√˚ˇˇHçúÜ Hâ«Ë¥˚ˇˇHçΩÜ Hâ«Ë•˚ˇˇHçﬁÜ Hâ«Ëñ˚ˇˇHç¸Ü Hâ«Ëá˚ˇˇHçEÛ∫   Hâ∆HçÍÜ Hâ«ËÄe àEÚæEÚÉË1HãU¯dH+%(   tËÓ˘ˇˇ…√Û˙UHâÂHÉÏâ}¸É}¸w[ãE¸HçÖ    Hç±Ü ãHòHç•Ü H–>ˇ‡Ë:q  ∏   Î0ËMq  ∏   Î$Ë q  ∏   ÎËGr  ∏   Î∏    Î∏   …√Û˙UHâÂHÉÏËê˛ˇˇàEˇæEˇâ«ËjˇˇˇÉÑ¿uÎ‰êê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë„W  É¯ˇt4A∏    π    ∫n   æs   HçÜ Hâ«Ë›b Ñ¿tHãE¯Hâ«Ëê ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë≤Y  É¯ˇt4A∏    π    ∫n   æs   Hç‹Ö Hâ«ËÖb Ñ¿tHãE¯Hâ«ËK ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«ËJZ  É¯ˇt4A∏    π    ∫n   æs   Hç¨Ö Hâ«Ë-b Ñ¿tHãE¯Hâ«Ë> ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë≥Z  É¯ˇt4A∏    π    ∫n   æs   Hç|Ö Hâ«Ë’a Ñ¿tHãE¯Hâ«ËÊ ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«ËZ[  É¯ˇt4A∏    π    ∫n   æs   HçLÖ Hâ«Ë}a Ñ¿tHãE¯Hâ«Ëﬂ ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë&U  É¯ˇt4A∏    π    ∫n   æs   HçÖ Hâ«Ë%a Ñ¿tHãE¯Hâ«ËI ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«ËW  É¯ˇt4A∏    π    ∫n   æs   HçÙÑ Hâ«ËÕ` Ñ¿tHãE¯Hâ«Ë" ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë[  É¯ˇt4A∏    π    ∫n   æs   HçƒÑ Hâ«Ëu` Ñ¿tHãE¯Hâ«Ë‰ ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«ËÀ[  É¯ˇt4A∏    π    ∫n   æs   HçúÑ Hâ«Ë` Ñ¿tHãE¯Hâ«Ëû ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë-\  É¯ˇt4A∏    π    ∫n   æs   HçtÑ Hâ«Ë≈_ Ñ¿tHãE¯Hâ«Ëó ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë~\  É¯ˇt4A∏    π    ∫n   æs   HçLÑ Hâ«Ëm_ Ñ¿tHãE¯Hâ«Ë^ ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë]  É¯ˇt4A∏    π    ∫n   æs   Hç,Ñ Hâ«Ë_ Ñ¿tHãE¯Hâ«Ë6 ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë√]  É¯ˇt4A∏    π    ∫n   æs   HçÑ Hâ«ËΩ^ Ñ¿tHãE¯Hâ«Ë ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«ËQ`  É¯ˇt4A∏    π    ∫n   æs   Hç‹É Hâ«Ëe^ Ñ¿tHãE¯Hâ«Ë
 ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ëç`  É¯ˇt4A∏    π    ∫n   æs   Hç¨É Hâ«Ë^ Ñ¿tHãE¯Hâ«Ëﬂ ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë6a  É¯ˇt4A∏    π    ∫n   æs   HçÑÉ Hâ«Ëµ] Ñ¿tHãE¯Hâ«Ëÿ ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ëäa  É¯ˇt4A∏    π    ∫n   æs   HçTÉ Hâ«Ë]] Ñ¿tHãE¯Hâ«Ë ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë˙a  É¯ˇt4A∏    π    ∫n   æs   Hç$É Hâ«Ë] Ñ¿tHãE¯Hâ«Ë¿ ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë=h  É¯ˇt4A∏    π    ∫n   æs   HçÙÇ Hâ«Ë≠\ Ñ¿tHãE¯Hâ«Ë∆ ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë6g  É¯ˇt4A∏    π    ∫n   æs   HçƒÇ Hâ«ËU\ Ñ¿tHãE¯Hâ«ËÄ ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë–e  É¯ˇt4A∏    π    ∫n   æs   HçîÇ Hâ«Ë˝[ Ñ¿tHãE¯Hâ«ËX ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ëåd  É¯ˇt4A∏    π    ∫n   æs   HçdÇ Hâ«Ë•[ Ñ¿tHãE¯Hâ«Ë^ ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ëlc  É¯ˇt4A∏    π    ∫n   æs   Hç4Ç Hâ«ËM[ Ñ¿tHãE¯Hâ«Ëd ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«ËLb  É¯ˇt4A∏    π    ∫n   æs   HçÇ Hâ«ËıZ Ñ¿tHãE¯Hâ«Ëj ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë,a  É¯ˇt4A∏    π    ∫n   æs   Hç‘Å Hâ«ËùZ Ñ¿tHãE¯Hâ«Ëå ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë g  É¯ˇt4A∏    π    ∫n   æs   Hç§Å Hâ«ËEZ Ñ¿tHãE¯Hâ«ËS ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«Ë‚Z  É¯ˇt4A∏    π    ∫n   æs   Hç|Å Hâ«ËÌY Ñ¿tHãE¯Hâ«ËJ ê…√Û˙UHâÂHÉÏHâ}¯HãE¯Hâ«ËûY  É¯ˇt4A∏    π    ∫n   æs   HçlÅ Hâ«ËïY Ñ¿tHãE¯Hâ«Ë¬ ê…√Û˙UHâÂø  ËwˇˇHâ®9 Hã°9 HÖ¿uHçeÅ Hâ«Ë’ˇˇ∏ˇˇˇˇÈ  ø\   ËAˇˇHâz9 Hãs9 HÖ¿uHç_Å Hâ«Ëüˇˇ∏ˇˇˇˇÈœ   øh   ËˇˇHâL9 HãE9 HÖ¿uHçYÅ Hâ«Ëiˇˇ∏ˇˇˇˇÈô   øƒ   Ë’ÔˇˇHâ9 Hã9 HÖ¿uHçSÅ Hâ«Ë3ˇˇ∏ˇˇˇˇÎfø,   Ë¢ÔˇˇHâÛ8 HãÏ8 HÖ¿uHçPÅ Hâ«Ë ˇˇ∏ˇˇˇˇÎ3ø<   ËoÔˇˇHâ»8 Hã¡8 HÖ¿uHçEÅ Hâ«ËÕÔˇˇ∏ˇˇˇˇÎ ]√Û˙UHâÂHÉÏdHã%(   HâE¯1¿«EÒ1234f«Eı5 ∆E˜ Hç)Å Hâ«ËâÔˇˇHç<Å Hâ«ËzÔˇˇHçKÅ Hâ«ËkÔˇˇHçdÅ Hâ«Ë\ÔˇˇHçÇÅ Hâ«ËMÔˇˇHçéÅ Hâ«Ë>ÔˇˇHçüÅ Hâ«Ë/ÔˇˇHç∏Å Hâ«Ë ÔˇˇHçÿÅ Hâ«ËÔˇˇHçEÒ∫   Hâ∆Hç≈Å Hâ«Ë
Y àEæEÉË1HãU¯dH+%(   tËxÌˇˇ…√Û˙UHâÂHÉÏâ¯àE¸æE¸É¯áù   â¿HçÖ    HçÉÅ ãHòHçwÅ H–>ˇ‡HãN7 Hâ«Ë◊J  ∏   ÎiHãX7 Hã)7 Hâ÷Hâ«Ë·  ∏   ÎIHã7 Hâ«Ëª  ∏   Î3Hã7 Hã7 HãÙ6 HâŒHâ«Ë]#  ∏   Î∏    Î∏   …√Û˙UHâÂHÉÏHãπ6 HÖ¿t0Hãµ6 HÖ¿t$Hã±6 HÖ¿tHã≠6 HÖ¿tHã©6 HÖ¿uËæ¸ˇˇHç∞Ä Hâ«Ë∏ÌˇˇËÔ˝ˇˇàEˇæEˇâ«Ëœ˛ˇˇÉÑ¿uÎ‰êê…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿HçÇÄ Hâ«ËjÌˇˇHãE∏π    Hâ¬æ-   HçÖÄ Hâ«Ë<S HãE∏HÉ¿-π    Hâ¬æ-   HçuÄ Hâ«ËS HçÄ Hâ«ËÌˇˇHçE¿π    Hâ¬æ-   Hç¨Ä Hâ«ËÈR HçE¿Hâ«ËÌˇˇHãU∏âB8HãE∏ã@8É¯HãE∏ã@8Ö¿HãE∏ãP8HãE∏â÷Hâ«Ëf  HãE∏Hâ«Ëi¿  êHãE¯dH+%(   tË7Îˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç7Ä Hâ«ËgÏˇˇHãE∏HÉ¿π    Hâ¬æ-   HçCÄ Hâ«Ë5R HçE¿π    Hâ¬æ-   HçsÄ Hâ«ËR HçE¿Hâ«Ë7ÏˇˇHãU∏âBHçE¿π    Hâ¬æ-   HçpÄ Hâ«Ë‚Q HçE¿Hâ«ËÏˇˇHãU∏âBHãE∏Hâ«Ëø°  êHãE¯dH+%(   tË\Íˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿HçLÄ Hâ«ËåÎˇˇHçE¿π    Hâ¬æ-   HçTÄ Hâ«Ë^Q HçE¿Hâ«ËÄÎˇˇHãU∏âBHçE¿π    Hâ¬æ-   HçIÄ Hâ«Ë+Q HçE¿Hâ«ËMÎˇˇHãU∏âHçE¿π    Hâ¬æ-   Hç6Ä Hâ«Ë˘P HçE¿Hâ«ËÎˇˇHãU∏âBHãE∏HÉ¿π    Hâ¬æ-   HçÄ Hâ«Ë¬P HãE∏HÉ¿9π    Hâ¬æ-   HçÄ Hâ«ËûP HãE∏Hâ«Ëù°  êHãE¯dH+%(   tË+Èˇˇ…√Û˙UHâÂHÉÏpHâ}®Hâu†HâUòdHã%(   HâE¯1¿Hç√ Hâ«ËSÍˇˇHãE®HÉ¿π    Hâ¬æ-   Hç« Hâ«Ë!P HãE®HÉ¿1π    Hâ¬æ-   Hç” Hâ«Ë˝O HãE®HÉ¿xπ    Hâ¬æà  HçÔ Hâ«ËŸO HçE¿π    Hâ¬æ-   HçÄ Hâ«ËπO HçE¿Hâ«Ë€ÈˇˇHãU®âBtHãE®H   π    Hâ¬æà  Hç>Ä Hâ«ËÄO HãE®HÉ¿^π    Hâ¬æ   HçbÄ Hâ«Ë\O HãE®HÉ¿^Hâ«Ë‘X Ñ¿tÎ%HãÌ1 Hâ¡∫   æ   HçSÄ Hâ«Ë!ÍˇˇÎ°HãE®HÉ¿iπ    Hâ¬æ   Hç;Ä Hâ«Ë˝N HãE®HÉ¿iHâ«ËuX Ñ¿u%Hãê1 Hâ¡∫   æ   Hçˆ Hâ«ËƒÈˇˇÎ£êA∏    π    ∫n   æs   HçÄ Hâ«Ë&Q àEøÄ}ø tlHãE†HÉ¿π    Hâ¬æ-   Hç Ä Hâ«ËrN HçE¿π    Hâ¬æ-   Hç0Ä Hâ«ËRN HçE¿Hâ«ËtËˇˇHãU†âB4HãU†HãE®Hâ÷Hâ«ËT ÎHãE®Hâ«Ë;¢  êHãE¯dH+%(   tË∑Êˇˇ…√Û˙UHâÂHÉÏHâ}¯Hçˆ Hâ«ËˆÁˇˇHãE¯π    Hâ¬æ-   Hç{ Hâ«Ë»M HãE¯HÉ¿-π    Hâ¬æ-   HçÙ| Hâ«Ë§M HãE¯HÉ¿Zπ    Hâ¬æ-   Hç‰| Hâ«ËÄM HãE¯Há   π    Hâ¬æ-   Hçç Hâ«ËZM HãE¯H¥   π    Hâ¬æ-   Hç Hâ«Ë4M HãE¯HÏ   π    Hâ¬æ-   Hç| Hâ«ËM HãE¯H¸   π    Hâ¬æ-   Hçy Hâ«ËËL HãE¯H·   π    Hâ¬æ   Hçp Hâ«Ë¬L HãE¯H·   Hâ«Ë8V Ñ¿u%HãS/ Hâ¡∫   æ   Hçπ} Hâ«ËáÁˇˇÎüêHãE¯Hâ«Ëö  ê…√Û˙UHâÂHÉÏPHâ}∏Hâu∞dHã%(   HâE¯1¿Hç3 Hâ«ËSÊˇˇHãE∏π    Hâ¬æ-   Hçny Hâ«Ë%L HãE∞HÉ¿-π    Hâ¬æ-   Hç^y Hâ«ËL Hç ~ Hâ«Ë ÊˇˇHãE∏HÉ¿-π    Hâ¬æ-   Hç{ Hâ«ËŒK HãE∏HÉ¿Zπ    Hâ¬æ-   Hç{ Hâ«Ë™K HãE∏Há   π    Hâ¬æ-   Hç∑} Hâ«ËÑK HãE∏H¥   π    Hâ¬æ-   Hç©} Hâ«Ë^K HãE∏HÏ   π    Hâ¬æ-   Hç¶} Hâ«Ë8K HãE∏H¸   π    Hâ¬æ-   Hç£} Hâ«ËK HãE∏H·   π    Hâ¬æ   Hçö} Hâ«ËÏJ HãE∏H·   Hâ«ËbT Ñ¿u%Hã}- Hâ¡∫   æ   Hç„{ Hâ«Ë±ÂˇˇÎüêHãU∏HãE∞Hâ÷Hâ«Ë∂µ  êHãE¯dH+%(   tË6„ˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hçn} Hâ«Ëf‰ˇˇHãE∏π    Hâ¬æ-   Hçt} Hâ«Ë8J HçE¿π    Hâ¬æ-   Hçj} Hâ«ËJ HçE¿Hâ«ËZ„ˇˇÚZ¿HãE∏Û@0HçE¿π    Hâ¬æ-   HçU} Hâ«ËﬂI HçE¿Hâ«Ë‰ˇˇHãU∏âB4HãE∏HÉ¿8π    Hâ¬æà  HçN} Hâ«Ë®I HçE¿π    Hâ¬æ-   Hçc} Hâ«ËàI HçE¿Hâ«Ë™„ˇˇHãU∏âÇ¿  HçE¿π    Hâ¬æ-   HçP} Hâ«ËRI HçE¿Hâ«Ët„ˇˇHãU∏âÇƒ  HãE∏Hâ«ËŒø  êHãE¯dH+%(   tË…·ˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç} Hâ«Ë˘‚ˇˇHãE∏π    Hâ¬æ-   Hç} Hâ«ËÀH HãE∏HÉ¿
π    Hâ¬æ-   Hç} Hâ«ËßH HãE∏HÉ¿Bπ    Hâ¬æ-   Hç} Hâ«ËÉH HçE¿π    Hâ¬æ-   Hç¸| Hâ«ËcH HçE¿Hâ«ËÖ‚ˇˇHãU∏âBpHçE¿π    Hâ¬æ-   HçÊ| Hâ«Ë0H HçE¿Hâ«ËR‚ˇˇHãU∏âBtHãE∏HÉ¿7π    Hâ¬æ   HçÁ| Hâ«Ë˘G HãE∏HÉ¿7Hâ«ËqQ Ñ¿tÎ%Hãä* Hâ¡∫   æ   Hçx Hâ«Ëæ‚ˇˇÎ°HãE∏HÉ¿xπ    Hâ¬æ   Hçÿ| Hâ«ËöG HãE∏HÉ¿xHâ«ËQ Ñ¿u%Hã-* Hâ¡∫   æ   Hçìx Hâ«Ëa‚ˇˇÎ£êHãE∏Hâ«ËÌª  êHãE¯dH+%(   tËÌﬂˇˇ…√Û˙UHâÂHÉÏHâ}¯Hçî| Hâ«Ë,·ˇˇHãE¯π    Hâ¬æ-   Hçú| Hâ«Ë˛F HãE¯Hâ«Ë¡  ê…√Û˙UHâÂHÉÏPHâ}∏Hâu∞dHã%(   HâE¯1¿Hçã| Hâ«ËÀ‡ˇˇHãE∏π    Hâ¬æ-   Hçê| Hâ«ËùF HãE∏Hµ  π    Hâ¬æ-   HçÖ| Hâ«ËwF HãE∏HÉ¿-π    Hâ¬æà  Hçâ| Hâ«ËSF HçE¿π    Hâ¬æ-   Hç°| Hâ«Ë3F HçE¿Hâ«ËU‡ˇˇHãU∏âÇ‰  Hçú| Hâ«Ë‡ˇˇHãE∞π    Hâ¬æ-   Hç¨| Hâ«ËÓE HãE∞HÉ¿Zπ    Hâ¬æ-   Hç∏| Hâ«Ë E HãU∞HãE∏Hâ÷Hâ«Ë7∏  Î#HãE∏HãU∞HÉ¬-Hâ∆Hâ◊Ë‹›ˇˇHãE∞Hâ«ËU˛ˇˇA∏    π    ∫n   æs   Hçå| Hâ«ËıG Ñ¿uµêHãE¯dH+%(   tËﬁˇˇ…√Û˙UHâÂHÉÏHâ}¯HçÇ| Hâ«ËBﬂˇˇHãE¯HÉ¿π    Hâ¬æ-   HçÜ| Hâ«ËE HãE¯HÉ¿1π    Hâ¬æà  Hçä| Hâ«ËÏD HãE¯Hâ«ËΩ  ê…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hçâ| Hâ«ËΩﬁˇˇHçE¿π    Hâ¬æ-   HçÖ| Hâ«ËèD HçE¿Hâ«Ë±ﬁˇˇHãU∏âBHçE¿π    Hâ¬æ-   Hçz| Hâ«Ë\D HçE¿Hâ«Ë~ﬁˇˇHãU∏âBHçE¿π    Hâ¬æ-   Hç| Hâ«Ë)D HçE¿Hâ«ËKﬁˇˇHãU∏âBHçE¿π    Hâ¬æ-   HçÑ| Hâ«ËˆC HçE¿Hâ«ËﬁˇˇHãU∏âBHãE∏HÉ¿π    Hâ¬æ   HçÖ| Hâ«ËøC HãE∏HÉ¿Hâ«Ë7M Ñ¿tÎ%HãP& Hâ¡∫   æ   Hç∂t Hâ«ËÑﬁˇˇÎ°HãE∏HÉ¿π    Hâ¬æ   Hç^| Hâ«Ë`C HãE∏HÉ¿Hâ«ËÿL Ñ¿u%HãÛ% Hâ¡∫   æ   HçYt Hâ«Ë'ﬁˇˇÎ£êHãE∏Hâ«Ëáï  êHãE¯dH+%(   tË≥€ˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç| Hâ«Ë„‹ˇˇHçE¿π    Hâ¬æ-   Hç| Hâ«ËµB HçE¿Hâ«Ë◊‹ˇˇHãU∏âHãE∏HÉ¿π    Hâ¬æ-   Hç-t Hâ«ËB HçE¿π    Hâ¬æ-   Hç=t Hâ«Ë_B HçE¿Hâ«ËÅ‹ˇˇHãU∏âB4HãE∏Hâ«Ë≠ô  êHãE¯dH+%(   tËŸ⁄ˇˇ…√Û˙UHâÂHÉÏ`Hâ}®dHã%(   HâE¯1¿Hçë{ Hâ«Ë	‹ˇˇHãE®π    Hâ¬æ-   Hçí{ Hâ«Ë€A HãE®HÉ¿-π    Hâ¬æà  Hçç{ Hâ«Ë∑A HçE¿π    Hâ¬æ-   Hç•{ Hâ«ËóA HçE¿Hâ«Ëπ€ˇˇHãU®âÇ∏  HçE∂π    Hâ¬æ
   Hçü{ Hâ«ËaA HçE∂Hâ«Ë£⁄ˇˇÚZ¿HãE®ÛÄº  HçE∂π    Hâ¬æ
   Hçã{ Hâ«Ë%A HçE∂Hâ«Ëg⁄ˇˇÚZ¿HãE®ÛÄ¿  HçE∂π    Hâ¬æ
   Hçw{ Hâ«ËÈ@ HçE∂Hâ«Ë+⁄ˇˇÚZ¿HãE®ÛÄƒ  HçE¥π    Hâ¬æ   Hçs{ Hâ«Ë≠@ HçE¥Hâ«Ë°J Ñ¿u%HãD# Hâ¡∫'   æ   HçÄ{ Hâ«Ëx€ˇˇÎ´êHçE¥Hâ«Ëô⁄ˇˇâ¬HãE®àê»  HãE®Hâ«Ë/õ  êHãE¯dH+%(   tËÏÿˇˇ…√Û˙UHâÂHÉÏ`Hâ}®dHã%(   HâE¯1¿Hç<{ Hâ«Ë⁄ˇˇHãE®HÉ¿π    Hâ¬æ-   Hç@{ Hâ«ËÍ? HãE®HÉ¿1π    Hâ¬æ-   HçD{ Hâ«Ë∆? HãE®HÉ¿^π    Hâ¬æ-   HçP{ Hâ«Ë¢? HãE®Hã   π    Hâ¬æ-   Hçb{ Hâ«Ë|? HãE®Hï   π    Hâ¬æ   Hçl{ Hâ«ËV? HãE®Hï   Hâ«ËÃH Ñ¿tÎ%HãÂ! Hâ¡∫   æ   Hç^{ Hâ«Ë⁄ˇˇÎùHãE®H†   π    Hâ¬æ   HçI{ Hâ«ËÛ> HãE®H†   Hâ«ËiH Ñ¿u%HãÑ! Hâ¡∫   æ   Hç˝z Hâ«Ë∏ŸˇˇÎüêHçE∂π    Hâ¬æ
   Hç{ Hâ«Ëó> HçE∂Hâ«ËŸ◊ˇˇÚZ¿HãE®ÛÄ¨   HçE¿π    Hâ¬æ-   Hç˘z Hâ«Ë[> HçE¿Hâ«Ë}ÿˇˇHãU®âÇ∞   HçE¿π    Hâ¬æ-   Hç˚z Hâ«Ë%> HçE¿Hâ«ËGÿˇˇHãU®âÇ¥   HãE®Hâ«Ëúù  êHãE¯dH+%(   tËú÷ˇˇ…√Û˙UHâÂHÉÏHâ}¯HçÀz Hâ«Ë€◊ˇˇHãE¯H  π    Hâ¬æ-   HçÕz Hâ«Ëß= HãE¯H8  π    Hâ¬æ-   Hçœz Hâ«ËÅ= HãE¯HÉ¿π    Hâ¬æ-   Hç≠l Hâ«Ë]= HãE¯HÉ¿1π    Hâ¬æ-   HçØz Hâ«Ë9= HãE¯HÉ¿^π    Hâ¬æ-   Hç´z Hâ«Ë= HãE¯HÉ¿nπ    Hâ¬æ-   HçÇo Hâ«ËÒ< HãE¯HÉ¿~π    Hâ¬æ-   Hç o Hâ«ËÕ< HãE¯H´   π    Hâ¬æ-   Hçez Hâ«Ëß< HãE¯H´   Hçwz Hâ÷Hâ«ËI÷ˇˇÖ¿u(HãE¯Hÿ   π    Hâ¬æ-   HçWz Hâ«Ëa< Î?HãE¯H  π    Hâ¬æ   HçWz Hâ«Ë9< HãE¯H  Hâ«Ë◊E Ñ¿uÎ¬êHãE¯Hâ«Ëøò  ê…√Û˙UHâÂHÉÏ`Hâ}®dHã%(   HâE¯1¿Hç9z Hâ«ËÒ’ˇˇHçE¿π    Hâ¬æ-   HçAz Hâ«Ë√; HçE¿Hâ«ËÂ’ˇˇHãU®âBHçE¿π    Hâ¬æ-   Hç6z Hâ«Ëê; HçE¿Hâ«Ë≤’ˇˇHãU®âBHãE®HÉ¿π    Hâ¬æ   Hç'z Hâ«ËY; HãE®HÉ¿Hâ«Ë—D Ñ¿tÎ%HãÍ Hâ¡∫   æ   Hç"z Hâ«Ë÷ˇˇÎ°HãE®HÉ¿π    Hâ¬æ   Hçz Hâ«Ë˙: HãE®HÉ¿Hâ«ËrD Ñ¿tÎ%Hãã Hâ¡∫   æ   Hç√y Hâ«Ëø’ˇˇÎ°HãE®HÉ¿"π    Hâ¬æ   HçÈy Hâ«Ëõ: HãE®HÉ¿"Hâ«Ë;D Ñ¿tÎ%Hã, Hâ¡∫   æ   Hç‡y Hâ«Ë`’ˇˇÎ°HãE®HÉ¿(π    Hâ¬æ   Hç y Hâ«Ë<: HãE®HÉ¿(Hâ«Ë‹C Ñ¿u%Hãœ Hâ¡∫   æ   HçÉy Hâ«Ë’ˇˇÎ£êHçE¥π    Hâ¬æ   Hç®y Hâ«Ë‚9 HçE¥Hâ«Ë‘ˇˇâ¬HãE®àP.HçE∂π    Hâ¬æ
   Hç≥y Hâ«Ë≠9 HçE∂Hâ«ËÔ“ˇˇÚZ¿HãE®Û@0HãE®HÉ¿4π    Hâ¬æà  HçÆy Hâ«Ëp9 HãE®Hâ«ËÉõ  êHãE¯dH+%(   tË˝—ˇˇ…√Û˙UHâÂHÉÏ`Hâ}®dHã%(   HâE¯1¿HçΩy Hâ«Ë-”ˇˇHçE¿π    Hâ¬æ-   HçÕy Hâ«Ëˇ8 HçE¿Hâ«Ë!”ˇˇHãU®âHçE¿π    Hâ¬æ-   Hç√y Hâ«ËÕ8 HçE¿Hâ«ËÔ“ˇˇHãU®âBHãE®HÉ¿π    Hâ¬æ-   HçYf Hâ«Ëñ8 HçE∂π    Hâ¬æ
   Hç¨y Hâ«Ëv8 HçE∂Hâ«Ë∏—ˇˇÚZ¿HãE®Û@8HãE®Hâ«Ë„ú  êHãE¯dH+%(   tËÍ–ˇˇ…√Û˙UHâÂHÉÏHâ}¯HçÅy Hâ«Ë)“ˇˇHãE¯π    Hâ¬æ-   HçKg Hâ«Ë˚7 HãE¯HÉ¿-π    Hâ¬æ-   Hçey Hâ«Ë◊7 HãE¯HÉ¿Zπ    Hâ¬æ-   Hçiy Hâ«Ë≥7 HãE¯Hâ«Ënù  ê…√Û˙UHâÂHÉÏHâ}¯Hç[y Hâ«Ëì—ˇˇHãE¯HÉ¿π    Hâ¬æ-   Hç_y Hâ«Ëa7 HãE¯H∏   π    Hâ¬æ-   Hçyy Hâ«Ë;7 HãE¯HÉ¿1π    Hâ¬æ-   Hç•y Hâ«Ë7 HãE¯HÉ¿^π    Hâ¬æ-   Hç©y Hâ«ËÛ6 HãE¯Hã   π    Hâ¬æ-   Hç√y Hâ«ËÕ6 HãE¯Hâ«Ë±ù  ê…√Û˙UHâÂHÉÏHâ}¯Hçµy Hâ«Ë≠–ˇˇHãE¯HÉ¿1π    Hâ¬æà  Hç∏y Hâ«Ë{6 HãE¯HÉ¿π    Hâ¬æ-   Hç∞y Hâ«ËW6 HãE¯Hâ«Ë.•  ê…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hçêy Hâ«Ë(–ˇˇHçE¿π    Hâ¬æ-   Hçòy Hâ«Ë˙5 HçE¿Hâ«Ë–ˇˇHãU∏âHçE¿π    Hâ¬æ-   Hçéy Hâ«Ë»5 HçE¿Hâ«ËÍœˇˇHãU∏âBHãE∏Hâ«ËÚü  êHãE¯dH+%(   tËBŒˇˇ…√Û˙UHâÂHÉÏHâ}¯Hçiy Hâ«ËÅœˇˇHãE¯HÉ¿π    Hâ¬æ-   Hçüd Hâ«ËO5 HãE¯HÉ¿1π    Hâ¬æà  Hço Hâ«Ë+5 HãE¯Hâ«Ë¯§  ê…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hçy Hâ«Ë¸ŒˇˇHçE¿π    Hâ¬æ-   Hçy Hâ«ËŒ4 HçE¿Hâ«ËŒˇˇHãU∏âBHçE¿π    Hâ¬æ-   Hç	y Hâ«Ëõ4 HçE¿Hâ«ËΩŒˇˇHãU∏âHãE∏Hâ«Ë-¶  êHãE¯dH+%(   tËÕˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç÷x Hâ«ËFŒˇˇHãE∏HÉ¿π    Hâ¬æ-   Hç“x Hâ«Ë4 HçE¿π    Hâ¬æ-   Hçbx Hâ«ËÙ3 HçE¿Hâ«ËŒˇˇHãU∏âHãE∏Hâ«Ë•§  êHãE¯dH+%(   tËoÃˇˇ…√Û˙UHâÂHÉÏHâ}¯Hçéx Hâ«ËÆÕˇˇHãE¯HÉ¿π    Hâ¬æ-   Hçoi Hâ«Ë|3 HãE¯HÉ¿1π    Hâ¬æà  Hç˛f Hâ«ËX3 HãE¯Hâ«Ë|¨  ê…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç1x Hâ«Ë)ÕˇˇHçE¿π    Hâ¬æ-   Hç1x Hâ«Ë˚2 HçE¿Hâ«ËÕˇˇHãU∏âHçE¿π    Hâ¬æ-   Hç/x Hâ«Ë…2 HçE¿Hâ«ËÎÃˇˇHãU∏âBHãE∏Hâ«Ëã  êHãE¯dH+%(   tËCÀˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç˚w Hâ«ËsÃˇˇHãE∏HÉ¿π    Hâ¬æ-   Hçˇv Hâ«ËA2 HçE¿π    Hâ¬æ-   Hçﬂw Hâ«Ë!2 HçE¿Hâ«ËCÃˇˇHãU∏âHãE∏Hâ«Ë/ã  êHãE¯dH+%(   tËú ˇˇ…√Û˙UHâÂHÉÏHâ}¯HçCg Hâ«Ë€ÀˇˇHãE¯HÉ¿-π    Hâ¬æ-   Hçów Hâ«Ë©1 HãE¯π    Hâ¬æ-   Hç'g Hâ«Ëâ1 HãE¯Hâ«Ë£´  ê…√Û˙UHâÂHÉÏHâ}¯Hçyw Hâ«ËiÀˇˇHãE¯π    Hâ¬æ-   HçÑ^ Hâ«Ë;1 HãE¯HÉ¿jπ    Hâ¬æ-   Hçg` Hâ«Ë1 HãE¯Hó   π    Hâ¬æ-   HçU` Hâ«ËÒ0 HãE¯HÉ¿Zπ    Hâ¬æ   Hçw Hâ«ËÕ0 HãE¯Hâ«Ëbô  ê…√Û˙UHâÂHÉÏpHâ}®Hâu†HâUòdHã%(   HâE¯1¿Hç˛v Hâ«Ëñ ˇˇHãE®HÉ¿π    Hâ¬æ-   Hçw Hâ«Ëd0 HãE®HÉ¿Hâ«Ë≈, A∏    π    ∫n   æs   Hç˛v Hâ«Ë∑2 àEΩ∂EΩÉÑ¿Ö±  HçE¿π    Hâ¬æ-   Hçw Hâ«Ë˛/ HçE¿Hâ«Ë  ˇˇHãU®âHãE®HÉ¿Dπ    Hâ¬æ   Hçw Hâ«Ë»/ HãE®HÉ¿DHâ«Ë@9 Ñ¿tÎ%HãY Hâ¡∫   æ   Hçø` Hâ«Ëç ˇˇÎ°HãE®HÉ¿Oπ    Hâ¬æ   Hçﬂv Hâ«Ëi/ HãE®HÉ¿OHâ«Ë·8 Ñ¿u%Hã¸ Hâ¡∫   æ   Hçb` Hâ«Ë0 ˇˇÎ£êHãE®Hâ«ËcÖ  Hç≤v Hâ«Ë"…ˇˇHãE®ãHãE†âPHçE¿π    Hâ¬æ-   Hç^ Hâ«ËÁ. HçE¿Hâ«Ë	…ˇˇHãU†âHçE¿π    Hâ¬æ-   HçÚ] Hâ«Ëµ. HçE¿Hâ«Ë◊»ˇˇHãU†âBHãE†HÉ¿π    Hâ¬æ-   HçŒ] Hâ«Ë~. HãE†HÉ¿9π    Hâ¬æ-   Hçæ] Hâ«ËZ. HãE†Hâ«ËY  A∏    π    ∫n   æs   Hç v Hâ«Ë±0 àEΩÄ}Ω Ñ}  HãE®ãHãEòâPHãE†ãHãEòâPHçv Hâ«Ë»ˇˇHçE¿π    Hâ¬æ-   Hç e Hâ«Ë‘- HçE¿Hâ«Ëˆ«ˇˇHãUòâBHçE¿π    Hâ¬æ-   Hçøe Hâ«Ë°- HçE¿Hâ«Ë√«ˇˇHãUòâBHãEòHÉ¿π    Hâ¬æ   Hç0f Hâ«Ëj- HãEòHÉ¿Hâ«Ë‚6 Ñ¿tÎ%Hã˚ Hâ¡∫   æ   Hça^ Hâ«Ë/»ˇˇÎ°HãEòHÉ¿π    Hâ¬æ   Hç	f Hâ«Ë- HãEòHÉ¿Hâ«ËÉ6 Ñ¿u%Hãû Hâ¡∫   æ   Hç^ Hâ«Ë“«ˇˇÎ£êA∏    π    ∫n   æs   Hç€t Hâ«Ë4/ àEæÄ}æ ÖÉ˛ˇˇA∏    π    ∫n   æs   HçÍt Hâ«Ë/ àEøÄ}ø ÖL˝ˇˇÎêHãE¯dH+%(   tË≈ˇˇ…√Û˙UHâÂHÉÏHâ}¯HçÌt Hâ«ËE∆ˇˇHç u Hâ«Ë6∆ˇˇHçu Hâ«Ë'∆ˇˇHãE¯π    Hâ¬æ-   Hçu Hâ«Ë˘+ HãE¯HÉ¿-π   Hâ¬æ   Hç˘t Hâ«Ë’+ ê…√Û˙UHâÂA∏   π    ∫n   æs   Hç‹t Hâ«Ë-. ]√Û˙UHâÂHÉÏ ∆EÓ ∆EÔø5   Ë≈ˇˇHâE¯Ëçt  È≈   Ä}Ô tHãE¯Hâ«ËˇˇˇHãE¯Hâ«Ë÷u  â¿HâEHÉ}wUHãEHçÖ    Hçºt ãHòHç∞t H–>ˇ‡Ë¿»ˇˇÎ)ËU ˇˇÎ"Ë◊ˇˇÎË!  ÎËÖ  HçSt Hâ«Ë≈ˇˇË!ˇˇˇàEÔ∂EÔÉÑ¿t2A∏    π    ∫n   æs   Hç't Hâ«ËH- àEÓÄ}Ó tËu  ∂EÓÉÑ¿Ö,ˇˇˇ∏    …√Û˙UHâÂøƒ   ËƒˇˇHâ™ Hã£ HÖ¿uHçt Hâ«Ëwƒˇˇ∏ˇˇˇˇÎrøº  ËÊ√ˇˇHâÔ HãË HÖ¿uHçt Hâ«ËDƒˇˇ∏ˇˇˇˇÎ?Hãˆ HÖ¿u3ø<   Ëß√ˇˇHâ‡ HãŸ HÖ¿uHçıs Hâ«Ëƒˇˇ∏ˇˇˇˇÎ ]√Û˙UHâÂHã≠ HÖ¿u6ø<   Ë^√ˇˇHâó Hãê HÖ¿uHç‘s Hâ«Ëº√ˇˇ∏ˇˇˇˇÈœ   ø  Ë(√ˇˇHâ° Hãö HÖ¿uHçŒs Hâ«ËÜ√ˇˇ∏ˇˇˇˇÈô   ø\   ËÚ¬ˇˇHâ” HãÃ HÖ¿uHç»s Hâ«ËP√ˇˇ∏ˇˇˇˇÎføh   Ëø¬ˇˇHâò Hãë HÖ¿uHç≈s Hâ«Ë√ˇˇ∏ˇˇˇˇÎ3ø,   Ëå¬ˇˇHâÌ HãÊ HÖ¿uHç¬s Hâ«ËÍ¬ˇˇ∏ˇˇˇˇÎ ]√Û˙UHâÂøÑ   ËO¬ˇˇHâ Hã	 HÖ¿uHçµs Hâ«Ë≠¬ˇˇ∏ˇˇˇˇÈq  øÏ  Ë¬ˇˇHâ‚ Hã€ HÖ¿uHçßs Hâ«Ëw¬ˇˇ∏ˇˇˇˇÈ;  øà'  Ë„¡ˇˇHâ‘ HãÕ HÖ¿uHç°s Hâ«ËA¬ˇˇ∏ˇˇˇˇÈ  ø»  Ë≠¡ˇˇHâÆ Hãß HÖ¿uHçõs Hâ«Ë¬ˇˇ∏ˇˇˇˇÈœ   øº  Ëw¡ˇˇHâê Hãâ HÖ¿uHçïs Hâ«Ë’¡ˇˇ∏ˇˇˇˇÈô   øº  ËA¡ˇˇHâ¬
 Hãª
 HÖ¿uHçès Hâ«Ëü¡ˇˇ∏ˇˇˇˇÎføó   Ë¡ˇˇHâó
 Hãê
 HÖ¿uHçås Hâ«Ël¡ˇˇ∏ˇˇˇˇÎ3ø8   Ë€¿ˇˇHâÏ
 HãÂ
 HÖ¿uHçâs Hâ«Ë9¡ˇˇ∏ˇˇˇˇÎ ]√Û˙UHâÂø<   Ëû¿ˇˇHâ
 Hã 
 HÖ¿uHç|s Hâ«Ë¸¿ˇˇ∏ˇˇˇˇÈq  øº  Ëh¿ˇˇHâŸ	 Hã“	 HÖ¿uHçns Hâ«Ë∆¿ˇˇ∏ˇˇˇˇÈ;  øá   Ë2¿ˇˇHâ€	 Hã‘	 HÖ¿uHçxs Hâ«Ëê¿ˇˇ∏ˇˇˇˇÈ  øË   Ë¸øˇˇHâ≠	 Hã¶	 HÖ¿uHçrs Hâ«ËZ¿ˇˇ∏ˇˇˇˇÈœ   øh  Ë∆øˇˇHâ	 Hãx	 HÖ¿uHçds Hâ«Ë$¿ˇˇ∏ˇˇˇˇÈô   øƒ   ËêøˇˇHâπ	 Hã≤	 HÖ¿uHçVs Hâ«ËÓøˇˇ∏ˇˇˇˇÎføº   Ë]øˇˇHâé	 Hãá	 HÖ¿uHçSs Hâ«Ëªøˇˇ∏ˇˇˇˇÎ3øÃ  Ë*øˇˇHâK	 HãD	 HÖ¿uHçHs Hâ«Ëàøˇˇ∏ˇˇˇˇÎ ]√Û˙UHâÂø4   ËÌæˇˇHâ÷ Hãœ HÖ¿uHç3s Hâ«ËKøˇˇ∏ˇˇˇˇÈœ   ø   Ë∑æˇˇHâ∞ Hã© HÖ¿uHç-s Hâ«Ëøˇˇ∏ˇˇˇˇÈô   øË  ËÅæˇˇHâ Hã HÖ¿uHçs Hâ«Ëﬂæˇˇ∏ˇˇˇˇÎføÏ  ËNæˇˇHâÔ HãË HÖ¿uHçs Hâ«Ë¨æˇˇ∏ˇˇˇˇÎ3øÏ  ËæˇˇHâÏ HãÂ HÖ¿uHç	s Hâ«Ëyæˇˇ∏ˇˇˇˇÎ ]√Û˙UHâÂHÉÏdHã%(   HâE¯1¿«EÙ1234Hç˜r Hâ«Ë?æˇˇHçs Hâ«Ë0æˇˇHçs Hâ«Ë!æˇˇHçs Hâ«ËæˇˇHçs Hâ«ËæˇˇHçEÙ∫   Hâ∆Hçs Hâ«Ë¸' àEÛæEÛÉË1HãU¯dH+%(   tËjºˇˇ…√Û˙UHâÂHÉÏdHã%(   HâE¯1¿«EÚ1234f«Eˆ56Hç…r Hâ«ËëΩˇˇHç‚r Hâ«ËÇΩˇˇHç˚r Hâ«ËsΩˇˇHçs Hâ«ËdΩˇˇHçs Hâ«ËUΩˇˇHç s Hâ«ËFΩˇˇHç"s Hâ«Ë7ΩˇˇHç(s Hâ«Ë(ΩˇˇHç1s Hâ«ËΩˇˇHçBs Hâ«Ë
ΩˇˇHçEÚ∫   Hâ∆Hçr Hâ«Ë' àEÒæEÒÉË1HãU¯dH+%(   tËqªˇˇ…√Û˙UHâÂHÉÏ â¯àEÏHãß HÖ¿t0Hã£ HÖ¿t$Hãœ HÖ¿tHãÀ HÖ¿tHã« HÖ¿uËM˚ˇˇHçÆr Hâ«ËnºˇˇæEÏÉ¯á  â¿HçÖ    Hç§r ãHòHçòr H–>ˇ‡Ë…˝ˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHã¥ Hâ«ËÅ  ∏   È¥  Hãõ Hâ«Ë¥ﬂˇˇ∏   Èõ  HãÇ Hâ«ËÅ¡ˇˇ∏   ÈÇ  ∏    Èx  ËI˝ˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHã< Hâ«Ë⁄  ∏   È4  Hã# Hâ«Ë!·ˇˇ∏   È  Hã
 Hâ«Ë©¿ˇˇ∏   È  ∏    È¯  Ë…¸ˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHãL Hâ«ËI(  ∏   È¥  Hã3 Hâ«ËÒ‚ˇˇ∏   Èõ  Hã Hâ«Ë∆ˇˇ∏   ÈÇ  ∏    Èx  ËI¸ˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHãD Hâ«Ëd.  ∏   È4  Hã+ Hâ«ËL‰ˇˇ∏   È  Hã Hâ«ËŸ≈ˇˇ∏   È  ∏    È¯  Ë…˚ˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHã¸ Hâ«Ë',  ∏   È¥  Hã„ Hâ«ËêÊˇˇ∏   Èõ  Hã  Hâ«Ë	∆ˇˇ∏   ÈÇ  ∏    Èx  ËI˚ˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHãº Hâ«Ëµ,  ∏   È4  Hã£ Hâ«Ë#Áˇˇ∏   È  Hãä Hâ«Ë1≈ˇˇ∏   È  ∏    È¯   Ë…˙ˇˇàEˇæEˇÉ¯teÉ¯gÉ¯tBÉ¯]Ö¿tÉ¯tÎRHãD Hâ«Ë;*  ∏   È¥   Hã+ Hâ«Ë9Áˇˇ∏   Èõ   Hã Hâ«Ëa≈ˇˇ∏   ÈÇ   ∏    Î{ËL˙ˇˇàEˇæEˇÉ¯t\É¯^É¯t<É¯TÖ¿tÉ¯tÎIHãá Hâ«Ëˆ(  ∏   Î:Hãq Hâ«Ë•Áˇˇ∏   Î$Hã[ Hâ«ËB≈ˇˇ∏   Î∏    Î∏    Î …√Û˙UHâÂHÉÏ dHã%(   HâE¯1¿H∏12345678HâEÔ∆E˜9Hçàn Hâ«Ë∏ˇˇHç®n Hâ«Ë˘∑ˇˇHç°n Hâ«ËÍ∑ˇˇHçùn Hâ«Ë€∑ˇˇHçñn Hâ«ËÃ∑ˇˇHçën Hâ«ËΩ∑ˇˇHçån Hâ«ËÆ∑ˇˇHçän Hâ«Ëü∑ˇˇHçÑn Hâ«Ëê∑ˇˇHçìn Hâ«ËÅ∑ˇˇHçEÔ∫	   Hâ∆HçÜl Hâ«Ëz! àEÓ∂EÓÉË1æ¿â«ËÉ˙ˇˇêHãU¯dH+%(   tË›µˇˇ…√Û˙UHâÂHÉÏ â¯àEÏHãk  HÖ¿tHHãg  HÖ¿t<HãÉ  HÖ¿t0Hãá  HÖ¿t$Hãì  HÖ¿tHãÔˇ HÖ¿tHãÎˇ HÖ¿uËÛˇˇHç‚m Hâ«Ë¬∂ˇˇæEÏÉ¯á6  â¿HçÖ    Hç‹m ãHòHç–m H–>ˇ‡Ë¯ˇˇàEˇæEˇÉ¯toÉ¯tÉ¯tLÉ¯jÖ¿tÉ¯tÎ_Hã∞ˇ Hâ«Ë)"  ∏   Èœ  HãWˇ Hãêˇ Hâ÷Hâ«Ë8’ˇˇ∏   È¨  Hãtˇ Hâ«Ëõ¿ˇˇ∏   Èì  ∏    Èâ  Ëì˜ˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHãˇ Hâ«Ë˚  ∏   ÈE  Hãˇ Hâ«Ëé“ˇˇ∏   È,  HãÏ˛ Hâ«ËSºˇˇ∏   È  ∏    È	  Ë˜ˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHãﬁ˛ Hâ«Ëª  ∏   È≈  Hã≈˛ Hâ«Ë°–ˇˇ∏   È¨  Hã¨˛ Hâ«Ë#ªˇˇ∏   Èì  ∏    Èâ  ËìˆˇˇàEˇæEˇÉ¯tvÉ¯{É¯tSÉ¯qÖ¿tÉ¯tÎfHãN˛ Hâ«Ë¸  ∏   ÈE  HãE˛ HãN˛ Hã'˛ HâŒHâ«Ë ˇˇ∏   È  Hã˛ Hâ«ËÍ∫ˇˇ∏   È  ∏    È¯  ËˆˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHãÂ˝ Hâ«Ë∫   ∏   È¥  HãÃ˝ Hâ«Ë√‘ˇˇ∏   Èõ  Hã≥˝ Hâ«Ë‚æˇˇ∏   ÈÇ  ∏    Èx  ËÇıˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHãÕ¸ Hâ«Ëd#  ∏   È4  Hã¥¸ Hâ«Ë◊Âˇˇ∏   È  Hãõ¸ Hâ«Ë ¿ˇˇ∏   È  ∏    È¯   ËıˇˇàEˇæEˇÉ¯teÉ¯gÉ¯tBÉ¯]Ö¿tÉ¯tÎRHãU¸ Hâ«Ë;  ∏   È¥   Hã<¸ Hâ«Ë*Áˇˇ∏   Èõ   Hã#¸ Hâ«Ë"ªˇˇ∏   ÈÇ   ∏    Î{ËÖÙˇˇàEˇæEˇÉ¯t\É¯^É¯t<É¯TÖ¿tÉ¯tÎIHã`¸ Hâ«ËÎ'  ∏   Î:HãJ¸ Hâ«Ëô’ˇˇ∏   Î$Hã4¸ Hâ«ËÉ¿ˇˇ∏   Î∏    Î∏    Î …√Û˙UHâÂHÉÏ dHã%(   HâE¯1¿H∏12345678HâEÔ∆E˜9Hç©i Hâ«ËA≤ˇˇHçÕi Hâ«Ë2≤ˇˇHç i Hâ«Ë#≤ˇˇHçƒi Hâ«Ë≤ˇˇHç¡i Hâ«Ë≤ˇˇHçøi Hâ«Ëˆ±ˇˇHçΩi Hâ«ËÁ±ˇˇHçπi Hâ«Ëÿ±ˇˇHç∏i Hâ«Ë…±ˇˇHçÃh Hâ«Ë∫±ˇˇHçEÔ∫	   Hâ∆Hçøf Hâ«Ë≥ àEÓ∂EÓÉË1æ¿â«ËP˙ˇˇêHãU¯dH+%(   tË∞ˇˇ…√Û˙UHâÂHÉÏ â¯àEÏHã\˙ HÖ¿tHã∏˙ HÖ¿tHã§˙ HÖ¿uË>ÌˇˇHç+i Hâ«Ë+±ˇˇæEÏÉ¯áL  â¿HçÖ    Hç)i ãHòHçi H–>ˇ‡ËÜÚˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHã…˘ Hâ«Ë]  ∏   ÈÂ  Hã∞˘ Hâ«Ëì»ˇˇ∏   ÈÃ  Hãó˘ Hâ«Ëˆ∑ˇˇ∏   È≥  ∏    È©  ËÚˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHã±˘ Hâ«Ëí  ∏   Èe  Hãò˘ Hâ«Ëì√ˇˇ∏   ÈL  Hã˘ Hâ«Ë∑ˇˇ∏   È3  ∏    È)  ËÜÒˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHã)˘ Hâ«Ëë  ∏   ÈÂ   Hã˘ Hâ«ËÓ√ˇˇ∏   ÈÃ   Hã˜¯ Hâ«Ë∂πˇˇ∏   È≥   ∏    È©   ËÒˇˇàEˇæEˇÉ¯t\É¯^É¯t<É¯TÖ¿tÉ¯tÎIHã1¯ Hâ«Ë/  ∏   ÎhHã¯ Hâ«Ë@–ˇˇ∏   ÎRHã¯ Hâ«Ë‘∂ˇˇ∏   Î<∏    Î5∏   Î.Hã·˜ HãR¯ HãS¯ HâŒHâ«Ë‰ˇˇ∏   Î∏    Î …√Û˙UHâÂHÉÏdHã%(   HâE¯1¿«EÚ1234f«Eˆ56HçŸf Hâ«ËôÆˇˇHç¸f Hâ«ËäÆˇˇHç¯f Hâ«Ë{ÆˇˇHç˘f Hâ«ËlÆˇˇHç˝f Hâ«Ë]ÆˇˇHç˚f Hâ«ËNÆˇˇHçwd Hâ«Ë?ÆˇˇHçEÚ∫   Hâ∆HçDc Hâ«Ë8 àEÒ∂EÒÉË1æ¿â«Ëú¸ˇˇêHãU¯dH+%(   tËõ¨ˇˇ…√Û˙UHâÂHÉÏ â¯àEÏHã˘ˆ HÖ¿tHãe˜ HÖ¿tHãâ˜ HÖ¿uËÈˇˇHçyf Hâ«Ë∞≠ˇˇæEÏÉ¯Ñº  É¯è∫  É¯Ñ/  É¯è®  Ö¿tÉ¯Ñè   Èñ  ËÔˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHã\ˆ Hâ«ËÙ  ∏   ÈR  HãCˆ Hâ«Ëõ·ˇˇ∏   È9  Hã*ˆ Hâ«Ëyµˇˇ∏   È   ∏    È  ∏   È  ËwÓˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHãzˆ Hâ«ËÓ  ∏   È»   Hãaˆ Hâ«Ëøˇˇ∏   ÈØ   HãHˆ Hâ«ËO∂ˇˇ∏   Èñ   ∏    Èå   ∏   ÈÇ   ËÌÌˇˇàEˇæEˇÉ¯t\É¯^É¯t<É¯TÖ¿tÉ¯tÎIHã¿ı Hâ«Ë  ∏   ÎAHã™ı Hâ«Ër‹ˇˇ∏   Î+Hãîı Hâ«Ëìπˇˇ∏   Î∏    Î∏   Î∏    Î …√Û˙UHâÂHÉÏdHã%(   HâE¯1¿«EÙ1234Hçïd Hâ«Ë≠´ˇˇHç∏d Hâ«Ëû´ˇˇHç∑d Hâ«Ëè´ˇˇHç≤d Hâ«ËÄ´ˇˇHçâ` Hâ«Ëq´ˇˇHçEÙ∫   Hâ∆Hçv` Hâ«Ëj àEÛ∂EÛÉË1æ¿â«ËI˝ˇˇêHãU¯dH+%(   tËÕ©ˇˇ…√Û˙UHâÂHÉÏ â¯àEÏHãkÙ HÖ¿t0Hã/Ù HÖ¿t$HãÙ HÖ¿tHã_Ù HÖ¿tHãcÙ HÖ¿uËZÎˇˇHçìc Hâ«Ë ™ˇˇæEÏÉ¯áÕ  â¿HçÖ    Hç‰c ãHòHçÿc H–>ˇ‡Ë%ÏˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHã¿Û Hâ«Ë∂  ∏   Èf  HãßÛ Hâ«ËÒŸˇˇ∏   ÈM  HãéÛ Hâ«Ë•≥ˇˇ∏   È4  ∏    È*  ∏   È   ËõÎˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHãNÛ Hâ«Ë/  ∏   È‹  Hã5Û Hâ«Ë›ˇˇ∏   È√  HãÛ Hâ«ËC∏ˇˇ∏   È™  ∏    È†  ∏   Èñ  ËÎˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHãtÚ Hâ«Ë≠  ∏   ÈR  Hã[Ú Hâ«Ëø⁄ˇˇ∏   È9  HãBÚ Hâ«Ë·±ˇˇ∏   È   ∏    È  ∏   È  ËáÍˇˇàEˇæEˇÉ¯teÉ¯jÉ¯tBÉ¯`Ö¿tÉ¯tÎUHãÚÒ Hâ«Ë  ∏   È»   HãŸÒ Hâ«ËŸˇˇ∏   ÈØ   Hã¿Ò Hâ«ËØ±ˇˇ∏   Èñ   ∏    Èå   ∏   ÈÇ   Ë˝ÈˇˇàEˇæEˇÉ¯t\É¯^É¯t<É¯TÖ¿tÉ¯tÎIHã¿Ò Hâ«Ë}  ∏   ÎAHã™Ò Hâ«ËÀ⁄ˇˇ∏   Î+HãîÒ Hâ«ËS∂ˇˇ∏   Î∏    Î∏   Î∏    Î …√Û˙UHâÂHÉÏdHã%(   HâE¯1¿«EÚ1234f«Eˆ56Hça Hâ«Ë∑ßˇˇHç1a Hâ«Ë®ßˇˇHç+a Hâ«ËôßˇˇHç(a Hâ«ËäßˇˇHç6a Hâ«Ë{ßˇˇHçDa Hâ«ËlßˇˇHçï] Hâ«Ë]ßˇˇHçEÚ∫   Hâ∆Hçb\ Hâ«ËV àEÒ∂EÒÉË1æ¿â«Ë¸ˇˇêHãU¯dH+%(   tËπ•ˇˇ…√Û˙UHâÂHÉÏâ¯àE¸æE¸É¯wfâ¿HçÖ    Hç‡` ãHòHç‘` H–>ˇ‡Ë˜˙ˇˇ∏   Î<Ë˘˜ˇˇ∏   Î0Ë@Ùˇˇ∏   Î$ËmÓˇˇ∏   ÎË∑˛ˇˇ∏   Î∏    Î∏   …√Û˙UHâÂHÉÏË∑ËˇˇàEˇæEˇâ«ËZˇˇˇÉÑ¿uÎ‰êê…√Û˙UHâÂøà'  Ë“•ˇˇHâ Hã HÖ¿uHçH` Hâ«Ë0¶ˇˇ∏ˇˇˇˇÎfø8   Ëü•ˇˇHâËÔ Hã·Ô HÖ¿uHç=` Hâ«Ë˝•ˇˇ∏ˇˇˇˇÎ3ø»  Ël•ˇˇHâΩÔ Hã∂Ô HÖ¿uHç:` Hâ«Ë •ˇˇ∏ˇˇˇˇÎ ]√Û˙UHâÂSHÉÏHdHã%(   HâEË1¿HçE∞π    Hâ¬æ-   Hç` Hâ«Ëw HãFÔ HçE∞Hâ«Ëí•ˇˇâHã1Ô Hâ«Ë§ô  Hã"Ô Hâ«ËÄ  êHãEËdH+%(   tË›£ˇˇHã]¯…√Û˙UHâÂHÉÏdHã%(   HâE¯1¿f«Eı12∆E˜3Hçª_ Hâ«Ë•ˇˇHç‘_ Hâ«ËÙ§ˇˇHçÂ_ Hâ«ËÂ§ˇˇHç˛_ Hâ«Ë÷§ˇˇHç` Hâ«Ë«§ˇˇHç8` Hâ«Ë∏§ˇˇHçJ` Hâ«Ë©§ˇˇHçEı∫   Hâ∆Hç7` Hâ«Ë¢ àEÙæEÙÉË1HãU¯dH+%(   tË£ˇˇ…√Û˙UHâÂHÉÏâ}¸É}¸tGÉ}¸wHÉ}¸ tÉ}¸t)Î:HãÓ HãÓ Hã¯Ì HâŒHâ«Ëúπˇˇ∏   ÎË&  ∏   Î∏    Î∏   …√Û˙UHâÂHÉÏHãπÌ HÖ¿tHãµÌ HÖ¿tHã±Ì HÖ¿uËk˝ˇˇËì˛ˇˇàEˇæEˇâ«ËNˇˇˇÉÑ¿uÎ‰êê…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿HçA_ Hâ«ËÅ£ˇˇHçE¿π    Hâ¬æ-   HçI_ Hâ«ËS	 HçE¿Hâ«Ëu£ˇˇHãU∏âHãE∏Hâ«Ëêü  Ö¿~kHç8_ Hâ«Ë0£ˇˇHãE∏HçHOHãE∏Lç@DHãE∏Hçx9HãE∏ãPHãE∏ã@Hãu∏HÉ∆HÉÏQMâ¡Iâ¯â—â¬Hç_ Hâ«∏    ËüüˇˇHÉƒ∏    ÎHçu_ Hâ«Ë≈¢ˇˇ∏ˇˇˇˇHãU¯dH+%(   tËL°ˇˇ…√Û˙UHâÂSHÉÏXHâ}®dHã%(   HâEË1¿HçQ_ Hâ«Ë{¢ˇˇHçE∞π    Hâ¬æ-   HçM_ Hâ«ËM HçE∞Hâ«Ëo¢ˇˇHãU®âHãE®Hâ«Ëﬂò  Ö¿é£   HãE®Lçê∏   HãE®DãÄ¥   HãE®ã∏∞   HãE®ÛÄ¨   fÔ…ÛZ»fH~»HãU®Lçä†   HãU®Hçöï   HãU®Lçöã   HãU®HçJ^HãU®HÉ¬1Hãu®HÉ∆ARAPWAQfHn¿IâŸMâÿHç≤^ Hâ«∏   Ë]ûˇˇHÉƒ ∏    ÎHçp_ Hâ«ËÉ°ˇˇ∏ˇˇˇˇHãUËdH+%(   tË
†ˇˇHã]¯…√Û˙UHâÂHÉÏHâ}¯HãE¯π    Hâ¬æ-   Hç<_ Hâ«Ë& HãE¯Hâ«Ëõ  Ö¿éá   Hç:_ Hâ«Ë°ˇˇHãE¯LçÄ·   HãE¯Hç∏¸   HãE¯Hç∞Ï   HãE¯Lçà¥   HãE¯Lçêá   HãE¯HçHZHãE¯HçP-HãE¯HÉÏAPWVMâ–Hâ∆HçÒ^ Hâ«∏    ËdùˇˇHÉƒ ∏    ÎHç^_ Hâ«Ëä†ˇˇ∏ˇˇˇˇ…√Û˙UHâÂHÉÏHâ}¯HçU_ Hâ«Ëd†ˇˇHãE¯π    Hâ¬æ-   HçT_ Hâ«Ë6 HãE¯Hâ«Ë
ü  Ö¿éá   HãE¯∂Ä»  æ»HãE¯ÛÄƒ  fÔ…ÛZ»HãE¯ÛÄ¿  ÛZ¿HãE¯Ûêº  fÔ€ÛZ⁄fH~⁄HãE¯ãÄ∏  Hãu¯HÉ∆-f(—f(»fHn¬â¬HçÌ^ Hâ«∏   Ëpúˇˇ∏    ÎHçb_ Hâ«Ëöüˇˇ∏ˇˇˇˇ…√Û˙UHâÂHÉÏHâ}¯Hçb_ Hâ«ËtüˇˇHãE¯π    Hâ¬æ-   Hçd_ Hâ«ËF HãE¯Hâ«ËLé  Ö¿~\HãE¯Hçx8HãE¯ãàƒ  HãE¯ãê¿  HãE¯ãp4HãE¯Û@0fÔ…ÛZ»fH~»Iâ¯fHn¿Hç4_ Hâ«∏   ËØõˇˇ∏    ÎHçë_ Hâ«ËŸûˇˇ∏ˇˇˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç{_ Hâ«Ë§ûˇˇHçE¿π    Hâ¬æ-   Hçv[ Hâ«Ëv HçE¿Hâ«ËòûˇˇHãU∏âHãE∏Hâ«Ë©í  Ö¿~eHãE∏Hç∏   HãE∏HçpxHãE∏Dã@tHãE∏LçPiHãE∏HçH^HãE∏HçP1HãE∏HÉ¿WVEâ¡Mâ–Hâ∆Hç_ Hâ«∏    Ë»öˇˇHÉƒ∏    ÎHç€[ Hâ«ËÓùˇˇ∏ˇˇˇˇHãU¯dH+%(   tËuúˇˇ…√Û˙UHâÂHÉÏHâ}¯Hç>_ Hâ«Ë¥ùˇˇHãE¯π    Hâ¬æ-   Hç<_ Hâ«ËÜ HãE¯Hâ«Ëqè  Ö¿~\HãE¯HçpxHãE¯Dã@tHãE¯ãxpHãE¯HçHBHãE¯HçP7HãE¯HÉ¿
HÉÏVEâ¡Aâ¯Hâ∆Hç_ Hâ«∏    ËÛôˇˇHÉƒ∏    ÎHço_ Hâ«Ëùˇˇ∏ˇˇˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿HçX_ Hâ«Ë‰úˇˇHçE¿π    Hâ¬æ-   HçT_ Hâ«Ë∂ HçE¿Hâ«ËÿúˇˇHãU∏âHçQ_ Hâ«Ë£úˇˇHãE∏Hâ«ËMâ  Ö¿~gHç2_ Hâ«ËÑúˇˇHãE∏HçpHãE∏Lç@HãE∏ãxHãE∏ãHHãE∏ãPHãE∏ã@HÉÏVMâ¡Aâ¯â∆HçÙ^ Hâ«∏    Ë˜òˇˇHÉƒ∏    ÎHçM_ Hâ«Ëúˇˇ∏ˇˇˇˇHãU¯dH+%(   tË§öˇˇ…√Û˙UHâÂHÉÏHâ}¯Hç6_ Hâ«Ë„õˇˇHãE¯π    Hâ¬æ-   Hç;_ Hâ«Ëµ HãE¯HÉ¿-π    Hâ¬æ-   HçG_ Hâ«Ëë HãE¯Hâ«ËÿÜ  Ö¿~1HãE¯Hçêá   HãE¯HÉ¿ZHâ∆Hç:_ Hâ«∏    Ë%òˇˇ∏    ÎHçG_ Hâ«ËOõˇˇ∏ˇˇˇˇ…√Û˙UHâÂHÉÏHâ}¯HçE_ Hâ«Ë)õˇˇHãE¯π    Hâ¬æ-   HçI_ Hâ«Ë˚  HãE¯Hâ«Ë≤Ñ  Ö¿~DHãE¯HçpZHãE¯HçH-HãE¯Hçêó   HãE¯HÉ¿jIâHâ∆Hç!_ Hâ«∏    Ë|óˇˇ∏    ÎHçF_ Hâ«Ë¶öˇˇ∏ˇˇˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç1_ Hâ«ËqöˇˇHçE¿π    Hâ¬æ-   Hç1_ Hâ«ËC  HçE¿Hâ«ËeöˇˇHãU∏âHãE∏HÉ¿π    Hâ¬æ-   Hç#_ Hâ«Ë  HãE∏Hâ«Ë`Ç  Ö¿~1HãE∏Hçêπ  HãE∏HÉ¿1Hâ∆Hç_ Hâ«∏    Ë°ñˇˇ∏    ÎHç+_ Hâ«ËÀôˇˇ∏ˇˇˇˇHãU¯dH+%(   tËRòˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç_ Hâ«ËÇôˇˇHçE¿π    Hâ¬æ-   HçB^ Hâ«ËTˇ  HçE¿Hâ«ËvôˇˇHãU∏âHçE¿π    Hâ¬æ-   Hç‡^ Hâ«Ë"ˇ  HçE¿Hâ«ËDôˇˇHãU∏âBHãE∏Hâ«Ë·  Ö¿~9HãE∏HçàΩ  HãE∏HçP5HãE∏HÉ¿Hâ∆Hç∏^ Hâ«∏    Ëõïˇˇ∏    ÎHçÕ^ Hâ«Ë≈òˇˇ∏ˇˇˇˇHãU¯dH+%(   tËLóˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç¥^ Hâ«Ë|òˇˇHçE¿π    Hâ¬æ-   Hçº^ Hâ«ËN˛  HçE¿Hâ«ËpòˇˇHãU∏âHçE¿π    Hâ¬æ-   Hç∫^ Hâ«Ë˛  HçE¿Hâ«Ë>òˇˇHãU∏âBHãE∏Hâ«Ë]}  Ö¿~6HãE∏HçHbHãE∏HçPHãE∏HÉ¿5Hâ∆Hçï^ Hâ«∏    Ëòîˇˇ∏    ÎHç™^ Hâ«Ë¬óˇˇ∏ˇˇˇˇHãU¯dH+%(   tËIñˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hçå^ Hâ«ËyóˇˇHãE∏HÉ¿π    Hâ¬æ-   HçÖ^ Hâ«ËG˝  HçE¿π    Hâ¬æ-   Hçç^ Hâ«Ë'˝  HçE¿Hâ«ËIóˇˇHãU∏âHãE∏Hâ«Ë•  Ö¿~.HãE∏ã HãU∏HçJâ¬HâŒHçr^ Hâ«∏    Ë¨ìˇˇ∏    ÎHçv^ Hâ«Ë÷ñˇˇ∏ˇˇˇˇHãU¯dH+%(   tË]ïˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hçm^ Hâ«ËçñˇˇHçE¿π    Hâ¬æ-   Hç}^ Hâ«Ë_¸  HçE¿Hâ«ËÅñˇˇHãU∏âBHçE¿π    Hâ¬æ-   Hçz^ Hâ«Ë,¸  HçE¿Hâ«ËNñˇˇHãU∏âHãE∏Hâ«Ë©£  Ö¿~*HãE∏ãHãE∏ã@â∆Hçj^ Hâ«∏    Ëµíˇˇ∏    ÎHç] Hâ«Ëﬂïˇˇ∏ˇˇˇˇHãU¯dH+%(   tËfîˇˇ…√Û˙UHâÂHÉÏHâ}¯Hç7^ Hâ«Ë•ïˇˇHãE¯π    Hâ¬æ-   Hç≈Y Hâ«Ëw˚  HãE¯Hâ«Ëñy  Ö¿~/HãE¯ã@8HãU¯HçJ-â¬HâŒHç˝] Hâ«∏    Ëíˇˇ∏    ÎHç$S Hâ«Ë7ïˇˇ∏ˇˇˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç ] Hâ«ËïˇˇHçE¿π    Hâ¬æ-   Hç“] Hâ«Ë‘˙  HçE¿Hâ«ËˆîˇˇHãU∏âHçE¿π    Hâ¬æ-   Hç–] Hâ«Ë¢˙  HçE¿Hâ«ËƒîˇˇHãU∏âBHãE∏Hâ«Ë0w  Ö¿~4HãE∏ã@HãU∏HÉ¬9HãM∏Hçqâ¡Hçµ] Hâ«∏    Ë ëˇˇ∏    ÎHç⁄] Hâ«ËJîˇˇ∏ˇˇˇˇHãU¯dH+%(   tË—íˇˇ…√Û˙UHâÂHÉÏHâ}¯HçÀ] Hâ«ËîˇˇHãE¯π    Hâ¬æ-   Hç»] Hâ«Ë‚˘  HãE¯Hâ«ËÌt  Ö¿~GHãE¯ã∏Ë  HãE¯ãÄ‰  HãU¯HÉ¬-HãM¯Hç±µ  Aâ¯â¡Hçù] Hâ«∏    Ë`êˇˇ∏    ÎHç‚] Hâ«Ëäìˇˇ∏ˇˇˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç÷] Hâ«ËUìˇˇHçE¿π    Hâ¬æ-   Hç”] Hâ«Ë'˘  HçE¿Hâ«ËIìˇˇHãU∏âHãE∏Hâ«ËÿÉ  Ö¿~.HãE∏HçP1HãE∏HÉ¿Hâ∆Hç±] Hâ«∏    Ë¨èˇˇ∏    ÎHç√P Hâ«Ë÷íˇˇ∏ˇˇˇˇHãU¯dH+%(   tË]ëˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hçx] Hâ«ËçíˇˇHçE¿π    Hâ¬æ-   Hç] Hâ«Ë_¯  HçE¿Hâ«ËÅíˇˇHãU∏âHãE∏Hâ«Ëù  Ö¿éı   HãE∏Lç@nHãE∏Hçx1HãE∏Hçp^HãE∏LçH~HãE∏Lçê8  HãE∏Hçà  HãE∏Hçê´   HãE∏HÉ¿HÉÏAPWVMâ–Hâ∆HçÈ\ Hâ«∏    ËúéˇˇHÉƒ HãE∏H´   Hç2] Hâ÷Hâ«ËlëˇˇÖ¿u HãE∏H´   Hç] Hâ÷Hâ«ËLëˇˇÖ¿u#HãE∏Hÿ   Hâ∆Hçˇ\ Hâ«∏    Ë7éˇˇÎ9HãE∏H  Hâ∆HçÌ\ Hâ«∏    ËéˇˇÎHç0O Hâ«ËCëˇˇ∏ˇˇˇˇÎ∏    HãU¯dH+%(   tË√èˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç†\ Hâ«ËÛêˇˇHçE¿π    Hâ¬æ-   Hçù\ Hâ«Ë≈ˆ  HçE¿Hâ«ËÁêˇˇHãU∏âHãE∏Hâ«Ë9¢  Ö¿~.HãE∏HçP1HãE∏HÉ¿Hâ∆Hçw\ Hâ«∏    ËJçˇˇ∏    ÎHçaN Hâ«Ëtêˇˇ∏ˇˇˇˇHãU¯dH+%(   tË˚éˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç4\ Hâ«Ë+êˇˇHçE¿π    Hâ¬æ-   Hç’[ Hâ«Ë˝ı  HçE¿Hâ«ËêˇˇHãU∏âHãE∏Hâ«ËØê  Ö¿~.HãE∏HçP1HãE∏HÉ¿Hâ∆HçØ[ Hâ«∏    ËÇåˇˇ∏    ÎHçôM Hâ«Ë¨èˇˇ∏ˇˇˇˇHãU¯dH+%(   tË3éˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hçã[ Hâ«ËcèˇˇHçE¿π    Hâ¬æ-   Hç[ Hâ«Ë5ı  HçE¿Hâ«ËWèˇˇHãU∏âHãE∏Hâ«Ëë  Ö¿~.HãE∏HçP1HãE∏HÉ¿Hâ∆HçW[ Hâ«∏    Ë∫ãˇˇ∏    ÎHç—L Hâ«Ë‰éˇˇ∏ˇˇˇˇHãU¯dH+%(   tËkçˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç[ Hâ«ËõéˇˇHçE¿π    Hâ¬æ-   HçEZ Hâ«ËmÙ  HçE¿Hâ«ËèéˇˇHãU∏âHãE∏Hâ«Ëoë  Ö¿~RHãE∏Hç∏ã   HãE∏Hçp^HãE∏HçH1HãE∏Hçê∏   HãE∏HÉ¿Iâ˘IâHâ∆Hç´Z Hâ«∏    ËŒäˇˇ∏    ÎHç⁄Z Hâ«Ë¯çˇˇ∏ˇˇˇˇHãU¯dH+%(   tËåˇˇ…√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿Hç¨Z Hâ«ËØçˇˇHçE¿π    Hâ¬æ-   HçßZ Hâ«ËÅÛ  HçE¿Hâ«Ë£çˇˇHãU∏âHçE¿π    Hâ¬æ-   HçùZ Hâ«ËOÛ  HçE¿Hâ«ËqçˇˇHãU∏âBHãE∏Hâ«Ë í  Ö¿~AHãE∏Û@8fÔ…ÛZ»fH~»HãU∏HÉ¬fHn¿Hâ÷HçnZ Hâ«∏   Ë¿âˇˇ∏    ÎHçrZ Hâ«ËÍåˇˇ∏ˇˇˇˇHãU¯dH+%(   tËqãˇˇ…√Û˙UHâÂHÉÏHâ}¯Hç[Z Hâ«Ë∞åˇˇHãE¯π    Hâ¬æ-   HçXZ Hâ«ËÇÚ  HãE¯HÉ¿-π    Hâ¬æ-   HçTZ Hâ«Ë^Ú  HãE¯Hâ«Ërí  Ö¿~&HãE¯HÉ¿ZHâ∆HçLZ Hâ«∏    Ë˝àˇˇ∏    ÎHç?Z Hâ«Ë'åˇˇ∏ˇˇˇˇ…√Û˙UHâÂATSHÉÏPHâ}®dHã%(   HâEË1¿Hç'Z Hâ«ËÔãˇˇHçE∞π    Hâ¬æ-   HçmV Hâ«Ë¡Ò  HçE∞Hâ«Ë„ãˇˇHãU®âHãE®Hâ«Ë	ì  Ö¿é£   HãE®LçX4HãE®Û@0fÔ…ÛZ»fH~ HãE®∂@.æ¯HãE®LçP(HãE®LçHHãE®Lç@"HãE®Lç`HãE®ãXHãE®Hçàé   HãE®ã@Hãu®HÉ∆aHÉÏASWARAQAPfHn¬Mâ·Aâÿâ¬HçnY Hâ«∏   Ë—áˇˇHÉƒ0∏    ÎHçZ Hâ«Ë˜äˇˇ∏ˇˇˇˇHãUËdH+%(   tË~âˇˇHçe[A\]√Û˙UHâÂHÉÏPHâ}∏dHã%(   HâE¯1¿HçﬂY Hâ«ËßäˇˇHçE¿π    Hâ¬æ-   HçﬂY Hâ«Ëy  HçE¿Hâ«ËõäˇˇHãU∏âHãE∏HÉ¿π    Hâ¬æ-   HçŸY Hâ«ËC  HãE∏Hâ«Ëêö  Ö¿~$HãE∏ã@4â∆HçﬂY Hâ«∏    Ë‰Üˇˇ∏    ÎHç÷Y Hâ«Ëäˇˇ∏ˇˇˇˇHãU¯dH+%(   tËïàˇˇ…√Û˙UHâÂHçÃY Hâ«Ë‹âˇˇËœ∫  ê]√Û˙UHâÂHçÒY Hâ«ËΩâˇˇË>Œ  ê]√Û˙UHâÂHÉÏPdHã%(   HâE¯1¿Hç€Y Hâ«ËãâˇˇHçE¿π    Hâ¬æ-   HçÎY Hâ«Ë]Ô  HçZ Hâ«Ë\âˇˇHçE¿Hâ«ËpâˇˇâEºãEºâ«Ë¯¡  êHãE¯dH+%(   tËŒáˇˇ…√Û˙UHâÂHÉÏPdHã%(   HâE¯1¿Hç¬Y Hâ«ËâˇˇHçE¿π    Hâ¬æ-   Hç⁄Y Hâ«Ë‘Ó  HçäY Hâ«Ë”àˇˇHçE¿Hâ«ËÁàˇˇâEºãEºâ«Ë#æ  êHãE¯dH+%(   tËEáˇˇ…√Û˙UHâÂHÉÏ@dHã%(   HâE¯1¿Hç©Y Hâ«ËyàˇˇHçE¿π    Hâ¬æ-   Hç¡Y Hâ«ËKÓ  HçY Hâ«ËJàˇˇHçE¿Hâ«Ëƒ≤  êHãE¯dH+%(   tË…Üˇˇ…√Û˙UHâÂHÉÏ@dHã%(   HâE¯1¿HçùY Hâ«Ë˝áˇˇHçE¿π    Hâ¬æ-   HçùY Hâ«ËœÌ  Hç∂Y Hâ«ËŒáˇˇHçE¿Hâ«Ë9÷  êHãE¯dH+%(   tËMÜˇˇ…√Û˙UHâÂHÉÏPdHã%(   HâE¯1¿HçëY Hâ«ËÅáˇˇHçE¿π    Hâ¬æ-   HçìY Hâ«ËSÌ  HçE¿Hâ«ËuáˇˇâEºHçìY Hâ«ËCáˇˇãEºâ«Ë÷‹  êHãE¯dH+%(   tËƒÖˇˇ…√Û˙UHâÂHÉÏ@dHã%(   HâE¯1¿HçpY Hâ«Ë¯ÜˇˇHçE¿π    Hâ¬æ-   HçxY Hâ«Ë Ï  HçëY Hâ«Ë…ÜˇˇHçE¿Hâ«Ëú‰  êHãE¯dH+%(   tËHÖˇˇ…√Û˙UHâÂHÉÏPHâ}∏âu¥dHã%(   HâE¯1¿HãE∏ã@89E¥uHãE∏ã@8â∆Hç`Y Hâ«∏    ËÉˇˇHçE¿π    Hâ¬æ-   Hç„Y Hâ«Ë-Ï  HçE¿Hâ«ËOÜˇˇHãU∏âB8HãE∏ã@89E¥tòHãE∏Hâ«ËπØ  êHãE¯dH+%(   tËõÑˇˇ…√Û˙UHâÂHÉÏ`Hâ}®dHã%(   HâE¯1¿HçõY Hâ«ËÀÖˇˇHãE®Hâ«ËÏÁˇˇA∏    π    ∫n   æs   HçìY Hâ«ËÓ  àEøÄ}ø t?HçE¿π    Hâ¬æ-   HçíY Hâ«ËdÎ  HçE¿Hâ«ËÜÖˇˇHãU®âBtHãE®Hâ«ËDE  êHãE¯dH+%(   tËﬁÉˇˇ…√Û˙UHâÂHã%œ HÖ¿tHãœ Hâ«ËÉˇˇH«œ     Hã˜– HÖ¿tHãÎ– Hâ«ËÛÇˇˇH«ÿ–     Hã9— HÖ¿tHã-— Hâ«ËÕÇˇˇH«—     Hã;— HÖ¿tHã/— Hâ«ËßÇˇˇH«—     Hã— HÖ¿tHã— Hâ«ËÅÇˇˇH«Ó–     Hãﬂ– HÖ¿tHã”– Hâ«Ë[ÇˇˇH«¿–     Hã±– HÖ¿tHã•– Hâ«Ë5ÇˇˇH«í–     HãÉ– HÖ¿tHãw– Hâ«ËÇˇˇH«d–     HãM– HÖ¿tHãA– Hâ«ËÈÅˇˇH«.–     Hã– HÖ¿tHã– Hâ«Ë√ÅˇˇH« –     Hã9– HÖ¿tHã-– Hâ«ËùÅˇˇH«–     Hã#– HÖ¿tHã– Hâ«ËwÅˇˇH«–     Hã– HÖ¿tHã˘œ Hâ«ËQÅˇˇH«Êœ     Hãœœ HÖ¿tHã√œ Hâ«Ë+ÅˇˇH«∞œ     HãYœ HÖ¿tHãMœ Hâ«ËÅˇˇH«:œ     Hã”Œ HÖ¿tHã«Œ Hâ«ËﬂÄˇˇH«¥Œ     HãµŒ HÖ¿tHã©Œ Hâ«ËπÄˇˇH«ñŒ     HãﬂŒ HÖ¿tHã”Œ Hâ«ËìÄˇˇH«¿Œ     HãÅŒ HÖ¿tHãuŒ Hâ«ËmÄˇˇH«bŒ     HããŒ HÖ¿tHãŒ Hâ«ËGÄˇˇH«lŒ     Hã]Œ HÖ¿tHãQŒ Hâ«Ë!ÄˇˇH«>Œ     Hã/Œ HÖ¿tHã#Œ Hâ«Ë˚ˇˇH«Œ     HãŒ HÖ¿tHãıÕ Hâ«Ë’ˇˇH«‚Õ     HãÀÕ HÖ¿tHãøÕ Hâ«ËØˇˇH«¨Õ     Hã≠Õ HÖ¿tHã°Õ Hâ«ËâˇˇH«éÕ     HãoÕ HÖ¿tHãcÕ Hâ«ËcˇˇH«PÕ     HãÕ HÖ¿tHãÕ Hâ«Ë=ˇˇH«˙Ã     Hã˚Ã HÖ¿tHãÔÃ Hâ«ËˇˇH«‹Ã     Hã›Ã HÖ¿tHã—Ã Hâ«ËÒ~ˇˇH«æÃ     HãÔÀ HÖ¿tHã„À Hâ«ËÀ~ˇˇH«–À     Hã1Ã HÖ¿tHã%Ã Hâ«Ë•~ˇˇH«Ã     Hã3Ã HÖ¿tHã'Ã Hâ«Ë~ˇˇH«Ã     HãÃ HÖ¿tHã˘À Hâ«ËY~ˇˇH«ÊÀ     Hã◊À HÖ¿tHãÀÀ Hâ«Ë3~ˇˇH«∏À     Hã©À HÖ¿tHãùÀ Hâ«Ë~ˇˇH«äÀ     Hã{À HÖ¿tHãoÀ Hâ«ËÁ}ˇˇH«\À     HãEÀ HÖ¿tHã9À Hâ«Ë¡}ˇˇH«&À     HãÀ HÖ¿tHãÀ Hâ«Ëõ}ˇˇH«¯      HãAÃ HÖ¿tHã5Ã Hâ«Ëu}ˇˇH«"Ã     HãÃ HÖ¿tHãˇÀ Hâ«ËO}ˇˇH«ÏÀ     HãÂ  HÖ¿tHãŸ  Hâ«Ë)}ˇˇH«∆      Hãœ  HÖ¿tHã√  Hâ«Ë}ˇˇH«∞      Hã±  HÖ¿tHã•  Hâ«Ë›|ˇˇH«í      Hã{  HÖ¿tHão  Hâ«Ë∑|ˇˇH«\      Hãı… HÖ¿tHãÈ… Hâ«Ëë|ˇˇH«÷…     Hãﬂ… HÖ¿tHã”… Hâ«Ëk|ˇˇH«¿…     HãY… HÖ¿tHãM… Hâ«ËE|ˇˇH«:…     Hã;… HÖ¿tHã/… Hâ«Ë|ˇˇH«…     HãÕ  HÖ¿tHã¡  Hâ«Ë˘{ˇˇH«Æ      HãØ  HÖ¿tHã£  Hâ«Ë”{ˇˇH«ê      Hãq  HÖ¿tHãe  Hâ«Ë≠{ˇˇH«R      Hãk  HÖ¿tHã_  Hâ«Ëá{ˇˇH«L      HãU  HÖ¿tHãI  Hâ«Ëa{ˇˇH«6      Hã'  HÖ¿tHã  Hâ«Ë;{ˇˇH«      Hã  HÖ¿tHã  Hâ«Ë{ˇˇH«˙…     HãÎ… HÖ¿tHãﬂ… Hâ«ËÔzˇˇH«Ã…     Hã5» HÖ¿tHã)» Hâ«Ë…zˇˇH«»     Hã◊« HÖ¿tHãÀ« Hâ«Ë£zˇˇH«∏«     Hã·« HÖ¿tHã’« Hâ«Ë}zˇˇH«¬«     Hã≥« HÖ¿tHãß« Hâ«ËWzˇˇH«î«     HãÖ« HÖ¿tHãy« Hâ«Ë1zˇˇH«f«     HãW« HÖ¿tHãK« Hâ«ËzˇˇH«8«     Hã!« HÖ¿tHã« Hâ«ËÂyˇˇH««     Hã« HÖ¿tHã˜∆ Hâ«ËøyˇˇH«‰∆     Hã≈∆ HÖ¿tHãπ∆ Hâ«ËôyˇˇH«¶∆     Hão∆ HÖ¿tHãc∆ Hâ«ËsyˇˇH«P∆     HãQ∆ HÖ¿tHãE∆ Hâ«ËMyˇˇH«2∆     Hã3∆ HÖ¿tHã'∆ Hâ«Ë'yˇˇH«∆     Hã≈ HÖ¿tHã	≈ Hâ«ËyˇˇH«ˆƒ     Hã≈ HÖ¿tHã≈ Hâ«Ë€xˇˇH«ƒ     Hã)≈ HÖ¿tHã≈ Hâ«ËµxˇˇH«
≈     Hã≈ HÖ¿tHãˇƒ Hâ«ËèxˇˇH«Ïƒ     HãÌƒ HÖ¿tHã·ƒ Hâ«ËixˇˇH«Œƒ     Hãœƒ HÖ¿tHã√ƒ Hâ«ËCxˇˇH«∞ƒ     Hã±ƒ HÖ¿tHã•ƒ Hâ«ËxˇˇH«íƒ     Hãìƒ HÖ¿tHãáƒ Hâ«Ë˜wˇˇH«tƒ     Hãuƒ HÖ¿tHãiƒ Hâ«Ë—wˇˇH«Vƒ     HãWƒ HÖ¿tHãKƒ Hâ«Ë´wˇˇH«8ƒ     HãÒ√ HÖ¿tHãÂ√ Hâ«ËÖwˇˇH«“√     Hã√√ HÖ¿tHã∑√ Hâ«Ë_wˇˇH«§√     Hãï√ HÖ¿tHãâ√ Hâ«Ë9wˇˇH«v√     Hãg√ HÖ¿tHã[√ Hâ«ËwˇˇH«H√     Hã9√ HÖ¿tHã-√ Hâ«ËÌvˇˇH«√     Hã√ HÖ¿tHãˇ¬ Hâ«Ë«vˇˇH«Ï¬     Hã›¬ HÖ¿tHã—¬ Hâ«Ë°vˇˇH«æ¬     Hãß¬ HÖ¿tHãõ¬ Hâ«Ë{vˇˇH«à¬     Hãy¬ HÖ¿tHãm¬ Hâ«ËUvˇˇH«Z¬     HãK¬ HÖ¿tHã?¬ Hâ«Ë/vˇˇH«,¬     Hã≈¬ HÖ¿tHãπ¬ Hâ«Ë	vˇˇH«¶¬     Hãó¬ HÖ¿tHãã¬ Hâ«Ë„uˇˇH«x¬     HãÅ¬ HÖ¿tHãu¬ Hâ«ËΩuˇˇH«b¬     Hãs¬ HÖ¿tHãg¬ Hâ«ËóuˇˇH«T¬     HãU¬ HÖ¿tHãI¬ Hâ«ËquˇˇH«6¬     Hã?¬ HÖ¿tHã3¬ Hâ«ËKuˇˇH« ¬     Hã¬ HÖ¿tHã¬ Hâ«Ë%uˇˇH«Ú¡     HãÀ¡ HÖ¿tHãø¡ Hâ«ËˇtˇˇH«¨¡     HãÂ√ HÖ¿tHãŸ√ Hâ«ËŸtˇˇH«∆√     Hã«√ HÖ¿tHãª√ Hâ«Ë≥tˇˇH«®√     Hã©√ HÖ¿tHãù√ Hâ«ËçtˇˇH«ä√     Hã;¡ HÖ¿tHã/¡ Hâ«ËgtˇˇH«¡     ê]√Û˙UHâÂHÉÏâ}¸É}¸á˛$  ãE¸HçÖ    Hçñg ãHòHçäg H–>ˇ‡Hã¿ Hâ¬HçfJ Hâ∆Hç˘ø Hâ«ËàÁ  ÉÑ¿ÑŸ$  Hãﬂø HçPJ Hâ÷Hâ«Ë6Ê  ∏    ÈÀ$  Ë&  HçˇI Hâæ HçGJ Hâ
æ HçAJ Hâæ «‚Ω Í  H«gø     Hç‘I HâÈΩ «Wø     Ël$  HãSø Hâ¬Hç¸I Hâ∆Hç'¬ Hâ«Ë÷Ê  ÉÑ¿t#Hã¬ HçÚI Hâ÷Hâ«ËàÂ  ∏    È$  Hãø Hâ¬HçJ Hâ∆Hç‚¡ Hâ«ËâÊ  ÉÑ¿t#HãÃ¡ HçıI Hâ÷Hâ«Ë;Â  ∏    È–#  Hãπæ Hâ¬Hç J Hâ∆Hçù¡ Hâ«Ë<Ê  ÉÑ¿t#Hãá¡ HçI Hâ÷Hâ«ËÓ‰  ∏    ÈÉ#  Hãlæ Hâ¬HçÓI Hâ∆Hç¿ø Hâ«ËÔÂ  ÉÑ¿t#Hã™ø Hç€I Hâ÷Hâ«Ë°‰  ∏    È6#  Hãæ Hâ¬Hç‡I Hâ∆Hç¡ Hâ«Ë¢Â  ÉÑ¿Ñˆ"  Hã¡ Hç I Hâ÷Hâ«ËP‰  ∏    ÈÂ"  Ë/$  HçH Hâ*º Hç≈I Hâ$º HçøI Hâº «¸ª Í  H«ÅΩ     HçÓG Hâº «qΩ     ËÜ"  HãmΩ Hâ¬Hç{I Hâ∆Hç	æ Hâ«Ë‰  ÉÑ¿t#HãÛΩ HçÑI Hâ÷Hâ«Ë¢„  ∏    È7"  Hã Ω Hâ¬HçéI Hâ∆HçÃΩ Hâ«Ë£‰  ÉÑ¿t#Hã∂Ω HçèI Hâ÷Hâ«ËU„  ∏    ÈÍ!  Hã”º Hâ¬Hç°I Hâ∆HçáΩ Hâ«ËV‰  ÉÑ¿t#HãqΩ Hç¢I Hâ÷Hâ«Ë„  ∏    Èù!  HãÜº Hâ¬Hç¨I Hâ∆Hçzø Hâ«Ë	‰  ÉÑ¿t#Hãdø Hç≠I Hâ÷Hâ«Ëª‚  ∏    ÈP!  Hã9º Hâ¬HçºI Hâ∆Hç%Ω Hâ«Ëº„  ÉÑ¿t#HãΩ Hç∞I Hâ÷Hâ«Ën‚  ∏    È!  HãÏª Hâ¬Hç∫I Hâ∆Hç‡º Hâ«Ëo„  ÉÑ¿t#Hã º Hç≥I Hâ÷Hâ«Ë!‚  ∏    È∂   Hãüª Hâ¬Hç¿I Hâ∆HçÉº Hâ«Ë"„  ÉÑ¿t#Hãmº HçÆI Hâ÷Hâ«Ë‘·  ∏    Èi   HãRª Hâ¬Hç∏I Hâ∆Hçº Hâ«Ë’‚  ÉÑ¿t#Hã¯ª HçπI Hâ÷Hâ«Ëá·  ∏    È   Hãª Hâ¬HçÀI Hâ∆Hç©ª Hâ«Ëà‚  ÉÑ¿t#Hãìª Hç‹I Hâ÷Hâ«Ë:·  ∏    Èœ  Hã∏∫ Hâ¬HçÓI Hâ∆Hç§Ω Hâ«Ë;‚  ÉÑ¿Ñí  HãäΩ Hç„I Hâ÷Hâ«ËÈ‡  ∏    È~  Ë»   Hç≤D Hâ√∏ Hç·I HâΩ∏ Hç€I Hâ∑∏ «ï∏ Í  H«∫     HçáD Hâú∏ «
∫     Ë  Hã∫ Hâ¬HçóI Hâ∆Hç∫º Hâ«Ëâ·  ÉÑ¿t#Hã§º HççI Hâ÷Hâ«Ë;‡  ∏    È–  Hãππ Hâ¬HçúI Hâ∆Hç]º Hâ«Ë<·  ÉÑ¿t#HãGº HçêI Hâ÷Hâ«ËÓﬂ  ∏    ÈÉ  Hãlπ Hâ¬HçöI Hâ∆Hç(º Hâ«ËÔ‡  ÉÑ¿t#Hãº HçìI Hâ÷Hâ«Ë°ﬂ  ∏    È6  Hãπ Hâ¬HçûI Hâ∆HçÀª Hâ«Ë¢‡  ÉÑ¿Ñ¸  Hã±ª HçBI Hâ÷Hâ«ËPﬂ  ∏    ÈÂ  Ë/  HçC Hâ*∑ Hç]I Hâ$∑ HçYI Hâ∑ «¸∂ Í  H«Å∏     HçÓB Hâ∑ «q∏     ËÜ  Hãm∏ Hâ¬HçI Hâ∆Hç1π Hâ«Ëﬂ  ÉÑ¿t#Hãπ Hç$I Hâ÷Hâ«Ë¢ﬁ  ∏    È7  Hã ∏ Hâ¬Hç.I Hâ∆HçÏ∏ Hâ«Ë£ﬂ  ÉÑ¿t#Hã÷∏ Hç'I Hâ÷Hâ«ËUﬁ  ∏    ÈÍ  Hã”∑ Hâ¬Hç4I Hâ∆Hç◊∏ Hâ«ËVﬂ  ÉÑ¿t#Hã¡∏ Hç*I Hâ÷Hâ«Ëﬁ  ∏    Èù  HãÜ∑ Hâ¬Hç5I Hâ∆HçÇ∏ Hâ«Ë	ﬂ  ÉÑ¿t#Hãl∏ Hç%I Hâ÷Hâ«Ëª›  ∏    ÈP  Hã9∑ Hâ¬Hç/I Hâ∆Hç∫ Hâ«Ëºﬁ  ÉÑ¿t#HãÔπ Hç8I Hâ÷Hâ«Ën›  ∏    È  HãÏ∂ Hâ¬HçEI Hâ∆Hç∞π Hâ«Ëoﬁ  ÉÑ¿ÑÃ  Hãñπ Hç7I Hâ÷Hâ«Ë›  ∏    È≤  Ë¸  HçÊ@ Hâ˜¥ Hç>I HâÒ¥ Hç8I HâÎ¥ «…¥ Í  H«N∂     Hçª@ Hâ–¥ «>∂     ËS  Hã:∂ Hâ¬Hç†D Hâ∆Hçˆ∂ Hâ«ËΩ›  ÉÑ¿t#Hã‡∂ Hç°D Hâ÷Hâ«Ëo‹  ∏    È  HãÌµ Hâ¬HçõF Hâ∆Hç±∂ Hâ«Ëp›  ÉÑ¿t#Hãõ∂ Hç§F Hâ÷Hâ«Ë"‹  ∏    È∑  Hã†µ Hâ¬HçYH Hâ∆Hçt∂ Hâ«Ë#›  ÉÑ¿t#Hã^∂ HçOH Hâ÷Hâ«Ë’€  ∏    Èj  HãSµ Hâ¬HçYH Hâ∆Hç/∂ Hâ«Ë÷‹  ÉÑ¿t#Hã∂ HçJH Hâ÷Hâ«Ëà€  ∏    È  Hãµ Hâ¬HçF Hâ∆Hç“µ Hâ«Ëâ‹  ÉÑ¿t#Hãºµ HçF Hâ÷Hâ«Ë;€  ∏    È–  Hãπ¥ Hâ¬Hç«@ Hâ∆HçUµ Hâ«Ë<‹  ÉÑ¿t#Hã?µ Hç–@ Hâ÷Hâ«ËÓ⁄  ∏    ÈÉ  Hãl¥ Hâ¬Hç⁄@ Hâ∆Hçµ Hâ«ËÔ€  ÉÑ¿t#Hãµ Hç€@ Hâ÷Hâ«Ë°⁄  ∏    È6  Hã¥ Hâ¬HçÌ@ Hâ∆Hç”¥ Hâ«Ë¢€  ÉÑ¿t#HãΩ¥ HçÓ@ Hâ÷Hâ«ËT⁄  ∏    ÈÈ  Hã“≥ Hâ¬HçG Hâ∆Hç.¥ Hâ«ËU€  ÉÑ¿t#Hã¥ HçG Hâ÷Hâ«Ë⁄  ∏    Èú  HãÖ≥ Hâ¬HçG Hâ∆Hç˘≥ Hâ«Ë€  ÉÑ¿t#Hã„≥ HçG Hâ÷Hâ«Ë∫Ÿ  ∏    ÈO  Hã8≥ Hâ¬Hç&G Hâ∆Hç¥≥ Hâ«Ëª⁄  ÉÑ¿t#Hãû≥ Hç'G Hâ÷Hâ«ËmŸ  ∏    È  HãÎ≤ Hâ¬Hç3G Hâ∆Hço≥ Hâ«Ën⁄  ÉÑ¿t#HãY≥ Hç*G Hâ÷Hâ«Ë Ÿ  ∏    Èµ  Hãû≤ Hâ¬Hç4G Hâ∆Hç2≥ Hâ«Ë!⁄  ÉÑ¿t#Hã≥ Hç-G Hâ÷Hâ«Ë”ÿ  ∏    Èh  HãQ≤ Hâ¬Hç6G Hâ∆Hç›≤ Hâ«Ë‘Ÿ  ÉÑ¿t#Hã«≤ Hç0G Hâ÷Hâ«ËÜÿ  ∏    È  Hã≤ Hâ¬Hç:G Hâ∆Hçp≤ Hâ«ËáŸ  ÉÑ¿t#HãZ≤ Hç;G Hâ÷Hâ«Ë9ÿ  ∏    ÈŒ  Hã∑± Hâ¬HçCG Hâ∆Hç≤ Hâ«Ë:Ÿ  ÉÑ¿t#Hã≤ Hç6G Hâ÷Hâ«ËÏ◊  ∏    ÈÅ  Hãj± Hâ¬Hç;G Hâ∆Hçæ± Hâ«ËÌÿ  ÉÑ¿t#Hã®± Hç1G Hâ÷Hâ«Ëü◊  ∏    È4  Hã± Hâ¬Hç:G Hâ∆Hçi± Hâ«Ë†ÿ  ÉÑ¿t#HãS± Hç4G Hâ÷Hâ«ËR◊  ∏    ÈÁ  Hã–∞ Hâ¬Hç<G Hâ∆Hç± Hâ«ËSÿ  ÉÑ¿t#Hã˛∞ Hç7G Hâ÷Hâ«Ë◊  ∏    Èö  HãÉ∞ Hâ¬HçAG Hâ∆Hçø∞ Hâ«Ëÿ  ÉÑ¿t#Hã©∞ HçBG Hâ÷Hâ«Ë∏÷  ∏    ÈM  Hã6∞ Hâ¬HçLG Hâ∆Hçj∞ Hâ«Ëπ◊  ÉÑ¿t#HãT∞ HçM< Hâ÷Hâ«Ëk÷  ∏    È   HãÈØ Hâ¬HçG Hâ∆Hç∞ Hâ«Ël◊  ÉÑ¿t#HãˇØ Hç < Hâ÷Hâ«Ë÷  ∏    È≥  HãúØ Hâ¬HçÒF Hâ∆Hç¿Ø Hâ«Ë◊  ÉÑ¿t#Hã™Ø Hç≥; Hâ÷Hâ«Ë—’  ∏    Èf  HãOØ Hâ¬Hç¬F Hâ∆HçkØ Hâ«Ë“÷  ÉÑ¿t#HãUØ Hçf; Hâ÷Hâ«ËÑ’  ∏    È  HãØ Hâ¬HçòF Hâ∆HçØ Hâ«ËÖ÷  ÉÑ¿t#Hã Ø Hç; Hâ÷Hâ«Ë7’  ∏    ÈÃ  HãµÆ Hâ¬Hç{F Hâ∆Hç¡Æ Hâ«Ë8÷  ÉÑ¿t#Hã´Æ HçÃ: Hâ÷Hâ«ËÍ‘  ∏    È  HãhÆ Hâ¬HçfF Hâ∆HçlÆ Hâ«ËÎ’  ÉÑ¿t#HãVÆ Hç: Hâ÷Hâ«Ëù‘  ∏    È2  HãÆ Hâ¬HçIF Hâ∆HçÆ Hâ«Ëû’  ÉÑ¿t#HãÆ Hç2: Hâ÷Hâ«ËP‘  ∏    ÈÂ  HãŒ≠ Hâ¬Hç#F Hâ∆HçíØ Hâ«ËQ’  ÉÑ¿t#Hã|Ø HçF Hâ÷Hâ«Ë‘  ∏    Èò  HãÅ≠ Hâ¬HçF Hâ∆Hç≈Ø Hâ«Ë’  ÉÑ¿t#HãØØ HçF Hâ÷Hâ«Ë∂”  ∏    ÈK  Hã4≠ Hâ¬HçF Hâ∆HçØ Hâ«Ë∑‘  ÉÑ¿t#HãØ HçF Hâ÷Hâ«Ëi”  ∏    È˛  HãÁ¨ Hâ¬HçF Hâ∆Hç√Æ Hâ«Ëj‘  ÉÑ¿t#Hã≠Æ HçF Hâ÷Hâ«Ë”  ∏    È±  Hãö¨ Hâ¬HçF Hâ∆HçŒÆ Hâ«Ë‘  ÉÑ¿t#Hã∏Æ HçF Hâ÷Hâ«Ëœ“  ∏    Èd  HãM¨ Hâ¬HçF Hâ∆Hç!Æ Hâ«Ë–”  ÉÑ¿t#HãÆ Hç¸E Hâ÷Hâ«ËÇ“  ∏    È  Hã ¨ Hâ¬Hç	F Hâ∆HçÃ≠ Hâ«ËÉ”  ÉÑ¿t#Hã∂≠ HçˇE Hâ÷Hâ«Ë5“  ∏    È   Hã≥´ Hâ¬Hç	F Hâ∆Hçü≠ Hâ«Ë6”  ÉÑ¿t#Hãâ≠ Hç˙E Hâ÷Hâ«ËË—  ∏    È}  Hãf´ Hâ¬Hç F Hâ∆HçZ≠ Hâ«ËÈ“  ÉÑ¿t#HãD≠ HçıE Hâ÷Hâ«Ëõ—  ∏    È0  Hã´ Hâ¬Hç˝E Hâ∆Hç≠ Hâ«Ëú“  ÉÑ¿t#Hãˇ¨ HçE Hâ÷Hâ«ËN—  ∏    È„  HãÃ™ Hâ¬Hç˙E Hâ∆Hç–¨ Hâ«ËO“  ÉÑ¿t#Hã∫¨ HçÎE Hâ÷Hâ«Ë—  ∏    Èñ  Hã™ Hâ¬HçE Hâ∆Hçã¨ Hâ«Ë“  ÉÑ¿t#Hãu¨ HçÊE Hâ÷Hâ«Ë¥–  ∏    ÈI  Hã2™ Hâ¬HçÎE Hâ∆HçF¨ Hâ«Ëµ—  ÉÑ¿t#Hã0¨ Hç·E Hâ÷Hâ«Ëg–  ∏    È¸  HãÂ© Hâ¬HçÊE Hâ∆Hç¨ Hâ«Ëh—  ÉÑ¿t#HãÎ´ Hç‘E Hâ÷Hâ«Ë–  ∏    ÈØ  Hãò© Hâ¬Hç⁄E Hâ∆Hçº´ Hâ«Ë—  ÉÑ¿t#Hã¶´ HçœE Hâ÷Hâ«ËÕœ  ∏    Èb  HãK© Hâ¬Hç’E Hâ∆Hçw´ Hâ«ËŒ–  ÉÑ¿t#Hãa´ Hç E Hâ÷Hâ«ËÄœ  ∏    È  Hã˛® Hâ¬Hç—E Hâ∆Hç:´ Hâ«ËÅ–  ÉÑ¿t#Hã$´ Hç≈E Hâ÷Hâ«Ë3œ  ∏    È»  Hã±® Hâ¬HçŒE Hâ∆Hç˝™ Hâ«Ë4–  ÉÑ¿t#HãÁ™ Hç»E Hâ÷Hâ«ËÊŒ  ∏    È{  Hãd® Hâ¬Hç’E Hâ∆Hç∏™ Hâ«ËÁœ  ÉÑ¿t#Hã¢™ HçÀE Hâ÷Hâ«ËôŒ  ∏    È.  Hã® Hâ¬Hç“E Hâ∆Hçs™ Hâ«Ëöœ  ÉÑ¿t#Hã]™ HçŒE Hâ÷Hâ«ËLŒ  ∏    È·  Hã ß Hâ¬HçÿE Hâ∆Hç.™ Hâ«ËMœ  ÉÑ¿t#Hã™ Hç…E Hâ÷Hâ«ËˇÕ  ∏    Èî  Hã}ß Hâ¬HçœE Hâ∆HçÈ© Hâ«Ë œ  ÉÑ¿t#Hã”© HçºE Hâ÷Hâ«Ë≤Õ  ∏    ÈG  Hã0ß Hâ¬Hç¡E Hâ∆Hç§© Hâ«Ë≥Œ  ÉÑ¿t#Hãé© Hç∑E Hâ÷Hâ«ËeÕ  ∏    È˙  Hã„¶ Hâ¬Hç¿E Hâ∆Hç_© Hâ«ËfŒ  ÉÑ¿t#HãI© Hç≤E Hâ÷Hâ«ËÕ  ∏    È≠  Hãñ¶ Hâ¬HçªE Hâ∆Hç© Hâ«ËŒ  ÉÑ¿t#Hã© Hç≠E Hâ÷Hâ«ËÀÃ  ∏    È`  HãI¶ Hâ¬Hç∑E Hâ∆Hç›® Hâ«ËÃÕ  ÉÑ¿t#Hã«® Hç∞E Hâ÷Hâ«Ë~Ã  ∏    È  Hã¸• Hâ¬HçªE Hâ∆Hçò® Hâ«ËÕ  ÉÑ¿t#HãÇ® Hç´E Hâ÷Hâ«Ë1Ã  ∏    È∆
  HãØ• Hâ¬HçµE Hâ∆Hç;® Hâ«Ë2Õ  ÉÑ¿t#Hã%® HçÆE Hâ÷Hâ«Ë‰À  ∏    Èy
  Hãb• Hâ¬Hç√6 Hâ∆Hçf¶ Hâ«ËÂÃ  ÉÑ¿t#HãP¶ Hçπ6 Hâ÷Hâ«ËóÀ  ∏    È,
  Hã• Hâ¬Hçƒ6 Hâ∆Hç¶ Hâ«ËòÃ  ÉÑ¿t#Hã˚• Hç¥6 Hâ÷Hâ«ËJÀ  ∏    Èﬂ	  Hã»§ Hâ¬Hç"E Hâ∆Hç‘• Hâ«ËKÃ  ÉÑ¿t#Hãæ• HçE Hâ÷Hâ«Ë˝   ∏    Èí	  Hã{§ Hâ¬HçE Hâ∆Hçó• Hâ«Ë˛À  ÉÑ¿t#HãÅ• HçE Hâ÷Hâ«Ë∞   ∏    ÈE	  Hã.§ Hâ¬HçE Hâ∆Hç“• Hâ«Ë±À  ÉÑ¿t#Hãº• HçE Hâ÷Hâ«Ëc   ∏    È¯  Hã·£ Hâ¬HçE Hâ∆Hçù• Hâ«ËdÀ  ÉÑ¿t#Hãá• HçE Hâ÷Hâ«Ë   ∏    È´  Hãî£ Hâ¬HçE Hâ∆HçH• Hâ«ËÀ  ÉÑ¿t#Hã2• HçE Hâ÷Hâ«Ë……  ∏    È^  HãG£ Hâ¬HçE Hâ∆HçÛ§ Hâ«Ë    ÉÑ¿t#Hã›§ HçE Hâ÷Hâ«Ë|…  ∏    È  Hã˙¢ Hâ¬Hç$E Hâ∆Hçñ§ Hâ«Ë}   ÉÑ¿t#HãÄ§ HçE Hâ÷Hâ«Ë/…  ∏    Èƒ  Hã≠¢ Hâ¬Hç"E Hâ∆Hçô£ Hâ«Ë0   ÉÑ¿t#HãÉ£ Hç$0 Hâ÷Hâ«Ë‚»  ∏    Èw  Hã`¢ Hâ¬Hç.0 Hâ∆HçT£ Hâ«Ë„…  ÉÑ¿t#Hã>£ Hç'0 Hâ÷Hâ«Ëï»  ∏    È*  Hã¢ Hâ¬Hç°D Hâ∆Hçß£ Hâ«Ëñ…  ÉÑ¿t#Hãë£ HçíD Hâ÷Hâ«ËH»  ∏    È›  Hã∆° Hâ¬HçõD Hâ∆HçR£ Hâ«ËI…  ÉÑ¿t#Hã<£ HççD Hâ÷Hâ«Ë˚«  ∏    Èê  Hãy° Hâ¬HçíD Hâ∆Hç˝¢ Hâ«Ë¸»  ÉÑ¿t#HãÁ¢ HçàD Hâ÷Hâ«ËÆ«  ∏    ÈC  Hã,° Hâ¬HçéD Hâ∆Hç®¢ Hâ«ËØ»  ÉÑ¿t#Hãí¢ HçÉD Hâ÷Hâ«Ëa«  ∏    Èˆ  Hãﬂ† Hâ¬HççD Hâ∆HçS¢ Hâ«Ëb»  ÉÑ¿t#Hã=¢ Hç~D Hâ÷Hâ«Ë«  ∏    È©  Hãí† Hâ¬HçÖD Hâ∆Hç˛° Hâ«Ë»  ÉÑ¿t#HãË° HçÅD Hâ÷Hâ«Ë«∆  ∏    È\  HãE† Hâ¬HçéD Hâ∆Hç©° Hâ«Ë»«  ÉÑ¿t#Hãì° Hç|D Hâ÷Hâ«Ëz∆  ∏    È  Hã¯ü Hâ¬Hç. Hâ∆Hç‹† Hâ«Ë{«  ÉÑ¿t#Hã∆† Hç. Hâ÷Hâ«Ë-∆  ∏    È¬  Hã´ü Hâ¬Hç5D Hâ∆Hç° Hâ«Ë.«  ÉÑ¿t#HãÒ† Hç*D Hâ÷Hâ«Ë‡≈  ∏    Èu  Hã^ü Hâ¬Hç3D Hâ∆Hç≤† Hâ«Ë·∆  ÉÑ¿t#Hãú† HçÕ* Hâ÷Hâ«Ëì≈  ∏    È(  Hãü Hâ¬Hç˙C Hâ∆Hç]† Hâ«Ëî∆  ÉÑ¿t#HãG† HçC Hâ÷Hâ«ËF≈  ∏    È€  Hãƒû Hâ¬Hç˜C Hâ∆Hç† Hâ«ËG∆  ÉÑ¿t#HãÚü HçÎC Hâ÷Hâ«Ë˘ƒ  ∏    Èé  Hãwû Hâ¬HçÒC Hâ∆Hç≥ü Hâ«Ë˙≈  ÉÑ¿t#Hãùü HçÊC Hâ÷Hâ«Ë¨ƒ  ∏    ÈA  Hã*û Hâ¬HçÏC Hâ∆Hç^ü Hâ«Ë≠≈  ÉÑ¿t#HãHü Hç·C Hâ÷Hâ«Ë_ƒ  ∏    ÈÙ  Hã›ù Hâ¬HçÊC Hâ∆Hç	ü Hâ«Ë`≈  ÉÑ¿t#HãÛû Hç‹C Hâ÷Hâ«Ëƒ  ∏    Èß  Hãêù Hâ¬Hç·C Hâ∆Hç¥û Hâ«Ë≈  ÉÑ¿t#Hãûû Hç◊C Hâ÷Hâ«Ë≈√  ∏    ÈZ  HãCù Hâ¬Hç‹C Hâ∆HçWû Hâ«Ë∆ƒ  ÉÑ¿t#HãAû Hç“C Hâ÷Hâ«Ëx√  ∏    È  Hãˆú Hâ¬Hç⁄C Hâ∆Hç˙ü Hâ«Ëyƒ  ÉÑ¿t#Hã‰ü Hç’C Hâ÷Hâ«Ë+√  ∏    È¿  Hã©ú Hâ¬Hçj( Hâ∆Hç•ü Hâ«Ë,ƒ  ÉÑ¿t#Hãèü HçX( Hâ÷Hâ«Ëﬁ¬  ∏    Ès  Hã\ú Hâ¬Hç"+ Hâ∆Hç ù Hâ«Ëﬂ√  ÉÑ¿t#HãÍú Hç3+ Hâ÷Hâ«Ëë¬  ∏    È&  Hãú Hâ¬HçE+ Hâ∆Hç˚û Hâ«Ëí√  ÉÑ¿t#HãÂû Hç>+ Hâ÷Hâ«ËD¬  ∏    ÈŸ   Hã¬õ Hâ¬Hç∏- Hâ∆Hçéû Hâ«ËE√  ÉÑ¿t#Hãxû Hç¡- Hâ÷Hâ«Ë˜¡  ∏    Èå   Hãuõ Hâ¬Hçõ( Hâ∆Hçiû Hâ«Ë¯¬  ÉÑ¿t\HãSû Hçú( Hâ÷Hâ«Ë™¡  ∏    ÎBHã€ô Hâ¡∫/   æ   Hç_B Hâ«ËRˇˇø   Ë%PˇˇêÎêÎ
êÎêÎêÎê∏   …√Û˙UHâÂHÉÏdHã%(   HâE¯1¿«EÙ,  ∆EÛø    Ë~QˇˇHâ∑ö Hã∞ö HÖ¿uHã§ö Hç-B Hâ÷Hâ«Ë√  ãÑö Aâ¬Hã=rö Dã€ò LãÙò HãÂò Hã÷ò Hã5«ò HãXö ARWHâ«Ë=MˇˇHÉƒHÖ¿uHã=ö HçÙA Hâ÷Hâ«Ë≠¬  Hã$ö HçUÙæ    Hâ«ËcNˇˇÖ¿tHãö Hç‹A Hâ÷Hâ«Ë˛¿  HãÔô HçUÛæ   Hâ«Ë.NˇˇÖ¿tHã”ô HçßA Hâ÷Hâ«Ë…¿  ø    ËnŸˇˇHãU¯dH+%(   tËSNˇˇ…√Û˙UHâÂËh ˇˇHãçô Hâ«ËPˇˇê]√Û˙UHâÂHÅÏÄ  HâΩà˛ˇˇdHã%(   HâE¯1¿«Öú˛ˇˇ    HãÖà˛ˇˇHâ«Ë‘LˇˇHâ¡Hãïà˛ˇˇHçÖ†˛ˇˇæ˝   Hâ«Ë=¬  HãÖà˛ˇˇHÉ¿-Hâ«Ë£LˇˇHâ¡HãÖà˛ˇˇHçP-HçÖ†˛ˇˇHÉ¿pæ˝   Hâ«Ë¬  HçÖú˛ˇˇHçï†˛ˇˇHç∫‡   π   Hâ¬æ   Ë›¡  Hã«ò Hçï†˛ˇˇHâ÷Hâ«ËçOˇˇÑ¿t(Hã™ò Hçì@ Hâ÷Hâ«Ëø  «Öú˛ˇˇ   È÷   HãÇò Hâ«ËÚKˇˇÖ¿t(Hãoò Hç{@ Hâ÷Hâ«Ë∆æ  «Öú˛ˇˇ   Èõ   Hçïú˛ˇˇHçÖ†˛ˇˇπ   æ   Hâ«Ë=¡  Hã'ò Hçï†˛ˇˇHâ÷Hâ«ËmNˇˇÑ¿t%Hã
ò Hç)@ Hâ÷Hâ«Ëaæ  «Öú˛ˇˇ   Î9HãÂó Hâ«Ë≈NˇˇÖ¿t%Hã“ó Hç
@ Hâ÷Hâ«Ë)æ  «Öú˛ˇˇ   ÎêêHã´ó Hâ«Ë{LˇˇÉ¯ˇuÏHãóó Hâ«Ë∑KˇˇHãàó Hâ«Ë¯LˇˇãÖú˛ˇˇâ«Ë"◊ˇˇãÖú˛ˇˇHãU¯dH+%(   tËLˇˇ…√Û˙UHâÂATSË»ˇˇHçí? Hâ«Ë`LˇˇIâƒHçÉ? Hâ«ËNLˇˇHâ√Hç|? Hâ«Ë<LˇˇHâ∆Hãó Lâ·Hâ⁄Hâ«ËÙJˇˇÑ¿t:HãÈñ Hâ«Ë—LˇˇHâ¬Hãáï HçH? HâŒHâ«∏    ËêLˇˇø   Ë÷Kˇˇø    Ëc÷ˇˇÉÑ¿t-HãNï Hâ¡∫/   æ   Hç"? Hâ«ËÇMˇˇø   ËòKˇˇê[A\]√Û˙UHâÂHÅÏ‡  HâΩ(¸ˇˇdHã%(   HâE¯1¿Hç? HâÖ8¸ˇˇHãÖ(¸ˇˇHçê·   HçÖ@¸ˇˇHâ∆Hâ◊Ëåø  HãÖ(¸ˇˇHâ«Ë†IˇˇHâ¡Hãï(¸ˇˇHçÖp¸ˇˇæ˝   Hâ«Ë	ø  HãÖ(¸ˇˇHÉ¿-Hâ«ËoIˇˇHâ¡HãÖ(¸ˇˇHçP-HçÖp¸ˇˇHÉ¿pæ˝   Hâ«Ë–æ  HãÖ(¸ˇˇHÉ¿ZHâ«Ë6IˇˇHâ¡HãÖ(¸ˇˇHçPZHçÖp¸ˇˇH‡   æ˝   Hâ«Ëïæ  HãÖ(¸ˇˇHá   Hâ«Ë˘HˇˇHâ¡HãÖ(¸ˇˇHçêá   HçÖp¸ˇˇHP  æ˝   Hâ«ËUæ  HãÖ(¸ˇˇH¥   Hâ«ËπHˇˇHâ¡HãÖ(¸ˇˇHçê¥   HçÖp¸ˇˇH¿  æ˝   Hâ«Ëæ  HçÖ@¸ˇˇHçïp¸ˇˇHç∫0  π(   Hâ¬æ
   ËÓΩ  HãÖ(¸ˇˇHÏ   Hâ«ËRHˇˇHâ¡HãÖ(¸ˇˇHçêÏ   HçÖp¸ˇˇH†  æ˝   Hâ«ËÆΩ  HãÖ(¸ˇˇH¸   Hâ«ËHˇˇHâ¡HãÖ(¸ˇˇHçê¸   HçÖp¸ˇˇH  æ˝   Hâ«ËnΩ  Hã ï Hãï8¸ˇˇHççp¸ˇˇHâŒHâ«Ë2¿  Hã‡î Hâ«ËXHˇˇHã—î Hâ«ËôIˇˇêHãE¯dH+%(   tË¥Hˇˇ…√Û˙UHâÂHÅÏÄ  HâΩà˛ˇˇdHã%(   HâE¯1¿HçÆ< HâÖò˛ˇˇHãÖà˛ˇˇHÉ¿Hâ«ËLGˇˇHâ¡HãÖà˛ˇˇHçPHçÖ†˛ˇˇæ˝   Hâ«Ë±º  HãÖà˛ˇˇHçPHçÖ†˛ˇˇHÉ¿pπ   æ   Hâ«Ëâº  HãÖà˛ˇˇHçPHçÖ†˛ˇˇH‡   π   æ   Hâ«Ë_º  Hãî Hãïò˛ˇˇHçç†˛ˇˇHâŒHâ«Ë#ø  Hã·ì Hâ«ËIGˇˇHã“ì Hâ«ËäHˇˇêHãE¯dH+%(   tË•Gˇˇ…√Û˙UHâÂHÅÏP  HâΩ∏˝ˇˇdHã%(   HâE¯1¿Hãï∏˝ˇˇHçÖ¿˝ˇˇπ   æ   Hâ«Ë≈ª  HãÖ∏˝ˇˇHçPHçÖ¿˝ˇˇHÉ¿pπ   æ   Hâ«Ëùª  HãÖ∏˝ˇˇHçPHçÖ¿˝ˇˇH‡   π   æ   Hâ«Ësª  HãÖ∏˝ˇˇHÉ¿Hâ«ËŸEˇˇHâ¡HãÖ∏˝ˇˇHçPHçÖ¿˝ˇˇHP  æ˝   Hâ«Ë8ª  HãÖ∏˝ˇˇHÉ¿9Hâ«ËûEˇˇHâ¡HãÖ∏˝ˇˇHçP9HçÖ¿˝ˇˇH¿  æ˝   Hâ«Ë˝∫  Hãßí Hçç¿˝ˇˇHçº: HâŒHâ«Ë¡Ω  Hãáí Hâ«ËÁEˇˇHãxí Hâ«Ë(GˇˇêHãE¯dH+%(   tËCFˇˇ…√Û˙UHâÂHÅÏ0  HâΩÿ¸ˇˇdHã%(   HâE¯1¿Hç\: HâÖË¸ˇˇHãÖÿ¸ˇˇHçPHçÖ ˝ˇˇHâ∆Hâ◊ËÆ∫  HãÖÿ¸ˇˇHçPHçÖ¸ˇˇHâ∆Hâ◊Ëë∫  HãÖÿ¸ˇˇHçPHçÖP˝ˇˇπ   æ   Hâ«Ë∫  HãÖÿ¸ˇˇHçPHçÖP˝ˇˇHÉ¿pπ   æ   Hâ«ËÔπ  HãÖÿ¸ˇˇHçPHçÖP˝ˇˇH‡   π   æ   Hâ«Ë≈π  HãÖÿ¸ˇˇHçPHçÖP˝ˇˇHP  π   æ   Hâ«Ëõπ  HçÖ ˝ˇˇHçïP˝ˇˇHç∫¿  π(   Hâ¬æ
   Ëtπ  HçÖ¸ˇˇHçïP˝ˇˇHç∫0  π(   Hâ¬æ
   ËMπ  Hãˇê HãïË¸ˇˇHççP˝ˇˇHâŒHâ«Ëº  Hãﬂê Hâ«Ë7DˇˇHã–ê Hâ«ËxEˇˇêHãE¯dH+%(   tËìDˇˇ…√Û˙UHâÂHÅÏ†  HâΩh¸ˇˇdHã%(   HâE¯1¿Hç∏8 HâÖx¸ˇˇHãÖh¸ˇˇHçP^HçÖÄ¸ˇˇHâ∆Hâ◊Ë˛∏  HãÖh¸ˇˇHçPiHçÖ∞¸ˇˇHâ∆Hâ◊Ë·∏  HãÖh¸ˇˇHÉ¿Hâ«ËÒBˇˇHâ¡HãÖh¸ˇˇHçPHçÖ‡¸ˇˇæ˝   Hâ«ËV∏  HãÖh¸ˇˇHÉ¿1Hâ«ËºBˇˇHâ¡HãÖh¸ˇˇHçP1HçÖ‡¸ˇˇHÉ¿pæ˝   Hâ«Ë∏  HçÖÄ¸ˇˇHçï‡¸ˇˇHç∫‡   π(   Hâ¬æ
   Ëˆ∑  HçÖ∞¸ˇˇHçï‡¸ˇˇHç∫P  π(   Hâ¬æ
   Ëœ∑  HãÖh¸ˇˇHçPtHçÖ‡¸ˇˇH¿  π   æ   Hâ«Ë•∑  HãÖh¸ˇˇHÉ¿xHâ«ËBˇˇHâ¡HãÖh¸ˇˇHçPxHçÖ‡¸ˇˇH0  æ˝   Hâ«Ëj∑  HãÖh¸ˇˇH   Hâ«ËŒAˇˇHâ¡HãÖh¸ˇˇHçê   HçÖ‡¸ˇˇH†  æ˝   Hâ«Ë*∑  Hã‰é Hãïx¸ˇˇHçç‡¸ˇˇHâŒHâ«ËÓπ  Hãƒé Hâ«ËBˇˇHãµé Hâ«ËUCˇˇêHãE¯dH+%(   tËpBˇˇ…√Û˙UHâÂHÅÏ‡  HâΩ(˛ˇˇdHã%(   HâE¯1¿Hç£6 HâÖ8˛ˇˇHãÖ(˛ˇˇHçPDHçÖ@˛ˇˇHâ∆Hâ◊Ë€∂  HãÖ(˛ˇˇHçPOHçÖp˛ˇˇHâ∆Hâ◊Ëæ∂  Hãï(˛ˇˇHçÖ†˛ˇˇπ   æ   Hâ«ËH∂  HçÖ@˛ˇˇHçï†˛ˇˇHçzpπ(   Hâ¬æ
   Ë$∂  HçÖp˛ˇˇHçï†˛ˇˇHç∫‡   π(   Hâ¬æ
   Ë˝µ  HãÁè Hãï8˛ˇˇHçç†˛ˇˇHâŒHâ«Ë¡∏  Hã«è Hâ«ËÁ@ˇˇHã∏è Hâ«Ë(BˇˇêHãE¯dH+%(   tËCAˇˇ…√Û˙UHâÂHÅÏp  HâΩò˛ˇˇdHã%(   HâE¯1¿Hãïò˛ˇˇHçÖ†˛ˇˇπ   æ   Hâ«Ëcµ  HãÖò˛ˇˇHÉ¿Hâ«Ë…?ˇˇHâ¡HãÖò˛ˇˇHçPHçÖ†˛ˇˇHÉ¿pæ˝   Hâ«Ë*µ  HãÖò˛ˇˇHçP4HçÖ†˛ˇˇH‡   π   æ   Hâ«Ë µ  Hã¬å Hçç†˛ˇˇHç˙4 HâŒHâ«Ëƒ∑  Hã¢å Hâ«ËÍ?ˇˇHãìå Hâ«Ë+AˇˇêHãE¯dH+%(   tËF@ˇˇ…√Û˙UHâÂHÅÏ   HâΩˇˇˇdHã%(   HâE¯1¿HãïˇˇˇHçÖˇˇˇπ   æ   Hâ«Ëf¥  HãÖˇˇˇHçPHçÖˇˇˇHÉ¿pπ   æ   Hâ«Ë>¥  Hãå HççˇˇˇHçK4 HâŒHâ«Ë∑  Hãã Hâ«Ë(?ˇˇHã·ã Hâ«Ëi@ˇˇêHãE¯dH+%(   tËÑ?ˇˇ…√Û˙UHâÂHÅÏ   HâΩˇˇˇdHã%(   HâE¯1¿HãïˇˇˇHçÖˇˇˇπ   æ   Hâ«Ë§≥  HãÖˇˇˇHÉ¿Hâ«Ë
>ˇˇHâ¡HãÖˇˇˇHçPHçÖˇˇˇHÉ¿pæ˝   Hâ«Ëk≥  Hã5ã HççˇˇˇHçÇ3 HâŒHâ«Ë/∂  Hãã Hâ«ËU>ˇˇHãã Hâ«Ëñ?ˇˇêHãE¯dH+%(   tË±>ˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hç&3 HâÖˇˇˇHãÖ¯˛ˇˇHâ«ËM=ˇˇHâ¡Hãï¯˛ˇˇHçÖˇˇˇæ˝   Hâ«Ë∂≤  HãÖ¯˛ˇˇHçPtHçÖˇˇˇHÉ¿pπ   æ   Hâ«Ëé≤  HãÄå HãïˇˇˇHççˇˇˇHâŒHâ«ËRµ  Hã`å Hâ«Ëx=ˇˇHãQå Hâ«Ëπ>ˇˇêHãE¯dH+%(   tË‘=ˇˇ…√Û˙UHâÂHÅÏ@  HâΩ»¸ˇˇdHã%(   HâE¯1¿HçS2 HâÖÿ¸ˇˇHãÖ»¸ˇˇHâ«Ëp<ˇˇHâ¡Hãï»¸ˇˇHçÖ‡¸ˇˇæ˝   Hâ«ËŸ±  HãÖ»¸ˇˇHÉ¿-Hâ«Ë?<ˇˇHâ¡HãÖ»¸ˇˇHçP-HçÖ‡¸ˇˇHÉ¿pæ˝   Hâ«Ë†±  HãÖ»¸ˇˇHçê∏  HçÖ‡¸ˇˇH‡   π   æ   Hâ«Ës±  HãÖ»¸ˇˇHçêº  HçÖ‡¸ˇˇHP  π   æ   Hâ«ËF±  HãÖ»¸ˇˇHçê¿  HçÖ‡¸ˇˇH¿  π   æ   Hâ«Ë±  HãÖ»¸ˇˇHçêƒ  HçÖ‡¸ˇˇH0  π   æ   Hâ«ËÏ∞  HãÖ»¸ˇˇHçê»  HçÖ‡¸ˇˇH†  π   æ   Hâ«Ëø∞  Hã±á Hãïÿ¸ˇˇHçç‡¸ˇˇHâŒHâ«ËÉ≥  Hãëá Hâ«Ë©;ˇˇHãÇá Hâ«ËÍ<ˇˇêHãE¯dH+%(   tË<ˇˇ…√Û˙UHâÂHÅÏ¿  HâΩH˚ˇˇdHã%(   HâE¯1¿Hçê0 HâÖX˚ˇˇHãÖH˚ˇˇHçê  HçÖ`˚ˇˇHâ∆Hâ◊Ë‘∞  HãÖH˚ˇˇH  Hâ«Ë{:ˇˇHâ¡HãÖH˚ˇˇHçê  HçÖê˚ˇˇæ˝   Hâ«Ë›Ø  HãÖH˚ˇˇH8  Hâ«ËA:ˇˇHâ¡HãÖH˚ˇˇHçê8  HçÖê˚ˇˇHÉ¿pæ˝   Hâ«ËüØ  HãÖH˚ˇˇHÉ¿Hâ«Ë:ˇˇHâ¡HãÖH˚ˇˇHçPHçÖê˚ˇˇH‡   æ˝   Hâ«ËdØ  HãÖH˚ˇˇHÉ¿1Hâ«Ë 9ˇˇHâ¡HãÖH˚ˇˇHçP1HçÖê˚ˇˇHP  æ˝   Hâ«Ë)Ø  HãÖH˚ˇˇHÉ¿^Hâ«Ëè9ˇˇHâ¡HãÖH˚ˇˇHçP^HçÖê˚ˇˇH¿  æ˝   Hâ«ËÓÆ  HãÖH˚ˇˇHÉ¿nHâ«ËT9ˇˇHâ¡HãÖH˚ˇˇHçPnHçÖê˚ˇˇH0  æ˝   Hâ«Ë≥Æ  HãÖH˚ˇˇHÉ¿~Hâ«Ë9ˇˇHâ¡HãÖH˚ˇˇHçP~HçÖê˚ˇˇH†  æ˝   Hâ«ËxÆ  HãÖH˚ˇˇH´   Hâ«Ë‹8ˇˇHâ¡HãÖH˚ˇˇHçê´   HçÖê˚ˇˇH  æ˝   Hâ«Ë8Æ  HãÖH˚ˇˇHÿ   Hâ«Ëú8ˇˇHâ¡HãÖH˚ˇˇHçêÿ   HçÖê˚ˇˇHÄ  æ˝   Hâ«Ë¯≠  HçÖ`˚ˇˇHçïê˚ˇˇHç∫  π(   Hâ¬æ   Ë—≠  Hã”Ñ HãïX˚ˇˇHççê˚ˇˇHâŒHâ«Ëï∞  Hã≥Ñ Hâ«Ëª8ˇˇHã§Ñ Hâ«Ë¸9ˇˇêHãE¯dH+%(   tË9ˇˇ…√Û˙UHâÂHÅÏÄ  HâΩà˚ˇˇdHã%(   HâE¯1¿Hçµ- HâÖò˚ˇˇHãÖà˚ˇˇHçêï   HçÖ†˚ˇˇHâ∆Hâ◊Ë≠  HãÖà˚ˇˇHçê†   HçÖ–˚ˇˇHâ∆Hâ◊Ë_≠  HãÖà˚ˇˇHÉ¿Hâ«Ëo7ˇˇHâ¡HãÖà˚ˇˇHçPHçÖ ¸ˇˇæ˝   Hâ«Ë‘¨  HãÖà˚ˇˇHÉ¿1Hâ«Ë:7ˇˇHâ¡HãÖà˚ˇˇHçP1HçÖ ¸ˇˇHÉ¿pæ˝   Hâ«Ëõ¨  HãÖà˚ˇˇHÉ¿^Hâ«Ë7ˇˇHâ¡HãÖà˚ˇˇHçP^HçÖ ¸ˇˇH‡   æ˝   Hâ«Ë`¨  HãÖà˚ˇˇHã   Hâ«Ëƒ6ˇˇHâ¡HãÖà˚ˇˇHçêã   HçÖ ¸ˇˇHP  æ˝   Hâ«Ë ¨  HçÖ†˚ˇˇHçï ¸ˇˇHç∫¿  π(   Hâ¬æ
   Ë˘´  HçÖ–˚ˇˇHçï ¸ˇˇHç∫0  π(   Hâ¬æ
   Ë“´  HãÖà˚ˇˇHçê¨   HçÖ ¸ˇˇH†  π   æ   Hâ«Ë•´  HãÖà˚ˇˇHçê∞   HçÖ ¸ˇˇH  π   æ   Hâ«Ëx´  HãÖà˚ˇˇHçê¥   HçÖ ¸ˇˇHÄ  π   æ   Hâ«ËK´  HãEÇ Hãïò˚ˇˇHçç ¸ˇˇHâŒHâ«ËÆ  Hã%Ç Hâ«Ë56ˇˇHãÇ Hâ«Ëv7ˇˇêHãE¯dH+%(   tËë6ˇˇ…√Û˙UHâÂHÅÏ‡  HâΩ(˚ˇˇdHã%(   HâE¯1¿Hç;+ HâÖ8˚ˇˇHãÖ(˚ˇˇHçPHçÖ@˚ˇˇHâ∆Hâ◊Ë¸™  HãÖ(˚ˇˇHçPHçÖp˚ˇˇHâ∆Hâ◊Ëﬂ™  HãÖ(˚ˇˇHçP"HçÖ†˚ˇˇHâ∆Hâ◊Ë)´  HãÖ(˚ˇˇHçP(HçÖ–˚ˇˇHâ∆Hâ◊Ë´  HãÖ(˚ˇˇHçPHçÖ ¸ˇˇπ   æ   Hâ«Ë+™  HãÖ(˚ˇˇHçPHçÖ ¸ˇˇHÉ¿pπ   æ   Hâ«Ë™  HçÖ@˚ˇˇHçï ¸ˇˇHç∫‡   π(   Hâ¬æ
   Ë‹©  HçÖp˚ˇˇHçï ¸ˇˇHç∫P  π(   Hâ¬æ
   Ëµ©  HçÖ†˚ˇˇHçï ¸ˇˇHç∫¿  π(   Hâ¬æ   Ëé©  HçÖ–˚ˇˇHçï ¸ˇˇHç∫0  π(   Hâ¬æ   Ëg©  HãÖ(˚ˇˇHçP.HçÖ ¸ˇˇH†  π   æ   Hâ«Ë=©  HãÖ(˚ˇˇHçP0HçÖ ¸ˇˇH  π   æ   Hâ«Ë©  HãÖ(˚ˇˇHÉ¿4Hâ«Ëy3ˇˇHâ¡HãÖ(˚ˇˇHçP4HçÖ ¸ˇˇHÄ  æ˝   Hâ«Ëÿ®  Hã‚ Hãï8˚ˇˇHçç ¸ˇˇHâŒHâ«Ëú´  Hã¬ Hâ«Ë¬3ˇˇHã≥ Hâ«Ë5ˇˇêHãE¯dH+%(   tË4ˇˇ…√Û˙UHâÂHÅÏ  HâΩ˛ˇˇdHã%(   HâE¯1¿Hç’( HâÖ(˛ˇˇHãï˛ˇˇHçÖ0˛ˇˇπ   æ   Hâ«Ë0®  HãÖ˛ˇˇHçPHçÖ0˛ˇˇHÉ¿pπ   æ   Hâ«Ë®  HãÖ˛ˇˇHÉ¿Hâ«Ën2ˇˇHâ¡HãÖ˛ˇˇHçPHçÖ0˛ˇˇH‡   æ˝   Hâ«ËÕß  HãÖ˛ˇˇHçP8HçÖ0˛ˇˇHP  π   æ   Hâ«Ë£ß  Hãµ~ Hãï(˛ˇˇHçç0˛ˇˇHâŒHâ«Ëg™  Hãï~ Hâ«Ëç2ˇˇHãÜ~ Hâ«ËŒ3ˇˇêHãE¯dH+%(   tËÈ2ˇˇ…√Û˙UHâÂHÅÏÄ  HâΩà˛ˇˇdHã%(   HâE¯1¿Hç¨' HâÖò˛ˇˇHãÖà˛ˇˇHâ«ËÖ1ˇˇHâ¡Hãïà˛ˇˇHçÖ†˛ˇˇæ˝   Hâ«ËÓ¶  HãÖà˛ˇˇHÉ¿-Hâ«ËT1ˇˇHâ¡HãÖà˛ˇˇHçP-HçÖ†˛ˇˇHÉ¿pæ˝   Hâ«Ëµ¶  HãÖà˛ˇˇHÉ¿ZHâ«Ë1ˇˇHâ¡HãÖà˛ˇˇHçPZHçÖ†˛ˇˇH‡   æ˝   Hâ«Ëz¶  Hãî} Hãïò˛ˇˇHçç†˛ˇˇHâŒHâ«Ë>©  Hãt} Hâ«Ëd1ˇˇHãe} Hâ«Ë•2ˇˇêHãE¯dH+%(   tË¿1ˇˇ…√Û˙UHâÂHÅÏ`  HâΩ®˝ˇˇdHã%(   HâE¯1¿Hçì& HâÖ∏˝ˇˇHãÖ®˝ˇˇHÉ¿Hâ«ËX0ˇˇHâ¡HãÖ®˝ˇˇHçPHçÖ¿˝ˇˇæ˝   Hâ«ËΩ•  HãÖ®˝ˇˇH∏   Hâ«Ë!0ˇˇHâ¡HãÖ®˝ˇˇHçê∏   HçÖ¿˝ˇˇHÉ¿pæ˝   Hâ«Ë•  HãÖ®˝ˇˇHÉ¿^Hâ«ËÂ/ˇˇHâ¡HãÖ®˝ˇˇHçP^HçÖ¿˝ˇˇH‡   æ˝   Hâ«ËD•  HãÖ®˝ˇˇHÉ¿1Hâ«Ë™/ˇˇHâ¡HãÖ®˝ˇˇHçP1HçÖ¿˝ˇˇHP  æ˝   Hâ«Ë	•  HãÖ®˝ˇˇHã   Hâ«Ëm/ˇˇHâ¡HãÖ®˝ˇˇHçêã   HçÖ¿˝ˇˇH¿  æ¸   Hâ«Ë…§  HãÎ{ Hãï∏˝ˇˇHçç¿˝ˇˇHâŒHâ«Ëçß  HãÀ{ Hâ«Ë≥/ˇˇHãº{ Hâ«ËÙ0ˇˇêHãE¯dH+%(   tË0ˇˇ…√Û˙UHâÂHÅÏ`  HâΩ®˝ˇˇdHã%(   HâE¯1¿HçÌ$ HâÖ∏˝ˇˇHãÖ®˝ˇˇHÉ¿-Hâ«Ëß.ˇˇHâ¡HãÖ®˝ˇˇHçP-HçÖ¿˝ˇˇæ˝   Hâ«Ë§  HãÖ®˝ˇˇHÉ¿ZHâ«Ër.ˇˇHâ¡HãÖ®˝ˇˇHçPZHçÖ¿˝ˇˇHÉ¿pæ˝   Hâ«Ë”£  HãÖ®˝ˇˇHÉ¿jHâ«Ë9.ˇˇHâ¡HãÖ®˝ˇˇHçPjHçÖ¿˝ˇˇH‡   æ˝   Hâ«Ëò£  HãÖ®˝ˇˇHó   Hâ«Ë¸-ˇˇHâ¡HãÖ®˝ˇˇHçêó   HçÖ¿˝ˇˇHP  æ˝   Hâ«ËX£  HãÖ®˝ˇˇHâ«Ë¬-ˇˇHâ¬HãÖ®˝ˇˇHçç¿˝ˇˇHçπ¿  Hâ—Hâ¬æ˝   Ë!£  HãSz Hãï∏˝ˇˇHçç¿˝ˇˇHâŒHâ«ËÂ•  Hã3z Hâ«Ë.ˇˇHã$z Hâ«ËL/ˇˇêHãE¯dH+%(   tËg.ˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçU# HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«Ëy¢  HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pπ   æ   Hâ«ËQ¢  Hãìy HãïˇˇˇHççˇˇˇHâŒHâ«Ë•  Hãsy Hâ«Ë;-ˇˇHãdy Hâ«Ë|.ˇˇêHãE¯dH+%(   tËó-ˇˇ…√Û˙UHâÂHÅÏP  HâΩ∏˚ˇˇHâµ∞˚ˇˇdHã%(   HâE¯1¿Hçå" HâÖ»˚ˇˇHãÖ∞˚ˇˇHçê·   HçÖ–˚ˇˇHâ∆Hâ◊Ë¯°  HãÖ∞˚ˇˇHâ«Ë,ˇˇHâ¡Hãï∞˚ˇˇHçÖ ¸ˇˇæ˝   Hâ«Ëu°  HãÖ∞˚ˇˇHÉ¿-Hâ«Ë€+ˇˇHâ¡HãÖ∞˚ˇˇHçP-HçÖ ¸ˇˇHÉ¿pæ˝   Hâ«Ë<°  HãÖ∞˚ˇˇHÉ¿ZHâ«Ë¢+ˇˇHâ¡HãÖ∞˚ˇˇHçPZHçÖ ¸ˇˇH‡   æ˝   Hâ«Ë°  HãÖ∞˚ˇˇHá   Hâ«Ëe+ˇˇHâ¡HãÖ∞˚ˇˇHçêá   HçÖ ¸ˇˇHP  æ˝   Hâ«Ë¡†  HãÖ∞˚ˇˇH¥   Hâ«Ë%+ˇˇHâ¡HãÖ∞˚ˇˇHçê¥   HçÖ ¸ˇˇH¿  æ˝   Hâ«ËÅ†  HçÖ–˚ˇˇHçï ¸ˇˇHç∫0  π(   Hâ¬æ
   ËZ†  HãÖ∞˚ˇˇHÏ   Hâ«Ëæ*ˇˇHâ¡HãÖ∞˚ˇˇHçêÏ   HçÖ ¸ˇˇH†  æ˝   Hâ«Ë†  HãÖ∞˚ˇˇH¸   Hâ«Ë~*ˇˇHâ¡HãÖ∞˚ˇˇHçê¸   HçÖ ¸ˇˇH  æ˝   Hâ«Ë⁄ü  HãÖ∏˚ˇˇHÉ¿-Hâ«Ë@*ˇˇHâ¡HãÖ∏˚ˇˇHçP-HçÖ ¸ˇˇHÄ  æ˝   Hâ«Ëüü  Hã9w Hãï»˚ˇˇHçç ¸ˇˇHâŒHâ«Ëc¢  Hãw Hâ«Ëâ*ˇˇHã
w Hâ«Ë +ˇˇêHãE¯dH+%(   tËÂ*ˇˇ…√Û˙UHâÂHÅÏÄ  HâΩà˛ˇˇdHã%(   HâE¯1¿Hçˆ HâÖò˛ˇˇHãÖà˛ˇˇHâ«ËÅ)ˇˇHâ¡Hãïà˛ˇˇHçÖ†˛ˇˇæ˝   Hâ«ËÍû  HãÖà˛ˇˇHÉ¿-Hâ«ËP)ˇˇHâ¡HãÖà˛ˇˇHçP-HçÖ†˛ˇˇHÉ¿pæ˝   Hâ«Ë±û  HãÖà˛ˇˇHçP8HçÖ†˛ˇˇH‡   π   æ   Hâ«Ëáû  Hã¡u Hãïò˛ˇˇHçç†˛ˇˇHâŒHâ«ËK°  Hã°u Hâ«Ëq)ˇˇHãíu Hâ«Ë≤*ˇˇêHãE¯dH+%(   tËÕ)ˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçÍ HâÖˇˇˇHãÖ¯˛ˇˇHÉ¿1Hâ«Ëe(ˇˇHâ¡HãÖ¯˛ˇˇHçP1HçÖˇˇˇæ˝   Hâ«Ë ù  HãÖ¯˛ˇˇHÉ¿Hâ«Ë0(ˇˇHâ¡HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pæ¸   Hâ«Ëëù  Hãªt HãïˇˇˇHççˇˇˇHâŒHâ«ËU†  Hãõt Hâ«Ë{(ˇˇHãåt Hâ«Ëº)ˇˇêHãE¯dH+%(   tË◊(ˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hç HâÖˇˇˇHãÖ¯˛ˇˇHÉ¿Hâ«Ëo'ˇˇHâ¡HãÖ¯˛ˇˇHçPHçÖˇˇˇæ˝   Hâ«Ë‘ú  HãÖ¯˛ˇˇHÉ¿1Hâ«Ë:'ˇˇHâ¡HãÖ¯˛ˇˇHçP1HçÖˇˇˇHÉ¿pæ˝   Hâ«Ëõú  HãÂs HãïˇˇˇHççˇˇˇHâŒHâ«Ë_ü  Hã≈s Hâ«ËÖ'ˇˇHã∂s Hâ«Ë∆(ˇˇêHãE¯dH+%(   tË·'ˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hç HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«ËÛõ  HãÖ¯˛ˇˇHÉ¿Hâ«ËY&ˇˇHâ¡HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pæ˝   Hâ«Ë∫õ  Hãs HãïˇˇˇHççˇˇˇHâŒHâ«Ë~û  HãÏr Hâ«Ë§&ˇˇHã›r Hâ«ËÂ'ˇˇêHãE¯dH+%(   tË 'ˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçF HâÖˇˇˇHãÖ¯˛ˇˇHçPHçÖˇˇˇπ   æ   Hâ«Ëõ  HãÖ¯˛ˇˇHçïˇˇˇHçzpπ   Hâ¬æ   ËÍö  HãDr HãïˇˇˇHççˇˇˇHâŒHâ«ËÆù  Hã$r Hâ«Ë‘%ˇˇHãr Hâ«Ë'ˇˇêHãE¯dH+%(   tË0&ˇˇ…√Û˙UHâÂHÅÏ–  HâΩ8˝ˇˇHâµ0˝ˇˇdHã%(   HâE¯1¿Hçz HâÖH˝ˇˇHãÖ8˝ˇˇHâ«Ë≈$ˇˇHâ¡Hãï8˝ˇˇHçÖP˝ˇˇæ˝   Hâ«Ë.ö  HãÖ8˝ˇˇHÉ¿-Hâ«Ëî$ˇˇHâ¡HãÖ8˝ˇˇHçP-HçÖP˝ˇˇHÉ¿pæ˝   Hâ«Ëıô  HãÖ8˝ˇˇHµ  Hâ«ËY$ˇˇHâ¡HãÖ8˝ˇˇHçêµ  HçÖP˝ˇˇH‡   æ˝   Hâ«Ëµô  HãÖ8˝ˇˇHçê‰  HçÖP˝ˇˇHP  π   æ   Hâ«Ëàô  HãÖ0˝ˇˇHâ«ËÚ#ˇˇHâ¬HãÖ0˝ˇˇHççP˝ˇˇHçπ¿  Hâ—Hâ¬æ˝   ËQô  HãÖ0˝ˇˇHÉ¿ZHâ«Ë∑#ˇˇHâ¡HãÖ0˝ˇˇHçPZHçÖP˝ˇˇH0  æ˝   Hâ«Ëô  Hãxp HçïP˝ˇˇHâ÷Hâ«Ë∆&ˇˇÑ¿tHã[p Hç Hâ÷Hâ«Ë:ñ  ÎLHã@p Hâ«Ë8#ˇˇÖ¿tHã-p Hç Hâ÷Hâ«Ëñ  ÎHãp Hâ«Ë∫#ˇˇHãp Hâ«Ë˚$ˇˇHãE¯dH+%(   tË$ˇˇ…√Û˙UHâÂHÅÏ†  HâΩh¸ˇˇdHã%(   HâE¯1¿Hç» HâÖx¸ˇˇHãÖh¸ˇˇHçP7HçÖÄ¸ˇˇHâ∆Hâ◊ËÇò  HãÖh¸ˇˇHçPxHçÖ∞¸ˇˇHâ∆Hâ◊Ëeò  HãÖh¸ˇˇHâ«Ëy"ˇˇHâ¡Hãïh¸ˇˇHçÖ‡¸ˇˇæ˝   Hâ«Ë‚ó  HãÖh¸ˇˇHÉ¿
Hâ«ËH"ˇˇHâ¡HãÖh¸ˇˇHçP
HçÖ‡¸ˇˇHÉ¿pæ˝   Hâ«Ë©ó  HãÖh¸ˇˇHÉ¿BHâ«Ë"ˇˇHâ¡HãÖh¸ˇˇHçPBHçÖ‡¸ˇˇH‡   æ˝   Hâ«Ënó  HãÖh¸ˇˇHçPpHçÖ‡¸ˇˇHP  π   æ   Hâ«ËDó  HãÖh¸ˇˇHçPtHçÖ‡¸ˇˇH¿  π   æ   Hâ«Ëó  HçÖÄ¸ˇˇHçï‡¸ˇˇHç∫0  π(   Hâ¬æ
   ËÛñ  HçÖ∞¸ˇˇHçï‡¸ˇˇHç∫†  π(   Hâ¬æ
   ËÃñ  Hã6n Hãïx¸ˇˇHçç‡¸ˇˇHâŒHâ«Ëêô  Hãn Hâ«Ë∂!ˇˇHãn Hâ«Ë˜"ˇˇêHãE¯dH+%(   tË"ˇˇ…√Û˙UHâÂHÅÏ–  HâΩ8˝ˇˇdHã%(   HâE¯1¿HçŒ HâÖH˝ˇˇHãÖ8˝ˇˇHâ«ËÆ ˇˇHâ¡Hãï8˝ˇˇHçÖP˝ˇˇæ˝   Hâ«Ëñ  HãÖ8˝ˇˇHçP0HçÖP˝ˇˇHÉ¿pπ   æ   Hâ«ËÔï  HãÖ8˝ˇˇHçP4HçÖP˝ˇˇH‡   π   æ   Hâ«Ë≈ï  HãÖ8˝ˇˇHÉ¿8Hâ«Ë+ ˇˇHâ¡HãÖ8˝ˇˇHçP8HçÖP˝ˇˇHP  æ˝   Hâ«Ëäï  HãÖ8˝ˇˇHçê¿  HçÖP˝ˇˇH¿  π   æ   Hâ«Ë]ï  HãÖ8˝ˇˇHçêƒ  HçÖP˝ˇˇH0  π   æ   Hâ«Ë0ï  Hã¢l HãïH˝ˇˇHççP˝ˇˇHâŒHâ«ËÙó  HãÇl Hâ«Ë ˇˇHãsl Hâ«Ë[!ˇˇêHãE¯dH+%(   tËv ˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçC HâÖˇˇˇHãÖ¯˛ˇˇHÉ¿Hâ«ËˇˇHâ¡HãÖ¯˛ˇˇHçPHçÖˇˇˇæ˝   Hâ«Ësî  HãÖ¯˛ˇˇHÉ¿1Hâ«ËŸˇˇHâ¡HãÖ¯˛ˇˇHçP1HçÖˇˇˇHÉ¿pæ˝   Hâ«Ë:î  Hã¥k HãïˇˇˇHççˇˇˇHâŒHâ«Ë˛ñ  Hãîk Hâ«Ë$ˇˇHãÖk Hâ«Ëe ˇˇêHãE¯dH+%(   tËÄˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hç\ HâÖˇˇˇHãÖ¯˛ˇˇHÉ¿Hâ«ËˇˇHâ¡HãÖ¯˛ˇˇHçPHçÖˇˇˇæ˝   Hâ«Ë}ì  HãÖ¯˛ˇˇHÉ¿1Hâ«Ë„ˇˇHâ¡HãÖ¯˛ˇˇHçP1HçÖˇˇˇHÉ¿pæ˝   Hâ«ËDì  Hã∆j HãïˇˇˇHççˇˇˇHâŒHâ«Ëñ  Hã¶j Hâ«Ë.ˇˇHãój Hâ«ËoˇˇêHãE¯dH+%(   tËäˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hçu HâÖˇˇˇHãÖ¯˛ˇˇHÉ¿-Hâ«Ë"ˇˇHâ¡HãÖ¯˛ˇˇHçP-HçÖˇˇˇæ˝   Hâ«Ëáí  HãÖ¯˛ˇˇHâ«ËÒˇˇHâ¬HãÖ¯˛ˇˇHççˇˇˇHçypHâ—Hâ¬æ˝   ËSí  Hã›i HãïˇˇˇHççˇˇˇHâŒHâ«Ëï  HãΩi Hâ«Ë=ˇˇHãÆi Hâ«Ë~ˇˇêHãE¯dH+%(   tËôˇˇ…√Û˙UHâÂHÅÏ  HâΩ˛ˇˇdHã%(   HâE¯1¿Hçí HâÖ(˛ˇˇHãÖ˛ˇˇHâ«Ë5ˇˇHâ¡Hãï˛ˇˇHçÖ0˛ˇˇæ˝   Hâ«Ëûë  Hã‡i Hãï(˛ˇˇHçç0˛ˇˇHâŒHâ«Ëbî  HÉ¯ˇÑ—   HãÖ˛ˇˇHçêµ  HçÖ0˛ˇˇπ-   æ˝   Hâ«ËMë  HãÖ˛ˇˇHçP-HçÖ0˛ˇˇHÉ¿pπà  æ˝   Hâ«Ë%ë  HãÖ˛ˇˇHçê‰  HçÖ0˛ˇˇH‡   π   æ   Hâ«Ë¯ê  HãÖ˛ˇˇHçêË  HçÖ0˛ˇˇHP  π   æ   Hâ«ËÀê  Hãi Hãï(˛ˇˇHçç0˛ˇˇHâŒHâ«ËIî  âÖ$˛ˇˇÎêHã‰h Hâ«Ë¨ˇˇHã’h Hâ«ËÌˇˇãÖ$˛ˇˇHãU¯dH+%(   tËˇˇ…√Û˙UHâÂHÅÏÄ  HâΩà˛ˇˇdHã%(   HâE¯1¿Hç	 HâÖò˛ˇˇHãïà˛ˇˇHçÖ†˛ˇˇπ   æ   Hâ«Ëê  HãÖà˛ˇˇHçPHçÖ†˛ˇˇHÉ¿pπ   æ   Hâ«ËÌè  Hã'h Hãïò˛ˇˇHçç†˛ˇˇHâŒHâ«Ë±í  HÉ¯ˇÑû   HãÖà˛ˇˇHçPHçÖ†˛ˇˇπ-   æ˝   Hâ«Ëüè  HãÖà˛ˇˇHçP9HçÖ†˛ˇˇHÉ¿pπ-   æ˝   Hâ«Ëwè  HãÖà˛ˇˇHçPHçÖ†˛ˇˇH‡   π   æ   Hâ«ËMè  Hãág Hãïò˛ˇˇHçç†˛ˇˇHâŒHâ«ËÀí  âÖî˛ˇˇÎêHã^g Hâ«Ë.ˇˇHãOg Hâ«ËoˇˇãÖî˛ˇˇHãU¯dH+%(   tËÖˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hçó HâÖˇˇˇHãÖ¯˛ˇˇHâ«Ë!ˇˇHâ¡Hãï¯˛ˇˇHçÖˇˇˇæ˝   Hâ«Ëäé  Hãºf HãïˇˇˇHççˇˇˇHâŒHâ«ËNë  HÉ¯ˇttHãÖ¯˛ˇˇHçP-HçÖˇˇˇπ   æ˝   Hâ«Ë@é  HãÖ¯˛ˇˇHçP8HçÖˇˇˇHÉ¿pπ   æ   Hâ«Ëé  HãJf HãïˇˇˇHççˇˇˇHâŒHâ«Ëñë  âÖˇˇˇÎêHã!f Hâ«Ë˘ˇˇHãf Hâ«Ë:ˇˇãÖˇˇˇHãU¯dH+%(   tËPˇˇ…√Û˙UHâÂHÅÏÄ  HâΩà˛ˇˇdHã%(   HâE¯1¿Hçn HâÖò˛ˇˇHãÖà˛ˇˇHçPHçÖ†˛ˇˇπ   æ   Hâ«Ë^ç  HãÖà˛ˇˇHçï†˛ˇˇHçzpπ-   Hâ¬æ   Ë:ç  Hãde Hãïò˛ˇˇHçç†˛ˇˇHâŒHâ«Ë˛è  HÉ¯ˇÑû   HãÖà˛ˇˇHçP5HçÖ†˛ˇˇπ-   æ˝   Hâ«ËÏå  HãÖà˛ˇˇHçPHçÖ†˛ˇˇHÉ¿pπ-   æ˝   Hâ«Ëƒå  HãÖà˛ˇˇHçPbHçÖ†˛ˇˇH‡   πà  æ˝   Hâ«Ëöå  Hãƒd Hãïò˛ˇˇHçç†˛ˇˇHâŒHâ«Ëê  âÖî˛ˇˇÎêHãõd Hâ«Ë{ˇˇHãåd Hâ«ËºˇˇãÖî˛ˇˇHãU¯dH+%(   tË“ˇˇ…√Û˙UHâÂHÅÏÄ  HâΩà˛ˇˇdHã%(   HâE¯1¿Hç˚ HâÖò˛ˇˇHãïà˛ˇˇHçÖ†˛ˇˇπ   æ   Hâ«Ë‰ã  HãÖà˛ˇˇHçPHçÖ†˛ˇˇHÉ¿pπ   æ   Hâ«Ëºã  Hãﬁc Hãïò˛ˇˇHçç†˛ˇˇHâŒHâ«ËÄé  HÉ¯ˇÑ°   HãÖà˛ˇˇHçPHçÖ†˛ˇˇπ-   æ˝   Hâ«Ënã  HãÖà˛ˇˇHçP5HçÖ†˛ˇˇHÉ¿pπà  æ˝   Hâ«ËFã  HãÖà˛ˇˇHçêΩ  HçÖ†˛ˇˇH‡   π-   æ¸   Hâ«Ëã  Hã;c Hãïò˛ˇˇHçç†˛ˇˇHâŒHâ«Ëóé  âÖî˛ˇˇÎêHãc Hâ«Ë˙ˇˇHãc Hâ«Ë;ˇˇãÖî˛ˇˇHãU¯dH+%(   tËQˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçÖ HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«Ëcä  HãÖ¯˛ˇˇHÉ¿Hâ«Ë…ˇˇHâ¡HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pæ˝   Hâ«Ë*ä  HãDb HãïˇˇˇHççˇˇˇHâŒHâ«ËÓå  HÉ¯ˇtwHãÖ¯˛ˇˇHçP1HçÖˇˇˇπà  æ˝   Hâ«Ë‡â  HãÖ¯˛ˇˇHçêπ  HçÖˇˇˇHÉ¿pπ-   æ¸   Hâ«Ëµâ  Hãœa HãïˇˇˇHççˇˇˇHâŒHâ«Ë3ç  âÖˇˇˇÎêHã¶a Hâ«ËñˇˇHãóa Hâ«Ë◊ˇˇãÖˇˇˇHãU¯dH+%(   tËÌˇˇ…√Û˙UHâÂHÅÏ  HâΩ˛ˇˇdHã%(   HâE¯1¿Hç, HâÖ(˛ˇˇHãÖ˛ˇˇHâ«ËâˇˇHâ¡Hãï˛ˇˇHçÖ0˛ˇˇæ˝   Hâ«ËÚà  Hãa Hãï(˛ˇˇHçç0˛ˇˇHâŒHâ«Ë∂ã  HÉ¯ˇÑÀ   HãÖ˛ˇˇHçPjHçÖ0˛ˇˇπ-   æ˝   Hâ«Ë§à  HãÖ˛ˇˇHçêó   HçÖ0˛ˇˇHÉ¿pπ-   æ˝   Hâ«Ëyà  HãÖ˛ˇˇHçP-HçÖ0˛ˇˇH‡   π-   æ˝   Hâ«ËOà  HãÖ˛ˇˇHçPZHçÖ0˛ˇˇHP  π   æ˝   Hâ«Ë%à  Hã7` Hãï(˛ˇˇHçç0˛ˇˇHâŒHâ«Ë£ã  âÖ$˛ˇˇÎêHã` Hâ«ËˇˇHãˇ_ Hâ«ËGˇˇãÖ$˛ˇˇHãU¯dH+%(   tË]ˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hç¨	 HâÖˇˇˇHãÖ¯˛ˇˇHâ«Ë˘ˇˇHâ¡Hãï¯˛ˇˇHçÖˇˇˇæ˝   Hâ«Ëbá  HãÖ¯˛ˇˇHÉ¿-Hâ«Ë»ˇˇHâ¡HãÖ¯˛ˇˇHçP-HçÖˇˇˇHÉ¿pæ˝   Hâ«Ë)á  Hã3_ HãïˇˇˇHççˇˇˇHâŒHâ«ËÌâ  HÉ¯ˇtwHãÖ¯˛ˇˇHçPZHçÖˇˇˇπ-   æ˝   Hâ«ËﬂÜ  HãÖ¯˛ˇˇHçêá   HçÖˇˇˇHÉ¿pπ   æ˝   Hâ«Ë¥Ü  Hãæ^ HãïˇˇˇHççˇˇˇHâŒHâ«Ë2ä  âÖˇˇˇÎêHãï^ Hâ«ËïˇˇHãÜ^ Hâ«Ë÷ˇˇãÖˇˇˇHãU¯dH+%(   tËÏˇˇ…√Û˙UHâÂHÅÏ0  HâΩÿ¸ˇˇdHã%(   HâE¯1¿HçI HâÖË¸ˇˇHãÖÿ¸ˇˇHçPHçÖ¸ˇˇHâ∆Hâ◊ËWÜ  HãÖÿ¸ˇˇHçPHçÖ ˝ˇˇHâ∆Hâ◊Ë:Ü  Hãïÿ¸ˇˇHçÖP˝ˇˇπ   æ   Hâ«ËƒÖ  Hã∆] HãïË¸ˇˇHççP˝ˇˇHâŒHâ«Ëàà  HÉ¯ˇÑY  HãÖÿ¸ˇˇHçPHçÖP˝ˇˇπ   æ   Hâ«ËvÖ  HãÖÿ¸ˇˇHçPHçÖP˝ˇˇHÉ¿pπ   æ   Hâ«ËNÖ  HãÖÿ¸ˇˇHçPHçÖP˝ˇˇH‡   π   æ   Hâ«Ë$Ö  HãÖÿ¸ˇˇHçPHçÖP˝ˇˇHP  π   æ   Hâ«Ë˙Ñ  HçÖ¸ˇˇHçïP˝ˇˇHç∫¿  π(   Hâ¬æ
   Ë”Ñ  HçÖ ˝ˇˇHçïP˝ˇˇHç∫0  π(   Hâ¬æ
   Ë¨Ñ  HãÆ\ HãïË¸ˇˇHççP˝ˇˇHâŒHâ«Ë*à  âÖ‰¸ˇˇÉΩ‰¸ˇˇˇt?HãÖÿ¸ˇˇHçPHçÖ¸ˇˇHâ÷Hâ«ËëÜ  HãÖÿ¸ˇˇHçPHçÖ ˝ˇˇHâ÷Hâ«ËtÜ  ÎêÎêHã?\ Hâ«ËGˇˇHã0\ Hâ«ËàˇˇãÖ‰¸ˇˇHãU¯dH+%(   tËûˇˇ…√Û˙UHâÂHÅÏ`  HâΩ®˝ˇˇdHã%(   HâE¯1¿Hç HâÖ∏˝ˇˇHãÖ®˝ˇˇHâ«Ë:ˇˇHâ¡Hãï®˝ˇˇHçÖ¿˝ˇˇæ˝   Hâ«Ë£É  Hãù[ Hãï∏˝ˇˇHçç¿˝ˇˇHâŒHâ«ËgÜ  HÉ¯ˇÑ¯   HãÖ®˝ˇˇHçP0HçÖ¿˝ˇˇπ   æ   Hâ«ËUÉ  HãÖ®˝ˇˇHçP4HçÖ¿˝ˇˇHÉ¿pπ   æ   Hâ«Ë-É  HãÖ®˝ˇˇHçP8HçÖ¿˝ˇˇH‡   πà  æ˝   Hâ«ËÉ  HãÖ®˝ˇˇHçê¿  HçÖ¿˝ˇˇHP  π   æ   Hâ«Ë÷Ç  HãÖ®˝ˇˇHçêƒ  HçÖ¿˝ˇˇH¿  π   æ   Hâ«Ë©Ç  Hã£Z Hãï∏˝ˇˇHçç¿˝ˇˇHâŒHâ«Ë'Ü  âÖ¥˝ˇˇÎêHãzZ Hâ«ËäˇˇHãkZ Hâ«ËÀˇˇãÖ¥˝ˇˇHãU¯dH+%(   tË·ˇˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hç[ HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«ËÛÅ  HãEZ HãïˇˇˇHççˇˇˇHâŒHâ«Ë∑Ñ  HÉ¯ˇttHãÖ¯˛ˇˇHçPHçÖˇˇˇπ-   æ˝   Hâ«Ë©Å  HãÖ¯˛ˇˇHçP1HçÖˇˇˇHÉ¿pπà  æ˝   Hâ«ËÅÅ  Hã”Y HãïˇˇˇHççˇˇˇHâŒHâ«ËˇÑ  âÖˇˇˇÎêHã™Y Hâ«ËbˇˇHãõY Hâ«Ë£ˇˇãÖˇˇˇHãU¯dH+%(   tËπˇˇ…√Û˙UHâÂHÅÏ0  HâΩÿ¸ˇˇdHã%(   HâE¯1¿HçB HâÖË¸ˇˇHãÖÿ¸ˇˇHçP7HçÖ¸ˇˇHâ∆Hâ◊Ë$Å  HãÖÿ¸ˇˇHçPxHçÖ ˝ˇˇHâ∆Hâ◊ËÅ  HãÖÿ¸ˇˇHâ«ËˇˇHâ¡Hãïÿ¸ˇˇHçÖP˝ˇˇæ˝   Hâ«ËÑÄ  HãŒX HãïË¸ˇˇHççP˝ˇˇHâŒHâ«ËHÉ  HÉ¯ˇÑX  HãÖÿ¸ˇˇHçP
HçÖP˝ˇˇπ-   æ˝   Hâ«Ë6Ä  HçÖ¸ˇˇHçïP˝ˇˇHçzpπ(   Hâ¬æ
   ËÄ  HãÖÿ¸ˇˇHçPBHçÖP˝ˇˇH‡   π-   æ˝   Hâ«ËË  HãÖÿ¸ˇˇHçPpHçÖP˝ˇˇHP  π   æ   Hâ«Ëæ  HãÖÿ¸ˇˇHçPtHçÖP˝ˇˇH¿  π   æ   Hâ«Ëî  HçÖ ˝ˇˇHçïP˝ˇˇHç∫0  π(   Hâ¬æ
   Ëm  Hã∑W HãïË¸ˇˇHççP˝ˇˇHâŒHâ«ËÎÇ  âÖ‰¸ˇˇÉΩ‰¸ˇˇˇt?HãÖÿ¸ˇˇHçP7HçÖ¸ˇˇHâ÷Hâ«ËRÅ  HãÖÿ¸ˇˇHçPxHçÖ ˝ˇˇHâ÷Hâ«Ë5Å  ÎêÎêHãHW Hâ«Ë
ˇˇHã9W Hâ«ËIˇˇãÖ‰¸ˇˇHãU¯dH+%(   tË_
ˇˇ…√Û˙UHâÂHÅÏ†  HâΩh¸ˇˇdHã%(   HâE¯1¿HçÛ  HâÖx¸ˇˇHçÖÄ¸ˇˇHâ«Ëü  HçÖ∞¸ˇˇHâ«Ëê  Hãïh¸ˇˇHçÖ‡¸ˇˇπ   æ   Hâ«ËS~  HãEV Hãïx¸ˇˇHçç‡¸ˇˇHâŒHâ«ËÅ  HÉ¯ˇÑÜ  HãÖh¸ˇˇHçPHçÖ‡¸ˇˇπ-   æ˝   Hâ«Ë~  HãÖh¸ˇˇHçP1HçÖ‡¸ˇˇHÉ¿pπ-   æ˝   Hâ«Ë›}  HçÖÄ¸ˇˇHçï‡¸ˇˇHç∫‡   π(   Hâ¬æ
   Ë∂}  HçÖ∞¸ˇˇHçï‡¸ˇˇHç∫P  π(   Hâ¬æ
   Ëè}  HãÖh¸ˇˇHçPtHçÖ‡¸ˇˇH¿  π   æ   Hâ«Ëe}  HãÖh¸ˇˇHçPxHçÖ‡¸ˇˇH0  πà  æ˝   Hâ«Ë;}  HãÖh¸ˇˇHçê   HçÖ‡¸ˇˇH†  πà  æ˝   Hâ«Ë}  Hã U Hãïx¸ˇˇHçç‡¸ˇˇHâŒHâ«ËåÄ  âÖt¸ˇˇÉΩt¸ˇˇˇt?HãÖh¸ˇˇHçP^HçÖÄ¸ˇˇHâ÷Hâ«ËÛ~  HãÖh¸ˇˇHçPiHçÖ∞¸ˇˇHâ÷Hâ«Ë÷~  ÎêÎêHãëT Hâ«Ë©ˇˇHãÇT Hâ«ËÍˇˇãÖt¸ˇˇHãU¯dH+%(   tË ˇˇ…√Û˙UHâÂHÅÏ   HâΩË˙ˇˇdHã%(   HâE¯1¿Hç¢˛  HâÖ¯˙ˇˇHãÖË˙ˇˇHçêï   HçÖ ˚ˇˇHâ∆Hâ◊Ëh|  HãÖË˙ˇˇHçê†   HçÖ0˚ˇˇHâ∆Hâ◊ËH|  HãÖË˙ˇˇHçê∏   HçÖ`˚ˇˇHâ∆Hâ◊Ë(|  HãïË˙ˇˇHçÖê˚ˇˇπ   æ   Hâ«Ë≤{  HãåS Hãï¯˙ˇˇHççê˚ˇˇHâŒHâ«Ëv~  HÉ¯ˇÑ0  HãÖË˙ˇˇHçPHçÖê˚ˇˇπ-   æ˝   Hâ«Ëd{  HãÖË˙ˇˇHçP1HçÖê˚ˇˇHÉ¿pπ-   æ˝   Hâ«Ë<{  HãÖË˙ˇˇHçP^HçÖê˚ˇˇH‡   π-   æ˝   Hâ«Ë{  HãÖË˙ˇˇHçêã   HçÖê˚ˇˇHP  π
   æ˝   Hâ«ËÂz  HçÖ ˚ˇˇHçïê˚ˇˇHç∫¿  π(   Hâ¬æ
   Ëæz  HçÖ0˚ˇˇHçïê˚ˇˇHç∫0  π(   Hâ¬æ
   Ëóz  HãÖË˙ˇˇHçê¨   HçÖê˚ˇˇH†  π   æ   Hâ«Ëjz  HãÖË˙ˇˇHçê∞   HçÖê˚ˇˇH  π   æ   Hâ«Ë=z  HãÖË˙ˇˇHçê¥   HçÖê˚ˇˇHÄ  π   æ   Hâ«Ëz  HçÖ`˚ˇˇHçïê˚ˇˇHç∫  π(   Hâ¬æ
   ËÈy  Hã√Q Hãï¯˙ˇˇHççê˚ˇˇHâŒHâ«Ëg}  âÖÙ˙ˇˇÉΩÙ˙ˇˇˇteHãÖË˙ˇˇHçêï   HçÖ ˚ˇˇHâ÷Hâ«ËÀ{  HãÖË˙ˇˇHçê†   HçÖ0˚ˇˇHâ÷Hâ«Ë´{  HãÖË˙ˇˇHçê∏   HçÖ`˚ˇˇHâ÷Hâ«Ëã{  ÎêÎêHã.Q Hâ«Ë^ˇˇHãQ Hâ«ËüˇˇãÖÙ˙ˇˇHãU¯dH+%(   tËµˇˇ…√Û˙UHâÂHÅÏp  HâΩò¸ˇˇdHã%(   HâE¯1¿Hçc˚  HâÖ®¸ˇˇHãÖò¸ˇˇHçê·   HçÖ∞¸ˇˇHâ∆Hâ◊Ëy  HãÖò¸ˇˇHâ«Ë1ˇˇHâ¡Hãïò¸ˇˇHçÖ‡¸ˇˇæ˝   Hâ«Ëöx  Hã|P Hãï®¸ˇˇHçç‡¸ˇˇHâŒHâ«Ë^{  HÉ¯ˇÑx  HãÖò¸ˇˇHçP-HçÖ‡¸ˇˇπ-   æ˝   Hâ«ËLx  HãÖò¸ˇˇHçPZHçÖ‡¸ˇˇHÉ¿pπ-   æ˝   Hâ«Ë$x  HãÖò¸ˇˇHçêá   HçÖ‡¸ˇˇH‡   π-   æ˝   Hâ«Ë˜w  HãÖò¸ˇˇHçê¥   HçÖ‡¸ˇˇHP  π-   æ˝   Hâ«Ë w  HçÖ∞¸ˇˇHçï‡¸ˇˇHç∫¿  π(   Hâ¬æ
   Ë£w  HãÖò¸ˇˇHçêÏ   HçÖ‡¸ˇˇH0  π   æ˝   Hâ«Ëvw  HãÖò¸ˇˇHçê¸   HçÖ‡¸ˇˇH†  π   æ˝   Hâ«ËIw  Hã+O Hãï®¸ˇˇHçç‡¸ˇˇHâŒHâ«Ë«z  âÖ§¸ˇˇÉΩ§¸ˇˇˇt%HãÖò¸ˇˇHçê·   HçÖ∞¸ˇˇHâ÷Hâ«Ë+y  ÎêÎêHã÷N Hâ«Ë˛ˇˇHã«N Hâ«Ë?ˇˇãÖ§¸ˇˇHãU¯dH+%(   tËUˇˇ…√Û˙UHâÂHÅÏ`  HâΩ®¸ˇˇdHã%(   HâE¯1¿Hç˘  HâÖ∏¸ˇˇHãÖ®¸ˇˇHçP9HçÖ¿¸ˇˇHâ∆Hâ◊Ë¿v  HãÖ®¸ˇˇHçPDHçÖ¸ˇˇHâ∆Hâ◊Ë£v  HãÖ®¸ˇˇHçPOHçÖ ˝ˇˇHâ∆Hâ◊ËÜv  Hãï®¸ˇˇHçÖP˝ˇˇπ   æ   Hâ«Ëv  Hã˙M Hãï∏¸ˇˇHççP˝ˇˇHâŒHâ«Ë‘x  HÉ¯ˇÑs  HãÖ®¸ˇˇHçPHçÖP˝ˇˇπ-   æ˝   Hâ«Ë¬u  HãÖ®¸ˇˇHçPHçÖP˝ˇˇHÉ¿pπ   æ   Hâ«Ëöu  HãÖ®¸ˇˇHçPHçÖP˝ˇˇH‡   π   æ   Hâ«Ëpu  HçÖ¿¸ˇˇHçïP˝ˇˇHç∫P  π(   Hâ¬æ
   ËIu  HçÖ¸ˇˇHçïP˝ˇˇHç∫¿  π(   Hâ¬æ
   Ë"u  HçÖ ˝ˇˇHçïP˝ˇˇHç∫0  π(   Hâ¬æ
   Ë˚t  HãÂL Hãï∏¸ˇˇHççP˝ˇˇHâŒHâ«Ëyx  âÖ¥¸ˇˇÉΩ¥¸ˇˇˇt\HãÖ®¸ˇˇHçP9HçÖ¿¸ˇˇHâ÷Hâ«Ë‡v  HãÖ®¸ˇˇHçPDHçÖ¸ˇˇHâ÷Hâ«Ë√v  HãÖ®¸ˇˇHçPOHçÖ ˝ˇˇHâ÷Hâ«Ë¶v  ÎêÎêHãYL Hâ«Ëyˇ˛ˇHãJL Hâ«Ë∫ ˇˇãÖ¥¸ˇˇHãU¯dH+%(   tË–ˇ˛ˇ…√Û˙UHâÂHÅÏ–  HâΩ8˝ˇˇdHã%(   HâE¯1¿Hç°ˆ  HâÖH˝ˇˇHãÖ8˝ˇˇHâ«Ël˛˛ˇHâ¡Hãï8˝ˇˇHçÖP˝ˇˇæ˝   Hâ«Ë’s  Hã/L HãïH˝ˇˇHççP˝ˇˇHâŒHâ«Ëôv  HÉ¯ˇÑ+  HãÖ8˝ˇˇHçP-HçÖP˝ˇˇπà  æ˝   Hâ«Ëás  HãÖ8˝ˇˇHçê∏  HçÖP˝ˇˇHÉ¿pπ   æ   Hâ«Ë\s  HãÖ8˝ˇˇHçêº  HçÖP˝ˇˇH‡   π   æ   Hâ«Ë/s  HãÖ8˝ˇˇHçê¿  HçÖP˝ˇˇHP  π   æ   Hâ«Ës  HãÖ8˝ˇˇHçêƒ  HçÖP˝ˇˇH¿  π   æ   Hâ«Ë’r  HãÖ8˝ˇˇHçê»  HçÖP˝ˇˇH0  π   æ   Hâ«Ë®r  HãK HãïH˝ˇˇHççP˝ˇˇHâŒHâ«Ë&v  âÖD˝ˇˇÎêHãŸJ Hâ«Ëâ˝˛ˇHã J Hâ«Ë ˛˛ˇãÖD˝ˇˇHãU¯dH+%(   tË‡˝˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçΩÙ  HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«ËÚq  HãÑJ HãïˇˇˇHççˇˇˇHâŒHâ«Ë∂t  HÉ¯ˇttHãÖ¯˛ˇˇHçPHçÖˇˇˇπ-   æ˝   Hâ«Ë®q  HãÖ¯˛ˇˇHçP1HçÖˇˇˇHÉ¿pπà  æ˝   Hâ«ËÄq  HãJ HãïˇˇˇHççˇˇˇHâŒHâ«Ë˛t  âÖˇˇˇÎêHãÈI Hâ«Ëa¸˛ˇHã⁄I Hâ«Ë¢˝˛ˇãÖˇˇˇHãU¯dH+%(   tË∏¸˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hç§Û  HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«Ë p  HãTI HãïˇˇˇHççˇˇˇHâŒHâ«Ëés  HÉ¯ˇttHãÖ¯˛ˇˇHçPHçÖˇˇˇπ-   æ¸   Hâ«ËÄp  HãÖ¯˛ˇˇHçP1HçÖˇˇˇHÉ¿pπà  æ˝   Hâ«ËXp  Hã‚H HãïˇˇˇHççˇˇˇHâŒHâ«Ë÷s  âÖˇˇˇÎêHãπH Hâ«Ë9˚˛ˇHã™H Hâ«Ëz¸˛ˇãÖˇˇˇHãU¯dH+%(   tËê˚˛ˇ…√Û˙UHâÂHÅÏ`  HâΩ®˝ˇˇdHã%(   HâE¯1¿HçãÚ  HâÖ∏˝ˇˇHãï®˝ˇˇHçÖ¿˝ˇˇπ   æ   Hâ«Ë¢o  Hã$H Hãï∏˝ˇˇHçç¿˝ˇˇHâŒHâ«Ëfr  HÉ¯ˇÑ¯   HãÖ®˝ˇˇHçPHçÖ¿˝ˇˇπ-   æ˝   Hâ«ËTo  HãÖ®˝ˇˇHçê∏   HçÖ¿˝ˇˇHÉ¿pπ-   æ˝   Hâ«Ë)o  HãÖ®˝ˇˇHçP1HçÖ¿˝ˇˇH‡   π-   æ˝   Hâ«Ëˇn  HãÖ®˝ˇˇHçP^HçÖ¿˝ˇˇHP  π-   æ˝   Hâ«Ë’n  HãÖ®˝ˇˇHçêã   HçÖ¿˝ˇˇH¿  π-   æ¸   Hâ«Ë®n  Hã*G Hãï∏˝ˇˇHçç¿˝ˇˇHâŒHâ«Ë&r  âÖ¥˝ˇˇÎêHãG Hâ«Ëâ˘˛ˇHãÚF Hâ«Ë ˙˛ˇãÖ¥˝ˇˇHãU¯dH+%(   tË‡˘˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçÊ  HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«ËÚm  HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pπ   æ   Hâ«Ë m  HãDF HãïˇˇˇHççˇˇˇHâŒHâ«Ëép  HÉ¯ˇttHãÖ¯˛ˇˇHçPHçÖˇˇˇπ-   æ˝   Hâ«ËÄm  HãÖ¯˛ˇˇHçP8HçÖˇˇˇHÉ¿pπ   æ   Hâ«ËXm  Hã“E HãïˇˇˇHççˇˇˇHâŒHâ«Ë÷p  âÖˇˇˇÎêHã©E Hâ«Ë9¯˛ˇHãöE Hâ«Ëz˘˛ˇãÖˇˇˇHãU¯dH+%(   tËê¯˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hç¢Ô  HâÖˇˇˇHãÖ¯˛ˇˇHâ«Ë,˜˛ˇHâ¡Hãï¯˛ˇˇHçÖˇˇˇæ˝   Hâ«Ëïl  HãÖ¯˛ˇˇHÉ¿-Hâ«Ë˚ˆ˛ˇHâ¡HãÖ¯˛ˇˇHçP-HçÖˇˇˇHÉ¿pæ˝   Hâ«Ë\l  HãŒD HãïˇˇˇHççˇˇˇHâŒHâ«Ë o  HÉ¯ˇtLHãÖ¯˛ˇˇHçPZHçÖˇˇˇπ-   æ˝   Hâ«Ël  HãÑD HãïˇˇˇHççˇˇˇHâŒHâ«Ëêo  âÖˇˇˇÎêHã[D Hâ«ËÛˆ˛ˇHãLD Hâ«Ë4¯˛ˇãÖˇˇˇHãU¯dH+%(   tËJ˜˛ˇ…√Û˙UHâÂHÅÏ¿  HâΩH˙ˇˇdHã%(   HâE¯1¿HçlÓ  HâÖX˙ˇˇHçÖ`˙ˇˇHâ«Ëäl  HçÖê˙ˇˇHâ«Ë{l  HãÖH˙ˇˇHçPHçÖ¿˙ˇˇHâ∆Hâ◊Ëók  HãÖH˙ˇˇHçPHçÖ˙ˇˇHâ∆Hâ◊Ëzk  HãïH˙ˇˇHçÖ ˚ˇˇπ   æ   Hâ«Ëk  HãnC HãïX˙ˇˇHçç ˚ˇˇHâŒHâ«Ë»m  HÉ¯ˇÑb  HãÖH˙ˇˇHçPaHçÖ ˚ˇˇπ-   æ˝   Hâ«Ë∂j  HãÖH˙ˇˇHçPHçÖ ˚ˇˇHÉ¿pπ   æ   Hâ«Ëéj  HãÖH˙ˇˇHçêé   HçÖ ˚ˇˇH‡   π-   æ˝   Hâ«Ëaj  HãÖH˙ˇˇHçPHçÖ ˚ˇˇHP  π   æ   Hâ«Ë7j  HçÖ¿˙ˇˇHçï ˚ˇˇHç∫¿  π(   Hâ¬æ
   Ëj  HçÖ`˙ˇˇHçï ˚ˇˇHç∫0  π(   Hâ¬æ   ËÈi  HçÖ˙ˇˇHçï ˚ˇˇHç∫†  π(   Hâ¬æ
   Ë¬i  HçÖê˙ˇˇHçï ˚ˇˇHç∫  π(   Hâ¬æ   Ëõi  HãÖH˙ˇˇHçP.HçÖ ˚ˇˇHÄ  π   æ   Hâ«Ëqi  HãÖH˙ˇˇHçP0HçÖ ˚ˇˇH  π   æ   Hâ«ËGi  HãÖH˙ˇˇHçP4HçÖ ˚ˇˇH`  π-   æ˝   Hâ«Ëi  HãáA HãïX˙ˇˇHçç ˚ˇˇHâŒHâ«Ëõl  âÖT˙ˇˇÉΩT˙ˇˇˇtyHãÖH˙ˇˇHçP"HçÖ`˙ˇˇHâ÷Hâ«Ëªj  HãÖH˙ˇˇHçP(HçÖê˙ˇˇHâ÷Hâ«Ëûj  HãÖH˙ˇˇHçPHçÖ¿˙ˇˇHâ÷Hâ«Ë»j  HãÖH˙ˇˇHçPHçÖ˙ˇˇHâ÷Hâ«Ë´j  ÎêÎêHãﬁ@ Hâ«Ë~Û˛ˇHãœ@ Hâ«ËøÙ˛ˇãÖT˙ˇˇHãU¯dH+%(   tË’Û˛ˇ…√Û˙UHâÂHÅÏ¿  HâΩH˚ˇˇdHã%(   HâE¯1¿HçÎ  HâÖX˚ˇˇHçÖ`˚ˇˇHâ«Ëi  HãïH˚ˇˇHçÖê˚ˇˇπ   æ   Hâ«Ëÿg  Hã:@ HãïX˚ˇˇHççê˚ˇˇHâŒHâ«Ëúj  HÉ¯ˇÑˆ  HãÖH˚ˇˇHçPHçÖê˚ˇˇπ-   æ˝   Hâ«Ëäg  HãÖH˚ˇˇHçê´   HçÖê˚ˇˇHÉ¿pπ-   æ˝   Hâ«Ë_g  HãÖH˚ˇˇHçê  HçÖê˚ˇˇH‡   π-   æ˝   Hâ«Ë2g  HãÖH˚ˇˇHçê8  HçÖê˚ˇˇHP  π-   æ˝   Hâ«Ëg  HãÖH˚ˇˇHçP~HçÖê˚ˇˇH¿  π-   æ˝   Hâ«Ë€f  HãÖH˚ˇˇHçP^HçÖê˚ˇˇH0  π   æ˝   Hâ«Ë±f  HãÖH˚ˇˇHçP1HçÖê˚ˇˇH†  π-   æ˝   Hâ«Ëáf  HãÖH˚ˇˇHçPnHçÖê˚ˇˇH  π   æ˝   Hâ«Ë]f  HãÖH˚ˇˇHçêÿ   HçÖê˚ˇˇHÄ  π-   æ˝   Hâ«Ë0f  HçÖ`˚ˇˇHçïê˚ˇˇHç∫  π(   Hâ¬æ   Ë	f  Hãk> HãïX˚ˇˇHççê˚ˇˇHâŒHâ«Ëái  âÖT˚ˇˇÉΩT˚ˇˇˇt%HãÖH˚ˇˇHçê  HçÖ`˚ˇˇHâ÷Hâ«Ë§g  ÎêÎêHã> Hâ«Ëæ˛ˇHã> Hâ«ËˇÒ˛ˇãÖT˚ˇˇHãU¯dH+%(   tËÒ˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçWË  HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«Ë'e  HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pπ   æ   Hâ«Ëˇd  Hã±= HãïˇˇˇHççˇˇˇHâŒHâ«Ë√g  HÉ¯ˇtpHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«Ëπd  HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pπ   æ   Hâ«Ëëd  HãC= HãïˇˇˇHççˇˇˇHâŒHâ«Ëh  âÖˇˇˇÎêHã= Hâ«ËrÔ˛ˇHã= Hâ«Ë≥˛ˇãÖˇˇˇHãU¯dH+%(   tË…Ô˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçÁ  HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«Ë€c  HãÖ¯˛ˇˇHÉ¿Hâ«ËAÓ˛ˇHâ¡HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pæ˝   Hâ«Ë¢c  HãL< HãïˇˇˇHççˇˇˇHâŒHâ«Ëff  HÉ¯ˇÑÅ   Hãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«ËXc  HãÖ¯˛ˇˇHÉ¿Hâ«ËæÌ˛ˇHâ¡HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pæ˝   Hâ«Ëc  Hã…; HãïˇˇˇHççˇˇˇHâŒHâ«Ëùf  âÖˇˇˇÎêHã†; Hâ«Ë Ó˛ˇHãë; Hâ«ËAÔ˛ˇãÖˇˇˇHãU¯dH+%(   tËWÓ˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hç≥Â  HâÖˇˇˇHãÖ¯˛ˇˇHÉ¿Hâ«ËÔÏ˛ˇHâ¡HãÖ¯˛ˇˇHçPHçÖˇˇˇæ˝   Hâ«ËTb  HãÖ¯˛ˇˇHçïˇˇˇHçzpπ   Hâ¬æ   Ë0b  Hã“: HãïˇˇˇHççˇˇˇHâŒHâ«ËÙd  HÉ¯ˇtLHãÖ¯˛ˇˇHçP4HçÖˇˇˇπ   æ   Hâ«ËÊa  Hãà: HãïˇˇˇHççˇˇˇHâŒHâ«Ëde  âÖˇˇˇÎêHã_: Hâ«Ë«Ï˛ˇHãP: Hâ«ËÓ˛ˇãÖˇˇˇHãU¯dH+%(   tËÌ˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hçç‰  HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«Ë0a  Hã 9 HãïˇˇˇHççˇˇˇHâŒHâ«ËÙc  HÉ¯ˇttHãÖ¯˛ˇˇHçPHçÖˇˇˇπ-   æ˝   Hâ«ËÊ`  HãÖ¯˛ˇˇHçP1HçÖˇˇˇHÉ¿pπà  æ˝   Hâ«Ëæ`  HãX9 HãïˇˇˇHççˇˇˇHâŒHâ«Ë<d  âÖˇˇˇÎêHã/9 Hâ«ËüÎ˛ˇHã 9 Hâ«Ë‡Ï˛ˇãÖˇˇˇHãU¯dH+%(   tËˆÎ˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hçt„  HâÖxˇˇˇHãÖhˇˇˇHâ«ËíÍ˛ˇHâ¡HãïhˇˇˇHçEÄæ˝   Hâ«Ë˛_  Hã 9 HãïxˇˇˇHçMÄHâŒHâ«Ë≈b  Hã9 Hâ«ËÎÍ˛ˇHãÙ8 Hâ«Ë,Ï˛ˇêHãE¯dH+%(   tËGÎ˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hç“‚  HâÖˇˇˇHãÖ¯˛ˇˇHçPHçÖˇˇˇπ   æ   Hâ«ËU_  HãÖ¯˛ˇˇHçïˇˇˇHçzpπ   Hâ¬æ   Ë1_  HãK8 HãïˇˇˇHççˇˇˇHâŒHâ«Ëıa  Hã+8 Hâ«ËÍ˛ˇHã8 Hâ«Ë\Î˛ˇêHãE¯dH+%(   tËwÍ˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hç‚  HâÖxˇˇˇHãÖhˇˇˇHâ«ËÈ˛ˇHâ¡HãïhˇˇˇHçEÄæ˝   Hâ«Ë^  Hãë7 HãïxˇˇˇHçMÄHâŒHâ«ËFa  Hãt7 Hâ«ËlÈ˛ˇHãe7 Hâ«Ë≠Í˛ˇêHãE¯dH+%(   tË»È˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hçk·  HâÖˇˇˇHãÖ¯˛ˇˇHçPHçÖˇˇˇπ   æ   Hâ«Ë÷]  HãÖ¯˛ˇˇHçïˇˇˇHçzpπ-   Hâ¬æ   Ë≤]  Hãº6 HãïˇˇˇHççˇˇˇHâŒHâ«Ëv`  Hãú6 Hâ«ËúË˛ˇHãç6 Hâ«Ë›È˛ˇêHãE¯dH+%(   tË¯Ë˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hç¶‡  HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«Ë
]  HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pπ   æ   Hâ«Ë‚\  Hã‰5 HãïˇˇˇHççˇˇˇHâŒHâ«Ë¶_  Hãƒ5 Hâ«ËÃÁ˛ˇHãµ5 Hâ«ËÈ˛ˇêHãE¯dH+%(   tË(Ë˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hç·ﬂ  HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«Ë:\  HãÖ¯˛ˇˇHÉ¿Hâ«Ë†Ê˛ˇHâ¡HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pæ˝   Hâ«Ë\  Hã˚4 HãïˇˇˇHççˇˇˇHâŒHâ«Ë≈^  Hã€4 Hâ«ËÎÊ˛ˇHãÃ4 Hâ«Ë,Ë˛ˇêHãE¯dH+%(   tËGÁ˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hçﬂ  HâÖxˇˇˇHãÖhˇˇˇHâ«Ë„Â˛ˇHâ¡HãïhˇˇˇHçEÄæ˝   Hâ«ËO[  HãA4 HãïxˇˇˇHçMÄHâŒHâ«Ë^  Hã$4 Hâ«Ë<Ê˛ˇHã4 Hâ«Ë}Á˛ˇêHãE¯dH+%(   tËòÊ˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿Hçlﬁ  HâÖˇˇˇHãÖ¯˛ˇˇHâ«Ë4Â˛ˇHâ¡Hãï¯˛ˇˇHçÖˇˇˇæ˝   Hâ«ËùZ  HãÖ¯˛ˇˇHÉ¿-Hâ«ËÂ˛ˇHâ¡HãÖ¯˛ˇˇHçP-HçÖˇˇˇHÉ¿pæ˝   Hâ«ËdZ  HãN3 HãïˇˇˇHççˇˇˇHâŒHâ«Ë(]  Hã.3 Hâ«ËNÂ˛ˇHã3 Hâ«ËèÊ˛ˇêHãE¯dH+%(   tË™Â˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hçå›  HâÖxˇˇˇHãïhˇˇˇHçEÄπ   æ   Hâ«ËøY  Hã°2 HãïxˇˇˇHçMÄHâŒHâ«ËÜ\  HãÑ2 Hâ«Ë¨‰˛ˇHãu2 Hâ«ËÌÂ˛ˇêHãE¯dH+%(   tËÂ˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hçˆ‹  HâÖxˇˇˇHãÖhˇˇˇHâ«Ë§„˛ˇHâ¡HãïhˇˇˇHçEÄæ˝   Hâ«ËY  HãÍ1 HãïxˇˇˇHçMÄHâŒHâ«Ë◊[  HãÕ1 Hâ«Ë˝„˛ˇHãæ1 Hâ«Ë>Â˛ˇêHãE¯dH+%(   tËY‰˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿HçX‹  HâÖxˇˇˇHãïhˇˇˇHçEÄπ   æ   Hâ«ËnX  Hã†1 HãïxˇˇˇHçMÄHâŒHâ«Ë5[  HãÉ1 Hâ«Ë[„˛ˇHãt1 Hâ«Ëú‰˛ˇêHãE¯dH+%(   tË∑„˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hç≈€  HâÖxˇˇˇHãÖhˇˇˇHâ«ËS‚˛ˇHâ¡HãïhˇˇˇHçEÄæ˝   Hâ«ËøW  HãÈ0 HãïxˇˇˇHçMÄHâŒHâ«ËÜZ  HãÃ0 Hâ«Ë¨‚˛ˇHãΩ0 Hâ«ËÌ„˛ˇêHãE¯dH+%(   tË„˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hç!€  HâÖxˇˇˇHãïhˇˇˇHçEÄπ   æ   Hâ«ËW  HãÔ/ HãïxˇˇˇHçMÄHâŒHâ«Ë‰Y  Hã“/ Hâ«Ë
‚˛ˇHã√/ Hâ«ËK„˛ˇêHãE¯dH+%(   tËf‚˛ˇ…√Û˙UHâÂHÅÏ–   HâΩ8ˇˇˇdHã%(   HâE¯1¿Hçç⁄  HâÖHˇˇˇHãï8ˇˇˇHçEÄπ   æ   Hâ«Ë{V  Hã5/ HãïHˇˇˇHçMÄHâŒHâ«ËBY  Hã/ Hâ«Ëh·˛ˇHã	/ Hâ«Ë©‚˛ˇêHãE¯dH+%(   tËƒ·˛ˇ…√Û˙UHâÂHÅÏ–   HâΩ8ˇˇˇdHã%(   HâE¯1¿Hç˜Ÿ  HâÖHˇˇˇHãÖ8ˇˇˇHçê·   HçÖPˇˇˇHâ∆Hâ◊Ë,V  HãÖ8ˇˇˇHâ«Ë@‡˛ˇHâ¡Hãï8ˇˇˇHçEÄæ˝   Hâ«Ë¨U  Hãn. HãïHˇˇˇHçMÄHâŒHâ«ËsX  HãQ. Hâ«Ëô‡˛ˇHãB. Hâ«Ë⁄·˛ˇêHãE¯dH+%(   tËı‡˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hç8Ÿ  HâÖxˇˇˇHãïhˇˇˇHçEÄπ   æ   Hâ«Ë
U  Hã‘- HãïxˇˇˇHçMÄHâŒHâ«Ë—W  Hã∑- Hâ«Ë˜ﬂ˛ˇHã®- Hâ«Ë8·˛ˇêHãE¯dH+%(   tËS‡˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hç©ÿ  HâÖxˇˇˇHãÖhˇˇˇHâ«ËÔﬁ˛ˇHâ¡HãïhˇˇˇHçEÄæ˝   Hâ«Ë[T  Hãï- HãïxˇˇˇHçMÄHâŒHâ«Ë"W  Hãx- Hâ«ËHﬂ˛ˇHãi- Hâ«Ëâ‡˛ˇêHãE¯dH+%(   tË§ﬂ˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hçÿ  HâÖxˇˇˇHãïhˇˇˇHçEÄπ   æ   Hâ«ËπS  Hã+- HãïxˇˇˇHçMÄHâŒHâ«ËÄV  Hã- Hâ«Ë¶ﬁ˛ˇHãˇ, Hâ«ËÁﬂ˛ˇêHãE¯dH+%(   tËﬂ˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hçs◊  HâÖxˇˇˇHãïhˇˇˇHçEÄπ   æ   Hâ«ËS  HãÅ, HãïxˇˇˇHçMÄHâŒHâ«ËﬁU  Hãd, Hâ«Ëﬁ˛ˇHãU, Hâ«ËEﬂ˛ˇêHãE¯dH+%(   tË`ﬁ˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hç‡÷  HâÖxˇˇˇHãïhˇˇˇHçEÄπ   æ   Hâ«ËuR  Hã◊+ HãïxˇˇˇHçMÄHâŒHâ«Ë<U  Hã∫+ Hâ«Ëb›˛ˇHã´+ Hâ«Ë£ﬁ˛ˇêHãE¯dH+%(   tËæ›˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçI÷  HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«Ë–Q  HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pπ   æ   Hâ«Ë®Q  Hã+ HãïˇˇˇHççˇˇˇHâŒHâ«ËlT  Hã‚* Hâ«Ëí‹˛ˇHã”* Hâ«Ë”›˛ˇêHãE¯dH+%(   tËÓ‹˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçÖ’  HâÖˇˇˇHãÖ¯˛ˇˇHâ«Ëä€˛ˇHâ¡Hãï¯˛ˇˇHçÖˇˇˇæ˝   Hâ«ËÛP  HãÖ¯˛ˇˇHÉ¿-Hâ«ËY€˛ˇHâ¡HãÖ¯˛ˇˇHçP-HçÖˇˇˇHÉ¿pæ˝   Hâ«Ë∫P  Hã* HãïˇˇˇHççˇˇˇHâŒHâ«Ë~S  HãÏ) Hâ«Ë§€˛ˇHã›) Hâ«ËÂ‹˛ˇêHãE¯dH+%(   tË ‹˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hçß‘  HâÖxˇˇˇHãïhˇˇˇHçEÄπ   æ   Hâ«ËP  Hã_) HãïxˇˇˇHçMÄHâŒHâ«Ë‹R  HãB) Hâ«Ë€˛ˇHã3) Hâ«ËC‹˛ˇêHãE¯dH+%(   tË^€˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hç‘  HâÖxˇˇˇHãïhˇˇˇHçEÄπ   æ   Hâ«ËsO  Hãµ( HãïxˇˇˇHçMÄHâŒHâ«Ë:R  Hãò( Hâ«Ë`⁄˛ˇHãâ( Hâ«Ë°€˛ˇêHãE¯dH+%(   tËº⁄˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçÉ”  HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«ËŒN  HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pπ   æ   Hâ«Ë¶N  Hã8( HãïˇˇˇHççˇˇˇHâŒHâ«ËjQ  Hã( Hâ«ËêŸ˛ˇHã	( Hâ«Ë—⁄˛ˇêHãE¯dH+%(   tËÏŸ˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçΩ“  HâÖˇˇˇHãï¯˛ˇˇHçÖˇˇˇπ   æ   Hâ«Ë˛M  HãÖ¯˛ˇˇHÉ¿Hâ«Ëdÿ˛ˇHâ¡HãÖ¯˛ˇˇHçPHçÖˇˇˇHÉ¿pæ˝   Hâ«Ë≈M  HãO' HãïˇˇˇHççˇˇˇHâŒHâ«ËâP  Hã/' Hâ«ËØÿ˛ˇHã ' Hâ«ËŸ˛ˇêHãE¯dH+%(   tËŸ˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçÏ—  HâÖˇˇˇHãÖ¯˛ˇˇHÉ¿Hâ«Ë£◊˛ˇHâ¡HãÖ¯˛ˇˇHçPHçÖˇˇˇæ˝   Hâ«ËM  HãÖ¯˛ˇˇHçïˇˇˇHçzpπ   Hâ¬æ   Ë‰L  Hãf& HãïˇˇˇHççˇˇˇHâŒHâ«Ë®O  HãF& Hâ«ËŒ◊˛ˇHã7& Hâ«ËŸ˛ˇêHãE¯dH+%(   tË*ÿ˛ˇ…√Û˙UHâÂHÅÏ†   HâΩhˇˇˇdHã%(   HâE¯1¿Hç—  HâÖxˇˇˇHãïhˇˇˇHçEÄπ   æ   Hâ«Ë?L  Hãπ% HãïxˇˇˇHçMÄHâŒHâ«ËO  Hãú% Hâ«Ë,◊˛ˇHãç% Hâ«Ëmÿ˛ˇêHãE¯dH+%(   tËà◊˛ˇ…√Û˙UHâÂHÅÏÄ  HâΩà˚ˇˇHâµÄ˚ˇˇdHã%(   HâE¯1¿HçÑ–  HâÖò˚ˇˇHãÖà˚ˇˇHçP^HçÖ†˚ˇˇHâ∆Hâ◊ËÏK  HãÖà˚ˇˇHçPiHçÖ–˚ˇˇHâ∆Hâ◊ËœK  HãÖà˚ˇˇHÉ¿Hâ«Ëﬂ’˛ˇHâ¡HãÖà˚ˇˇHçPHçÖ ¸ˇˇæ˝   Hâ«ËDK  HãÖà˚ˇˇHÉ¿1Hâ«Ë™’˛ˇHâ¡HãÖà˚ˇˇHçP1HçÖ ¸ˇˇHÉ¿pæ˝   Hâ«ËK  HçÖ†˚ˇˇHçï ¸ˇˇHç∫‡   π(   Hâ¬æ
   Ë‰J  HçÖ–˚ˇˇHçï ¸ˇˇHç∫P  π(   Hâ¬æ
   ËΩJ  HãÖà˚ˇˇHçPtHçÖ ¸ˇˇH¿  π   æ   Hâ«ËìJ  HãÖà˚ˇˇHÉ¿xHâ«Ë˘‘˛ˇHâ¡HãÖà˚ˇˇHçPxHçÖ ¸ˇˇH0  æ˝   Hâ«ËXJ  HãÖà˚ˇˇH   Hâ«Ëº‘˛ˇHâ¡HãÖà˚ˇˇHçê   HçÖ ¸ˇˇH†  æ˝   Hâ«ËJ  HãÖÄ˚ˇˇHÉ¿Hâ«Ë~‘˛ˇHâ¡HãÖÄ˚ˇˇHçPHçÖ ¸ˇˇH  æ˝   Hâ«Ë›I  HãÖÄ˚ˇˇHçP4HçÖ ¸ˇˇHÄ  π   æ   Hâ«Ë≥I  Hãu# Hãïò˚ˇˇHçç ¸ˇˇHâŒHâ«ËwL  HãU# Hâ«Ëù‘˛ˇHãF# Hâ«Ëﬁ’˛ˇêHãE¯dH+%(   tË˘‘˛ˇ…√Û˙UHâÂHÅÏ  HâΩ¯˛ˇˇdHã%(   HâE¯1¿HçŒ  HâÖˇˇˇHãÖ¯˛ˇˇHâ«Ëï”˛ˇHâ¡Hãï¯˛ˇˇHçÖˇˇˇæ˝   Hâ«Ë˛H  HãÖ¯˛ˇˇHçP8HçÖˇˇˇHÉ¿pπ   æ   Hâ«Ë÷H  Hã–" HãïˇˇˇHççˇˇˇHâŒHâ«ËöK  Hã∞" Hâ«Ë¿”˛ˇHã°" Hâ«Ë’˛ˇêHãE¯dH+%(   tË‘˛ˇ…√Û˙UHâÂHÅÏ   HÉ$ HÅÏ   HÉ$ HÅÏ   HâΩ’ˇˇdHã%(   HâE¯1¿H«Ö ’ˇˇ    Hç Õ  HâÖ0’ˇˇH«Ö(’ˇˇ    HãÖ’ˇˇHâ«Ëä“˛ˇHâ¡Hãï’ˇˇHçÖ@’ˇˇæ˝   Hâ«ËÛG  Hã•! Hãï0’ˇˇHçç@’ˇˇHâŒHâ«Ë∑J  HãÖ! Hãï0’ˇˇHâ÷Hâ«ËlL  HâÖ8’ˇˇHÉΩ8’ˇˇˇÑQ  HãÖ8’ˇˇH¡‡Hâ«Ë‘˛ˇHâÖ ’ˇˇHãÖ8’ˇˇHÉ¿Hç≈    HãÖ ’ˇˇæ    Hâ«Ë-“˛ˇHÉΩ ’ˇˇ uHç\Ã  Hâ«∏    Ëˇ–˛ˇÈÓ  HçïPÿˇˇHçÖ@’ˇˇπ-   æ˝   Hâ«Ë!G  HçÖ’ˇˇHçï@’ˇˇHçzpπ   Hâ¬æ   Ë˝F  HçÖÄÿˇˇHçï@’ˇˇHç∫‡   π-   Hâ¬æ˝   Ë÷F  HçÖ‡ÿˇˇHçï@’ˇˇHç∫P  πà  Hâ¬æ˝   ËØF  HçÖ∞ÿˇˇHçï@’ˇˇHç∫¿  π-   Hâ¬æ¸   ËàF  HçÖpÏˇˇHçï@’ˇˇHç∫0  πà  Hâ¬æ˝   ËaF  HçÖ’ˇˇHçï@’ˇˇHç∫†  π   Hâ¬æ   Ë:F  HãÏ Hçï@’ˇˇHâ÷Hâ«Ëj”˛ˇÑ¿t8Hãœ HçHÀ  Hâ÷Hâ«Ë^C  HãÖ ’ˇˇHâ«ËÓ—˛ˇH«Ö ’ˇˇ    Èí  HãÖ ’ˇˇHãï8’ˇˇHâHãÜ Hâ«Ëû”˛ˇâÖ’ˇˇÉΩ’ˇˇduHçÀ  Hâ«Ë†“˛ˇÈO  ÉΩ’ˇˇuHãK HçÒ   Hâ÷Hâ«Ë⁄B  HãÖ(’ˇˇHi–§'  HãÖ ’ˇˇH–HçPHçÖPÿˇˇHâ∆Hâ◊Ë{–˛ˇãÖ’ˇˇHãç ’ˇˇHãï(’ˇˇHi“§'  H HÉ¬8âHãÖ(’ˇˇHi¿§'  HçP0HãÖ ’ˇˇH–HçPHçÖÄÿˇˇHâ∆Hâ◊Ë%–˛ˇHãÖ(’ˇˇHi¿§'  HçP`HãÖ ’ˇˇH–HçP	HçÖ‡ÿˇˇHâ∆Hâ◊ËÛœ˛ˇHãÖ(’ˇˇHi¿§'  Hçê‡  HãÖ ’ˇˇH–HçPHçÖ∞ÿˇˇHâ∆Hâ◊Ëæœ˛ˇHãÖ(’ˇˇHi¿§'  Hçê  HãÖ ’ˇˇH–HçPHçÖpÏˇˇHâ∆Hâ◊Ëâœ˛ˇãÖ’ˇˇHãç ’ˇˇHãï(’ˇˇHi“§'  H HÅ¬®'  âHãÖ(’ˇˇHÉËHi–§'  HãÖ ’ˇˇH–HçPHãÖ(’ˇˇHi»§'  HãÖ ’ˇˇH»HÉ¿Hâ÷Hâ«Ëõ–˛ˇâÖ’ˇˇÉΩ’ˇˇ tgHãÖ(’ˇˇHi–§'  HãÖ ’ˇˇH–HÉ¿Hâ∆Hç?…  Hâ«∏    ËiÕ˛ˇHãï ’ˇˇHãÖ(’ˇˇHi¿§'  H–HÉ¿8ã â∆Hç#…  Hâ«∏    Ë5Õ˛ˇHãÖ(’ˇˇHi¿§'  HçP0HãÖ ’ˇˇH–HÉ¿Hâ∆Hç…  Hâ«∏    Ë˛Ã˛ˇHãÖ(’ˇˇHi¿§'  HçP`HãÖ ’ˇˇH–HÉ¿	Hâ∆Hç‹»  Hâ«∏    Ë«Ã˛ˇHãï ’ˇˇHãÖ(’ˇˇHi¿§'  H–H®'  ãHãÖ(’ˇˇHÉËHãç ’ˇˇHi¿§'  H»H®'  ã 9¬teHãÖ(’ˇˇHi¿§'  Hçê‡  HãÖ ’ˇˇH–HÉ¿Hâ«Ëîœ˛ˇHãÖ(’ˇˇHi¿§'  Hçê  HãÖ ’ˇˇH–HÉ¿Hâ∆Hç4»  Hâ«∏    ËÃ˛ˇHÉÖ(’ˇˇÈÄ¸ˇˇêHã Hâ«Ë]Õ˛ˇHãˆ Hâ«ËûŒ˛ˇHãÖ ’ˇˇHâ«ËŒ˛ˇêHãU¯dH+%(   tË™Õ˛ˇ…√Û˙UHâÂHÅÏ`  dHã%(   HâE¯1¿H«Ö∏˝ˇˇ    Hçª«  HâÖ¿˝ˇˇ«Ö¨˝ˇˇ    HçÖ–˝ˇˇHâ«Ë‹B  Hãy Hãï¿˝ˇˇHâ÷Hâ«ËXF  HâÖ»˝ˇˇHÉΩ»˝ˇˇˇÑÆ  HãÖ»˝ˇˇH¡‡Hâ«Ë˜Õ˛ˇHâÖ∏˝ˇˇHãÖ»˝ˇˇHÉ¿Hç≈    HãÖ∏˝ˇˇæ    Hâ«ËÃ˛ˇHçU¿HçÖ ˛ˇˇπ-   æ˝   Hâ«Ë3A  HçÖ–˝ˇˇHçï ˛ˇˇHçzpπ(   Hâ¬æ
   ËA  HçÖ§˝ˇˇHçï ˛ˇˇHç∫‡   π   Hâ¬æ   ËË@  HçÖ®˝ˇˇHçï ˛ˇˇHç∫P  π   Hâ¬æ   Ë¡@  Hã{ Hçï ˛ˇˇHâ÷Hâ«ËÒÕ˛ˇÑ¿tVHãÖ¿˝ˇˇHâ∆HçÖ∆  Hâ«∏    Ë? ˛ˇHã@ Hç±≈  Hâ÷Hâ«Ë«=  HãÖ∏˝ˇˇHâ«ËWÃ˛ˇH«Ö∏˝ˇˇ    Èl  HãÖ∏˝ˇˇHãï»˝ˇˇHâHã˜ Hâ«ËŒ˛ˇâÖ∞˝ˇˇÉΩ∞˝ˇˇduHçz≈  Hâ«Ë	Õ˛ˇÈ)  ÉΩ∞˝ˇˇu7HãÖ¿˝ˇˇHâ∆Hç„≈  Hâ«∏    Ëù…˛ˇHãû Hç<≈  Hâ÷Hâ«Ë%=  ãÖ¨˝ˇˇHòHi–à'  HãÖ∏˝ˇˇH–HçPHçE¿Hâ∆Hâ◊Ë» ˛ˇãÖ¨˝ˇˇHòHi¿à'  HçP`HãÖ∏˝ˇˇH–HçPHçÖ–˝ˇˇHâ÷Hâ«ËùA  ãÖ§˝ˇˇHãç∏˝ˇˇãï¨˝ˇˇHc“Hi“à'  H HÉ¬|âãÖ®˝ˇˇHãç∏˝ˇˇãï¨˝ˇˇHc“Hi“à'  H HÉ¬âãÖ¨˝ˇˇÉËHòHi–à'  HãÖ∏˝ˇˇH–HçPãÖ¨˝ˇˇHòHi»à'  HãÖ∏˝ˇˇH»HÉ¿Hâ÷Hâ«ËÅÀ˛ˇâÖ¥˝ˇˇÉΩ¥˝ˇˇ Ñ÷   ãÖ¨˝ˇˇHòHi–à'  HãÖ∏˝ˇˇH–HÉ¿Hâ∆Hçûƒ  Hâ«∏    ËJ»˛ˇãÖ¨˝ˇˇHòHi¿à'  HçP`HãÖ∏˝ˇˇH–HÉ¿Hâ∆Hçzƒ  Hâ«∏    Ë»˛ˇHãï∏˝ˇˇãÖ¨˝ˇˇHòHi¿à'  H–HÉ¿|ã â∆Hçaƒ  Hâ«∏    Ë›«˛ˇHãï∏˝ˇˇãÖ¨˝ˇˇHòHi¿à'  H–HÉ¿ã â∆HçFƒ  Hâ«∏    Ë®«˛ˇÉÖ¨˝ˇˇÈ¶˝ˇˇêHãú Hâ«ËÏ»˛ˇHãç Hâ«Ë- ˛ˇHãÖ∏˝ˇˇHâ«ËÆ…˛ˇêHãU¯dH+%(   tË9…˛ˇ…√Û˙UHâÂHÅÏ   HÉ$ HÅÏ–  âΩ<ÎˇˇdHã%(   HâE¯1¿H«ÖHÎˇˇ    Hç¿√  HâÖPÎˇˇ«Ö@Îˇˇ    Hçï<ÎˇˇHçÖ`Îˇˇπ   æ   Hâ«Ë+=  Hã’ HãïPÎˇˇHçç`ÎˇˇHâŒHâ«ËÔ?  Hãµ HãïPÎˇˇHâ÷Hâ«Ë§A  HâÖXÎˇˇHÉΩXÎˇˇˇÑU  HãÖXÎˇˇH¡‡Hâ«ËC…˛ˇHâÖHÎˇˇHãÖXÎˇˇHÉ¿Hç≈    HãÖHÎˇˇæ    Hâ«Ëe«˛ˇHçï@ÏˇˇHçÖ`Îˇˇπ-   æ˝   Hâ«Ë|<  HçÖpÏˇˇHçï`ÎˇˇHçzpπà  Hâ¬æ˝   ËX<  Hã Hçï`ÎˇˇHâ÷Hâ«Ëà…˛ˇÑ¿tVHãÖPÎˇˇHâ∆Hç¬  Hâ«∏    Ë÷≈˛ˇHã« HçH¡  Hâ÷Hâ«Ë^9  HãÖHÎˇˇHâ«ËÓ«˛ˇH«ÖHÎˇˇ    È^  HãÖHÎˇˇHãïXÎˇˇHâHã~ Hâ«Ëû…˛ˇâÖDÎˇˇÉΩDÎˇˇduHç¡  Hâ«Ë†»˛ˇÈ  ÉΩDÎˇˇu7HãÖPÎˇˇHâ∆Hçz¡  Hâ«∏    Ë4≈˛ˇHã% Hç”¿  Hâ÷Hâ«Ëº8  ãÖ@ÎˇˇHòHi–º  HãÖHÎˇˇH–HçPHçÖ@ÏˇˇHâ∆Hâ◊Ë\∆˛ˇãÖ@ÎˇˇHòHi¿º  HçP0HãÖHÎˇˇH–HçP	HçÖpÏˇˇHâ∆Hâ◊Ë)∆˛ˇãÖ@ÎˇˇHòHi–º  HãÖHÎˇˇH–HÉ¿Hâ∆HçR¡  Hâ«∏    ËÖƒ˛ˇãÖ@ÎˇˇHòHi¿º  HçP0HãÖHÎˇˇH–HÉ¿	Hâ∆Hç"¡  Hâ«∏    ËMƒ˛ˇÉÖ@ÎˇˇÈ¥˛ˇˇêHã1 Hâ«Ëë≈˛ˇHã" Hâ«Ë“∆˛ˇêHãU¯dH+%(   tËÌ≈˛ˇ…√Û˙UHâÂHÅÏê  âΩ|˜ˇˇdHã%(   HâE¯1¿H«Ö†˜ˇˇ    Hç±¿  HâÖ∞˜ˇˇH«Ö®˜ˇˇ    HçÖ¿˜ˇˇHâ«Ë;  HçÖ˜ˇˇHâ«Ë	;  HçÖ ¯ˇˇHâ«Ë˙:  HçÖP¯ˇˇHâ«ËÎ:  HçÖÄ¯ˇˇHâ«Ë‹:  Hçï|˜ˇˇHçÖ∞¯ˇˇπ   æ   Hâ«Ëü9  HãA Hãï∞˜ˇˇHçç∞¯ˇˇHâŒHâ«Ëc<  Hã! Hãï∞˜ˇˇHâ÷Hâ«Ë>  HâÖ∏˜ˇˇHÉΩ∏˜ˇˇˇÑã
  Hãï∏˜ˇˇHâ–H¡‡H–H¡‡H–H¡‡Hâ«Ë¶≈˛ˇHâÖ†˜ˇˇHãï∏˜ˇˇHâ–H¡‡H–H¡‡HçPHãÖ†˜ˇˇæ    Hâ«Ë¬√˛ˇHÉΩ†˜ˇˇ u#HãÖ∞˜ˇˇHâ∆Hçáø  Hâ«∏    Ëä¬˛ˇÈ
  Hçï–˛ˇˇHçÖ∞¯ˇˇπ-   æ˝   Hâ«Ë¨8  HçÖ¿˜ˇˇHçï∞¯ˇˇHçzpπ(   Hâ¬æ
   Ëà8  HçÖ ¯ˇˇHçï∞¯ˇˇHç∫‡   π(   Hâ¬æ   Ëa8  HçÖ˜ˇˇHçï∞¯ˇˇHç∫P  π(   Hâ¬æ
   Ë:8  HçÖP¯ˇˇHçï∞¯ˇˇHç∫¿  π(   Hâ¬æ   Ë8  HçÖê˜ˇˇHçï∞¯ˇˇHç∫0  π   Hâ¬æ   ËÏ7  HçÖ ˇˇˇHçï∞¯ˇˇHç∫†  π-   Hâ¬æ˝   Ë≈7  HçÖè˜ˇˇHçï∞¯ˇˇHç∫  π   Hâ¬æ   Ëû7  HçÖÄ¯ˇˇHçï∞¯ˇˇHç∫Ä  π(   Hâ¬æ   Ëw7  HçEêHçï∞¯ˇˇHç∫  π-   Hâ¬æ˝   ËS7  HçE¿Hçï∞¯ˇˇHç∫`  π-   Hâ¬æ˝   Ë/7  HçÖ0ˇˇˇHçï∞¯ˇˇHç∫–  π-   Hâ¬æ˝   Ë7  HçÖ`ˇˇˇHçï∞¯ˇˇHç∫@  π-   Hâ¬æ¸   Ë·6  HçÖî˜ˇˇHçï∞¯ˇˇHç∫∞  π   Hâ¬æ   Ë∫6  Hã\ Hçï∞¯ˇˇHâ÷Hâ«ËÍ√˛ˇÑ¿tVHãÖ∞˜ˇˇHâ∆Hç~º  Hâ«∏    Ë8¿˛ˇHã! Hç™ª  Hâ÷Hâ«Ë¿3  HãÖ†˜ˇˇHâ«ËP¬˛ˇH«Ö†˜ˇˇ    ÈÇ  HãÖ†˜ˇˇHãï∏˜ˇˇHâHãÿ Hâ«Ë ƒ˛ˇâÖò˜ˇˇÉΩò˜ˇˇduHçsª  Hâ«Ë√˛ˇÈ?  ÉΩò˜ˇˇuHãù HçSª  Hâ÷Hâ«Ë<3  Hãï®˜ˇˇHâ–H¡‡H–H¡‡Hãï†˜ˇˇH–HçPHçÖ–˛ˇˇHâ∆Hâ◊Ë÷¿˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡Hçê†   HãÖ†˜ˇˇH–HçPHçÖ ˇˇˇHâ∆Hâ◊Ëö¿˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡HçP HãÖ†˜ˇˇH–HçPHçÖ¿˜ˇˇHâ÷Hâ«Ëi7  Hãï®˜ˇˇHâ–H¡‡H–H¡‡HçP0HãÖ†˜ˇˇH–HçPHçÖ˜ˇˇHâ÷Hâ«Ë07  Hãï®˜ˇˇHâ–H¡‡H–H¡‡HçP0HãÖ†˜ˇˇH–HçPHçÖ ¯ˇˇHâ÷Hâ«Ë∞6  Hãï®˜ˇˇHâ–H¡‡H–H¡‡HçP@HãÖ†˜ˇˇH–HçPHçÖP¯ˇˇHâ÷Hâ«Ëw6  Hãï®˜ˇˇHâ–H¡‡H–H¡‡Hçê–   HãÖ†˜ˇˇH–HçPHçÖÄ¯ˇˇHâ÷Hâ«Ë;6  ÛÖê˜ˇˇHãç†˜ˇˇHãï®˜ˇˇHâ–H¡‡H–H¡‡H»HÉ¿XÛ ãïî˜ˇˇHãµ†˜ˇˇHãç®˜ˇˇHâ»H¡‡H»H¡‡HHD  âHãï®˜ˇˇHâ–H¡‡H–H¡‡Hçê‡   HãÖ†˜ˇˇH–HçP
HçEêHâ∆Hâ◊ËÂæ˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡Hçê   HãÖ†˜ˇˇH–HçPHçE¿Hâ∆Hâ◊Ë¨æ˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡HçPPHãÖ†˜ˇˇH–HçPHçÖ0ˇˇˇHâ∆Hâ◊Ësæ˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡HçêÄ   HãÖ†˜ˇˇH–HçP	HçÖ`ˇˇˇHâ∆Hâ◊Ë7æ˛ˇHãÖ®˜ˇˇHçPˇHâ–H¡‡H–H¡‡Hãï†˜ˇˇH–HçPHãç®˜ˇˇHâ»H¡‡H»H¡‡Hãç†˜ˇˇH»HÉ¿Hâ÷Hâ«Ëbø˛ˇâÖú˜ˇˇÉΩú˜ˇˇ ÑJ  Hãï®˜ˇˇHâ–H¡‡H–H¡‡Hãï†˜ˇˇH–HÉ¿Hâ∆HçÚ∏  Hâ«∏    Ë%º˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡HçP HãÖ†˜ˇˇH–HÉ¿Hâ∆Hç	π  Hâ«∏    ËÁª˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡HçP0HãÖ†˜ˇˇH–HÉ¿Hâ∆Hç‡∏  Hâ«∏    Ë©ª˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡HçP0HãÖ†˜ˇˇH–HÉ¿Hâ∆Hçπ∏  Hâ«∏    Ëkª˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡HçP@HãÖ†˜ˇˇH–HÉ¿Hâ∆Hçë∏  Hâ«∏    Ë-ª˛ˇHãç†˜ˇˇHãï®˜ˇˇHâ–H¡‡H–H¡‡H»HÉ¿XÛ fÔ…ÛZ»fH~»fHn¿Hç[∏  Hâ«∏   Ë‡∫˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡Hçê†   HãÖ†˜ˇˇH–HÉ¿Hâ∆Hç1∏  Hâ«∏    Ëü∫˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡Hçê†   HãÖ†˜ˇˇH–HÉ¿Hç
∏  Hâ÷Hâ«ËSΩ˛ˇÖ¿Öá   Hãï®˜ˇˇHâ–H¡‡H–H¡‡Hçê–   HãÖ†˜ˇˇH–HÉ¿Hâ∆Hç»∑  Hâ«∏    Ë∫˛ˇHãç†˜ˇˇHãï®˜ˇˇHâ–H¡‡H–H¡‡H»H„   ∂ æ¿â∆Hç°∑  Hâ«∏    ËŸπ˛ˇÈø   Hãï®˜ˇˇHâ–H¡‡H–H¡‡Hçê‡   HãÖ†˜ˇˇH–HÉ¿
Hâ∆Hçr∑  Hâ«∏    Ëìπ˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡Hçê   HãÖ†˜ˇˇH–HÉ¿Hâ∆HçD∑  Hâ«∏    ËRπ˛ˇHãç†˜ˇˇHãï®˜ˇˇHâ–H¡‡H–H¡‡H»HD  ã â∆Hç∑  Hâ«∏    Ëπ˛ˇø
   ËÎª˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡HçêÄ   HãÖ†˜ˇˇH–HÉ¿	Hâ∆Hç‰∂  Hâ«∏    Ë ∏˛ˇHãï®˜ˇˇHâ–H¡‡H–H¡‡HçPPHãÖ†˜ˇˇH–HÉ¿Hâ∆Hç≤∂  Hâ«∏    Ëå∏˛ˇHÉÖ®˜ˇˇÈê¯ˇˇêHãg Hâ«Ëœπ˛ˇHãX Hâ«Ëª˛ˇHãÖ†˜ˇˇHâ«Ëë∫˛ˇêHãU¯dH+%(   tË∫˛ˇ…√Û˙UHâÂHÅÏ   HÉ$ HÅÏP
  dHã%(   HâE¯1¿H«Ö‡Âˇˇ    Hç/∂  HâÖÂˇˇH«ÖËÂˇˇ    HçÖ ÊˇˇHâ«ËA/  HçÖ0ÊˇˇHâ«Ë2/  HãØ HãïÂˇˇHâ÷Hâ«ËÆ2  HâÖ¯ÂˇˇHÉΩ¯ÂˇˇˇÑ	  HãÖ¯ÂˇˇHi¿,  Hâ«ËJ∫˛ˇHâÖ‡ÂˇˇHãÖ¯ÂˇˇHi¿$  HçPHãÖ‡Âˇˇæ    Hâ«Ëm∏˛ˇHÉΩ‡Âˇˇ uHçú≤  Hâ«∏    Ë?∑˛ˇÈ≠  HçïÏˇˇHçÖ`Êˇˇπ-   æ˝   Hâ«Ëa-  HçÖpÏˇˇHçï`ÊˇˇHçzpπà  Hâ¬æ˝   Ë=-  HçÖºÂˇˇHçï`ÊˇˇHç∫‡   π   Hâ¬æ   Ë-  HçÖ»ÂˇˇHçï`ÊˇˇHç∫P  π   Hâ¬æ   ËÔ,  HçÖÃÂˇˇHçï`ÊˇˇHç∫¿  π   Hâ¬æ   Ë»,  HçÖ–ÂˇˇHçï`ÊˇˇHç∫0  π   Hâ¬æ   Ë°,  HçÖªÂˇˇHçï`ÊˇˇHç∫†  π   Hâ¬æ   Ëz,  HçÖ@ÏˇˇHçï`ÊˇˇHç∫  π-   Hâ¬æ˝   ËS,  HçÖ ÊˇˇHçï`ÊˇˇHç∫Ä  π(   Hâ¬æ
   Ë,,  HçÖ0ÊˇˇHçï`ÊˇˇHç∫  π(   Hâ¬æ
   Ë,  HçÖ‘ÂˇˇHçï`ÊˇˇHç∫`  π   Hâ¬æ   Ëﬁ+  HçÖ¿ÂˇˇHçï`ÊˇˇHç∫–  π   Hâ¬æ   Ë∑+  HçÖƒÂˇˇHçï`ÊˇˇHç∫@  π   Hâ¬æ   Ëê+  Hã* Hçï`ÊˇˇHâ÷Hâ«Ë¿∏˛ˇÑ¿t8Hã Hçû∞  Hâ÷Hâ«Ë¥(  HãÖ‡ÂˇˇHâ«ËD∑˛ˇH«Ö‡Âˇˇ    Èg  HãÖ‡ÂˇˇHãï¯ÂˇˇHâHãƒ Hâ«ËÙ∏˛ˇâÖÿÂˇˇÉΩÿÂˇˇdÑ3  ÉΩÿÂˇˇuHãô HçW∞  Hâ÷Hâ«Ë@(  HãÖËÂˇˇHi–$  HãÖ‡ÂˇˇH–HçPHçÖÏˇˇHâ∆Hâ◊Ë·µ˛ˇHãÖËÂˇˇHi¿$  HçP HãÖ‡ÂˇˇH–HçPHçÖpÏˇˇHâ∆Hâ◊ËØµ˛ˇãÖºÂˇˇHãç‡ÂˇˇHãïËÂˇˇHi“$  H HÅ¬¿  âÛÖ»ÂˇˇHãï‡ÂˇˇHãÖËÂˇˇHi¿$  H–Hƒ  Û ÛÖÃÂˇˇHãï‡ÂˇˇHãÖËÂˇˇHi¿$  H–H»  Û ÛÖ–ÂˇˇHãï‡ÂˇˇHãÖËÂˇˇHi¿$  H–HÃ  Û ∂ÖªÂˇˇHãç‡ÂˇˇHãïËÂˇˇHi“$  H HÅ¬–  àãÖƒÂˇˇHãç‡ÂˇˇHãïËÂˇˇHi“$  H HÅ¬(  âHãÖËÂˇˇHÉËHi–$  HãÖ‡ÂˇˇH–HçPHãÖËÂˇˇHi»$  HãÖ‡ÂˇˇH»HÉ¿Hâ÷Hâ«ËÙµ˛ˇâÖ‹ÂˇˇÉΩ‹Âˇˇ Ñ–  HãÖËÂˇˇHi–$  HãÖ‡ÂˇˇH–HÉ¿Hâ∆HçãØ  Hâ«∏    Ëæ≤˛ˇHãÖËÂˇˇHi¿$  HçP HãÖ‡ÂˇˇH–HÉ¿Hâ∆Hç’∞  Hâ«∏    Ëá≤˛ˇHãï‡ÂˇˇHãÖËÂˇˇHi¿$  H–H¿  ã â∆Hç∑∞  Hâ«∏    ËQ≤˛ˇHçø∞  Hâ«ËÇµ˛ˇHãï‡ÂˇˇHãÖËÂˇˇHi¿$  H–Hƒ  Û fÔ…ÛZ»fH~»fHn¿Hçó∞  Hâ«∏   Ë˙±˛ˇHãï‡ÂˇˇHãÖËÂˇˇHi¿$  H–H»  Û fÔ“ÛZ–fH~–fHn¿Hço∞  Hâ«∏   Ë≤±˛ˇHãï‡ÂˇˇHãÖËÂˇˇHi¿$  H–HÃ  Û fÔ€ÛZÿfH~ÿfHn¿Hç?∞  Hâ«∏   Ëj±˛ˇHãï‡ÂˇˇHãÖËÂˇˇHi¿$  H–H–  ∂ æ¿â∆Hç-∞  Hâ«∏    Ë0±˛ˇHç:∞  Hâ«Ëa¥˛ˇHãÖËÂˇˇHi¿$  Hçê¿  HãÖ‡ÂˇˇH–HçPHçÖ@ÏˇˇHâ∆Hâ◊Ë\≤˛ˇHãÖËÂˇˇHi¿$  Hçê  HãÖ‡ÂˇˇH–HçPHçÖ ÊˇˇHâ÷Hâ«Ë/)  HãÖËÂˇˇHi¿$  Hçê   HãÖ‡ÂˇˇH–HçPHçÖ0ÊˇˇHâ÷Hâ«Ë˙(  ÛÖ‘ÂˇˇHãï‡ÂˇˇHãÖËÂˇˇHi¿$  H–H   Û ãÖ¿ÂˇˇHãç‡ÂˇˇHãïËÂˇˇHi“$  H HÅ¬$  âãÖƒÂˇˇHãç‡ÂˇˇHãïËÂˇˇHi“$  H HÅ¬(  âHãÖËÂˇˇHi¿$  Hçê¿  HãÖ‡ÂˇˇH–HÉ¿Hâ∆HçØ  Hâ«∏    Ë–Ø˛ˇHãï‡ÂˇˇHãÖËÂˇˇHi¿$  H–H(  ã â∆Hç‚Æ  Hâ«∏    ËöØ˛ˇHãÖËÂˇˇHi¿$  Hçê  HãÖ‡ÂˇˇH–HÉ¿Hâ∆HçæÆ  Hâ«∏    Ë`Ø˛ˇHãÖËÂˇˇHi¿$  Hçê   HãÖ‡ÂˇˇH–HÉ¿Hâ∆HçúÆ  Hâ«∏    Ë&Ø˛ˇHãï‡ÂˇˇHãÖËÂˇˇHi¿$  H–H   Û fÔ‰ÛZ‡fH~‡fHn¿HçkÆ  Hâ«∏   ËﬁÆ˛ˇHãï‡ÂˇˇHãÖËÂˇˇHi¿$  H–H$  ã â∆HçIÆ  Hâ«∏    Ë®Æ˛ˇø
   Ë~±˛ˇHÉÖËÂˇˇÈÆ˘ˇˇêÎêHãn˛  Hâ«ËﬁØ˛ˇHã_˛  Hâ«Ë±˛ˇHãÖ‡ÂˇˇHâ«Ë†∞˛ˇêHãU¯dH+%(   tË+∞˛ˇ…√Û˙UHâÂHÅÏ@  HâΩ»˙ˇˇdHã%(   HâE¯1¿H«Ö‡˙ˇˇ    Hçø≠  HâÖ˙ˇˇH«ÖË˙ˇˇ    HçÖ ˚ˇˇHâ«ËU%  HçÖ0˚ˇˇHâ«ËF%  HãÖ»˙ˇˇHâ«ËìÆ˛ˇHâ¡Hãï»˙ˇˇHçÖ`˚ˇˇæ˝   Hâ«Ë¸#  Hã∆˝  Hãï˙ˇˇHçç`˚ˇˇHâŒHâ«Ë¿&  Hã¶˝  Hãï˙ˇˇHâ÷Hâ«Ëu(  HâÖ¯˙ˇˇHÉΩ¯˙ˇˇˇÑ¸  HãÖ¯˙ˇˇHi¿ƒ   Hâ«Ë∞˛ˇHâÖ‡˙ˇˇHãÖ¯˙ˇˇHi¿º   HçPHãÖ‡˙ˇˇæ    Hâ«Ë4Æ˛ˇHÉΩ‡˙ˇˇ uHçc®  Hâ«∏    Ë≠˛ˇÈö  Hçï`ˇˇˇHçÖ`˚ˇˇπ-   æ˝   Hâ«Ë(#  HçÖ–˙ˇˇHçï`˚ˇˇHçzpπ   Hâ¬æ   Ë#  HçEêHçï`˚ˇˇHç∫‡   π-   Hâ¬æ˝   Ë‡"  HçÖVˇˇˇHçï`˚ˇˇHç∫P  π
   Hâ¬æ˝   Ëπ"  HçÖ‘˙ˇˇHçï`˚ˇˇHç∫¿  π   Hâ¬æ   Ëí"  HçE¿Hçï`˚ˇˇHç∫0  π-   Hâ¬æ˝   Ën"  HçÖÿ˙ˇˇHçï`˚ˇˇHç∫†  π   Hâ¬æ   ËG"  HçÖ ˚ˇˇHçï`˚ˇˇHç∫  π(   Hâ¬æ
   Ë "  HçÖ0˚ˇˇHçï`˚ˇˇHç∫Ä  π(   Hâ¬æ
   Ë˘!  Hã√˚  Hçï`˚ˇˇHâ÷Hâ«Ë)Ø˛ˇÑ¿t8Hã¶˚  Hçß  Hâ÷Hâ«Ë  HãÖ‡˙ˇˇHâ«Ë≠≠˛ˇH«Ö‡˙ˇˇ    Èˆ  HãÖ‡˙ˇˇHãï¯˙ˇˇHâHã]˚  Hâ«Ë]Ø˛ˇâÖ‹˙ˇˇÉΩ‹˙ˇˇdÑ¬  ÉΩ‹˙ˇˇuHã2˚  Hç¿¶  Hâ÷Hâ«Ë©  HãÖË˙ˇˇHi–º   HãÖ‡˙ˇˇH–HçPHçÖ`ˇˇˇHâ∆Hâ◊ËJ¨˛ˇHãÖË˙ˇˇHi¿º   HçP0HãÖ‡˙ˇˇH–HçPHçEêHâ∆Hâ◊Ë¨˛ˇHãÖË˙ˇˇHi¿º   HçP`HãÖ‡˙ˇˇH–HçP	HçÖVˇˇˇHâ∆Hâ◊ËÈ´˛ˇHãÖË˙ˇˇHi¿º   HçPpHãÖ‡˙ˇˇH–HçPHçE¿Hâ∆Hâ◊Ë∫´˛ˇHãÖË˙ˇˇHi¿º   Hçê†   HãÖ‡˙ˇˇH–HçPHçÖ ˚ˇˇHâ÷Hâ«Ëç"  HãÖË˙ˇˇHi¿º   Hçê†   HãÖ‡˙ˇˇH–HçPHçÖ0˚ˇˇHâ÷Hâ«ËX"  ãÖ–˙ˇˇHãç‡˙ˇˇHãïË˙ˇˇHi“º   H HÉ¬8âãÖ‘˙ˇˇHãç‡˙ˇˇHãïË˙ˇˇHi“º   H HÉ¬tâãÖÿ˙ˇˇHãç‡˙ˇˇHãïË˙ˇˇHi“º   H HÅ¬®   âHãÖË˙ˇˇHi–º   HãÖ‡˙ˇˇH–HÉ¿Hâ∆Hç¶  Hâ«∏    Ë>©˛ˇHãï‡˙ˇˇHãÖË˙ˇˇHi¿º   H–HÉ¿8ã â∆HçR®  Hâ«∏    Ë
©˛ˇHãÖË˙ˇˇHi¿º   Hçê†   HãÖ‡˙ˇˇH–HÉ¿Hâ∆Hç.®  Hâ«∏    Ë–®˛ˇHãÖË˙ˇˇHi¿º   Hçê†   HãÖ‡˙ˇˇH–HÉ¿Hâ∆Hçe®  Hâ«∏    Ëñ®˛ˇHçi®  Hâ«Ë«´˛ˇHãÖË˙ˇˇHi¿º   HçP0HãÖ‡˙ˇˇH–HÉ¿Hâ∆HçÇß  Hâ«∏    ËP®˛ˇHãÖË˙ˇˇHi¿º   HçP`HãÖ‡˙ˇˇH–HÉ¿	Hâ∆Hç®  Hâ«∏    Ë®˛ˇHãï‡˙ˇˇHãÖË˙ˇˇHi¿º   H–HÉ¿tã â∆HçÎß  Hâ«∏    ËÂß˛ˇHãÖË˙ˇˇHi¿º   HçPpHãÖ‡˙ˇˇH–HÉ¿Hâ∆HçÕß  Hâ«∏    ËÆß˛ˇHãï‡˙ˇˇHãÖË˙ˇˇHi¿º   H–H®   ã â∆Hçßß  Hâ«∏    Ëxß˛ˇHÉÖË˙ˇˇÈ¸ˇˇêÎêHãx˜  Hâ«Ë∏®˛ˇHãi˜  Hâ«Ë˘©˛ˇHãÖ‡˙ˇˇHâ«Ëz©˛ˇêHãU¯dH+%(   tË©˛ˇ…√Û˙UHâÂHÅÏ  âΩ˙ˇˇdHã%(   HâE¯1¿H«Ö0˙ˇˇ    Hç'ß  HâÖ@˙ˇˇH«Ö8˙ˇˇ    HçÖP˙ˇˇHâ«Ë0  HçÖÄ˙ˇˇHâ«Ë!  HçÖ∞˙ˇˇHâ«Ë  HçÖ‡˙ˇˇHâ«Ë  Hçï˙ˇˇHçÖ˚ˇˇπ   æ   Hâ«Ë∆  Hãòˆ  Hãï@˙ˇˇHçç˚ˇˇHâŒHâ«Ëä  Hãxˆ  Hãï@˙ˇˇHâ÷Hâ«Ë?!  HâÖH˙ˇˇHÉΩH˙ˇˇˇÑ  HãÖH˙ˇˇH¡‡Hâ«Ëﬁ®˛ˇHâÖ0˙ˇˇHãÖH˙ˇˇHÉ¿Hç≈    HãÖ0˙ˇˇæ    Hâ«Ë ß˛ˇHÉΩ0˙ˇˇ u#HãÖ@˙ˇˇHâ∆Hç≈¢  Hâ«∏    Ë»•˛ˇÈû  Hçï ˇˇˇHçÖ˚ˇˇπ-   æ˝   Hâ«ËÍ  HçÖ0ˇˇˇHçï˚ˇˇHçzpπ-   Hâ¬æ˝   Ë∆  HçÖ`ˇˇˇHçï˚ˇˇHç∫‡   π-   Hâ¬æ˝   Ëü  HçEêHçï˚ˇˇHç∫P  π-   Hâ¬æ˝   Ë{  HçE¿Hçï˚ˇˇHç∫¿  π-   Hâ¬æ˝   ËW  HçÖP˙ˇˇHçï˚ˇˇHç∫0  π(   Hâ¬æ
   Ë0  HçÖ∞˙ˇˇHçï˚ˇˇHç∫†  π(   Hâ¬æ   Ë	  HçÖÄ˙ˇˇHçï˚ˇˇHç∫  π(   Hâ¬æ
   Ë‚  HçÖ‡˙ˇˇHçï˚ˇˇHç∫Ä  π(   Hâ¬æ   Ëª  HãçÙ  Hçï˚ˇˇHâ÷Hâ«ËÎß˛ˇÑ¿tVHãÖ@˙ˇˇHâ∆Hç†  Hâ«∏    Ë9§˛ˇHãRÙ  Hç´ü  Hâ÷Hâ«Ë¡  HãÖ0˙ˇˇHâ«ËQ¶˛ˇH«Ö0˙ˇˇ    È‹  HãÖ0˙ˇˇHãïH˙ˇˇHâHã	Ù  Hâ«Ë®˛ˇâÖ,˙ˇˇÉΩ,˙ˇˇduHçtü  Hâ«Ëß˛ˇÈô  ÉΩ,˙ˇˇuHãŒÛ  HçTü  Hâ÷Hâ«Ë=  Hãï8˙ˇˇHâ–H¡‡H–H¿H–Hãï0˙ˇˇH–HçPHçÖ ˇˇˇHâ∆Hâ◊Ë’§˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–HçP HãÖ0˙ˇˇH–HçPHçÖ0ˇˇˇHâ∆Hâ◊Ëö§˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–HçPPHãÖ0˙ˇˇH–HçPHçÖ`ˇˇˇHâ∆Hâ◊Ë_§˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–HçêÄ   HãÖ0˙ˇˇH–HçPHçEêHâ∆Hâ◊Ë$§˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–Hçê∞   HãÖ0˙ˇˇH–HçPHçE¿Hâ∆Hâ◊ËÈ£˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–Hçê‡   HãÖ0˙ˇˇH–HçP	HçÖP˙ˇˇHâ÷Hâ«Ë≥  Hãï8˙ˇˇHâ–H¡‡H–H¿H–Hçê   HãÖ0˙ˇˇH–HçP
HçÖÄ˙ˇˇHâ÷Hâ«Ëu  Hãï8˙ˇˇHâ–H¡‡H–H¿H–Hçê‡   HãÖ0˙ˇˇH–HçPHçÖ∞˙ˇˇHâ÷Hâ«Ë  Hãï8˙ˇˇHâ–H¡‡H–H¿H–Hçê   HãÖ0˙ˇˇH–HçPHçÖ‡˙ˇˇHâ÷Hâ«Ë≤  Hãï8˙ˇˇHâ–H¡‡H–H¿H–Hãï0˙ˇˇH–HÉ¿Hâ∆Hçû  Hâ«∏    ËE°˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–HçP HãÖ0˙ˇˇH–HÉ¿Hâ∆Hçóû  Hâ«∏    Ë°˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–HçPPHãÖ0˙ˇˇH–HÉ¿Hâ∆Hç°  Hâ«∏    Ë≈†˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–HçêÄ   HãÖ0˙ˇˇH–HÉ¿Hâ∆HçÏ†  Hâ«∏    ËÇ†˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–Hçê∞   HãÖ0˙ˇˇH–HÉ¿Hâ∆Hçπ†  Hâ«∏    Ë?†˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–Hçê‡   HãÖ0˙ˇˇH–HÉ¿	Hâ∆Hçù  Hâ«∏    Ë¸ü˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–Hçê‡   HãÖ0˙ˇˇH–HÉ¿Hâ∆Hçú  Hâ«∏    Ëπü˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–Hçê   HãÖ0˙ˇˇH–HÉ¿
Hâ∆Hçƒú  Hâ«∏    Ëvü˛ˇHãï8˙ˇˇHâ–H¡‡H–H¿H–Hçê   HãÖ0˙ˇˇH–HÉ¿Hâ∆Hçøü  Hâ«∏    Ë3ü˛ˇHÉÖ8˙ˇˇÈ6˚ˇˇêHã>Ô  Hâ«Ëv†˛ˇHã/Ô  Hâ«Ë∑°˛ˇHãÖ0˙ˇˇHâ«Ë8°˛ˇêHãU¯dH+%(   tË√†˛ˇ…√Û˙UHâÂHÅÏ–  HâΩ8˝ˇˇdHã%(   HâE¯1¿H«ÖP˝ˇˇ    HçAü  HâÖ`˝ˇˇH«ÖX˝ˇˇ    HãÖ8˝ˇˇHâ«ËIü˛ˇHâ¡Hãï8˝ˇˇHçÖp˝ˇˇæ˝   Hâ«Ë≤  HãåÓ  Hãï`˝ˇˇHççp˝ˇˇHâŒHâ«Ëv  HãlÓ  Hãï`˝ˇˇHâ÷Hâ«Ë+  HâÖh˝ˇˇHÉΩh˝ˇˇˇÑ{  HãÖh˝ˇˇH¡‡Hâ«Ë †˛ˇHâÖP˝ˇˇHãÖh˝ˇˇHÉ¿Hç≈    HãÖP˝ˇˇæ    Hâ«ËÏû˛ˇHÉΩP˝ˇˇ u#HãÖ`˝ˇˇHâ∆Hç±ö  Hâ«∏    Ë¥ù˛ˇÈ  Hçï0ˇˇˇHçÖp˝ˇˇπ-   æ˝   Hâ«Ë÷  HçÖ`ˇˇˇHçïp˝ˇˇHçzpπ-   Hâ¬æ˝   Ë≤  HçEêHçïp˝ˇˇHç∫‡   π-   Hâ¬æ˝   Ëé  HçE¿Hçïp˝ˇˇHç∫P  π-   Hâ¬æ¸   Ëj  HãDÌ  Hçïp˝ˇˇHâ÷Hâ«Ëö†˛ˇÑ¿tVHãÖ`˝ˇˇHâ∆Hç.ô  Hâ«∏    ËËú˛ˇHã	Ì  HçZò  Hâ÷Hâ«Ëp  HãÖP˝ˇˇHâ«Ë ü˛ˇH«ÖP˝ˇˇ    È  HãÖP˝ˇˇHãïh˝ˇˇHâHã¿Ï  Hâ«Ë∞†˛ˇâÖL˝ˇˇÉΩL˝ˇˇduHç#ò  Hâ«Ë≤ü˛ˇÈÃ  ÉΩL˝ˇˇuHãÖÏ  Hçò  Hâ÷Hâ«ËÏ  HãÖX˝ˇˇHi–¥   HãÖP˝ˇˇH–HçPHçÖ0ˇˇˇHâ∆Hâ◊Ëçù˛ˇHãÖX˝ˇˇHi¿¥   HçP HãÖP˝ˇˇH–HçPHçÖ`ˇˇˇHâ∆Hâ◊Ë[ù˛ˇHãÖX˝ˇˇHi¿¥   HçPPHãÖP˝ˇˇH–HçPHçEêHâ∆Hâ◊Ë,ù˛ˇHãÖX˝ˇˇHi¿¥   HçêÄ   HãÖP˝ˇˇH–HçPHçE¿Hâ∆Hâ◊Ë˙ú˛ˇHãÖX˝ˇˇHi–¥   HãÖP˝ˇˇH–HÉ¿Hâ∆Hç$ò  Hâ«∏    ËWõ˛ˇHãÖX˝ˇˇHi¿¥   HçP HãÖP˝ˇˇH–HÉ¿Hâ∆Hç”õ  Hâ«∏    Ë õ˛ˇHãÖX˝ˇˇHi¿¥   HçPPHãÖP˝ˇˇH–HÉ¿Hâ∆HçÆõ  Hâ«∏    ËÈö˛ˇHãÖX˝ˇˇHi¿¥   HçêÄ   HãÖP˝ˇˇH–HÉ¿Hâ∆HçÇõ  Hâ«∏    ËØö˛ˇHÉÖX˝ˇˇÈ˛ˇˇêHã¬Í  Hâ«ËÚõ˛ˇHã≥Í  Hâ«Ë3ù˛ˇHãÖP˝ˇˇHâ«Ë¥ú˛ˇêHãU¯dH+%(   tË?ú˛ˇ…√Û˙UHâÂHÅÏ`  HâΩ®˛ˇˇdHã%(   HâE¯1¿H«Ö¿˛ˇˇ    Hç˛ö  HâÖ–˛ˇˇH«Ö»˛ˇˇ    HçÖ‡˛ˇˇHâ«Ëi  HãÖ®˛ˇˇHâ«Ë∂ö˛ˇHâ¡Hãï®˛ˇˇHçÖˇˇˇæ˝   Hâ«Ë  HãÍ  Hãï–˛ˇˇHççˇˇˇHâŒHâ«Ë„  Hã·È  Hãï–˛ˇˇHâ÷Hâ«Ëò  HâÖÿ˛ˇˇHÉΩÿ˛ˇˇˇÑC  Hãïÿ˛ˇˇHâ–H¡‡H–HçÖ    H–H¡‡Hâ«Ë"ú˛ˇHâÖ¿˛ˇˇHãÖÿ˛ˇˇHk¿\HçPHãÖ¿˛ˇˇæ    Hâ«ËHö˛ˇHÉΩ¿˛ˇˇ uHçö  Hâ«∏    Ëô˛ˇÈ“  Hçï∏˛ˇˇHçÖˇˇˇπ   æ   Hâ«Ë<  HçÖ‡˛ˇˇHçïˇˇˇHçzpπ(   Hâ¬æ
   Ë  Hã˙Ë  HçïˇˇˇHâ÷Hâ«ËHú˛ˇÑ¿t8Hã›Ë  Hç&î  Hâ÷Hâ«Ë<  HãÖ¿˛ˇˇHâ«ËÃö˛ˇH«Ö¿˛ˇˇ    È9  HãÖ¿˛ˇˇHãïÿ˛ˇˇHâHãîË  Hâ«Ë|ú˛ˇâÖº˛ˇˇÉΩº˛ˇˇdÑ  ÉΩº˛ˇˇuHãiË  Hçﬂì  Hâ÷Hâ«Ë»  ãÖ∏˛ˇˇHãç¿˛ˇˇHãï»˛ˇˇHk“\H HÉ¬âHãÖ»˛ˇˇHk¿\HçP@HãÖ¿˛ˇˇH–HçPHçÖ‡˛ˇˇHâ÷Hâ«ËO  HãÖ®˛ˇˇHâ∆HçÍò  Hâ«∏    Ëπó˛ˇHãï¿˛ˇˇHãÖ»˛ˇˇHk¿\H–HÉ¿ã â∆Hç…ò  Hâ«∏    Ëàó˛ˇHãÖ»˛ˇˇHk¿\HçP@HãÖ¿˛ˇˇH–HÉ¿Hâ∆Hç∞ò  Hâ«∏    ËTó˛ˇHÉÖ»˛ˇˇÈ‹˛ˇˇêÎêHãlÁ  Hâ«Ëîò˛ˇHã]Á  Hâ«Ë’ô˛ˇHãÖ¿˛ˇˇHâ«ËVô˛ˇêHãU¯dH+%(   tË·ò˛ˇ…√Û˙UHâÂ∂Ë  Ñ¿tæ   Hç@Á  Hâ«Ëhó˛ˇø    Ëô˛ˇÛ˙UHâÂHÅÏ¿   HâΩXˇˇˇâµTˇˇˇHâïHˇˇˇâ»àÖPˇˇˇdHã%(   HâE¯1¿HãÖXˇˇˇHâ∆HçÓó  Hâ«∏    Ëvñ˛ˇÄΩPˇˇˇ Ñ›   Hã"‚  Hâ«Ëzò˛ˇHã#‚  Hâ«Ëò˛ˇâ¬HçE∞Hâ∆â◊Ë+ò˛ˇÖ¿u|HãE∞HãU∏HâÖpˇˇˇHâïxˇˇˇHãE¿HãU»HâEÄHâUàHãE–HãUÿHâEêHâUòHãE‡HâE†ãEËâE®ãÖ|ˇˇˇÉ‡∑âÖ|ˇˇˇHã≠·  Hâ«Ëïó˛ˇâ¡HçÖpˇˇˇHâ¬æ   âœË]ò˛ˇÎ/HçÖpˇˇˇ∫<   æ    Hâ«Ë≤ñ˛ˇHçE∞∫<   æ    Hâ«Ëúñ˛ˇHãU·  ãçTˇˇˇHãÖHˇˇˇâŒHâ«Ëﬁò˛ˇHÖ¿t(HãÖHˇˇˇHç…ñ  Hâ÷Hâ«Ë`ï˛ˇHãïHˇˇˇH–∆  Î#Hç™ñ  Hâ«Ërò˛ˇHãÎ‡  Hâ«ËCó˛ˇË˛ˇˇHãÖHˇˇˇHâ«Ëœï˛ˇHçPãÖTˇˇˇHòH9¬uJêË»ó˛ˇâÖlˇˇˇÉΩlˇˇˇˇt	ÉΩlˇˇˇ
u„ÉΩlˇˇˇˇu#Hç@ñ  Hâ«Ëò˛ˇHãÅ‡  Hâ«ËŸñ˛ˇËµ˝ˇˇÄΩPˇˇˇ tGHãd‡  Hâ¡∫   æ   Hç˛ï  Hâ«Ë∏ò˛ˇHãQ‡  Hâ«Ë9ñ˛ˇâ¡HçE∞Hâ¬æ   âœËó˛ˇHãÖHˇˇˇHãU¯dH+%(   tË)ñ˛ˇ…√Û˙UHâÂSHÉÏ8Hâ}ÿâ»Dâ«âÒàM‘àU–àEÃâ¯àE»æE‘â«Ë&ó˛ˇàE‘æE–â«Ëó˛ˇàE–Ä}Ã tæE‘â«ËÙó˛ˇàEË∂E–àEÈÎ∂E‘àEËæE–â«Ë÷ó˛ˇàEÈæMÈæUËHãEÿHâ∆HçFï  Hâ«∏    Ë∞ì˛ˇ«EÏ    Ëtñ˛ˇàEÎ∆EÍ Ä}Î
tÎÉEÏË\ñ˛ˇàEÍÄ}ÍˇtÄ}Í
uËÄ}ÎˇtÄ}Íˇu#Hç⁄î  Hâ«Ë¢ñ˛ˇHãﬂ  Hâ«Ësï˛ˇËO¸ˇˇÉ}Ï èå   Ä}Î
u	∂EÃÈÉ   ∂EÎ:E‘u∏   Îs∂EÎ:E–u∏    Îcæ]ÎæE‘â«Ëó˛ˇ9√uÄ}Ã u
Ä}» Ñˇˇˇ∏   Î9æ]ÎæE–â«Ë‹ñ˛ˇ9√Öˇˇˇ∂EÃÉÑ¿u
Ä}» ÑÏ˛ˇˇ∏    ÎêÈﬂ˛ˇˇHã]¯…√Û˙UHâÂSHÉÏXHâ}∏Hâu∞âU¨dHã%(   HâEË1¿Hâ‡Hâ√ãE¨¿HòHâ¬HÉÍHâUÿIâ¬Aª    Iâ¿Aπ    ∫   HÉÍH–æ   ∫    H˜ˆHk¿Hâ¡HÅ· ˇˇHâ‚H) H9‘tHÅÏ   HÉå$¯   ÎÈHâ¬Å‚ˇ  H)‘Hâ¬Å‚ˇ  HÖ“t%ˇ  HÉËH‡HÉ Hâ‡HÉ¿ HâE‡«E–    «EÃ    Î:ãEÃHc–HãE∞HçãE–çPâU–∂	HãU‡HòàãE–çPâU–HãU‡Hò∆/ÉEÃãEÃ;E¨|æãE–ÉËHãU‡Hò∆ HãU‡HãE∏Hâ∆Hçì  Hâ«∏    Ëaë˛ˇ«E‘    Ë%î˛ˇàE Ä} 
Ññ   ÎÉE‘Ëî˛ˇàEÀÄ}ÀˇtÄ}À
uËÄ} ˇtÄ}Àˇu#Hçãí  Hâ«ËSî˛ˇHãÃ‹  Hâ«Ë$ì˛ˇË ˙ˇˇÉ}‘M«EÃ    Î1ãEÃHc–HãE∞H–∂ 8E u∂E Hâ‹HãUËdH+%(   t$ÎÉEÃãEÃ;E¨|«È2ˇˇˇêÈ,ˇˇˇêÈ&ˇˇˇËÅí˛ˇHã]¯…√Û˙UHâÂHç,í  Hâ«∏    Ëê˛ˇê]√Û˙UHâÂHÉÏHçí  Hâ«Ë°ì˛ˇêË+ì˛ˇàEˇÄ}ˇ
uÚêê…√Û˙UHâÂSHÉÏHâ}ÃHâu¿HâU∏dHã%(   HâEË1¿Hâ‡Hâ√HãE¿Hâ¬HÉÍHâUÿIâ¬Aª    Iâ¿Aπ    ∫   HÉÍH–ø   ∫    H˜˜Hk¿Hâ¡HÅ· ˇˇHâ‚H) H9‘tHÅÏ   HÉå$¯   ÎÈHâ¬Å‚ˇ  H)‘Hâ¬Å‚ˇ  HÖ“t%ˇ  HÉËH‡HÉ Hâ‡HÉ¿ HâE‡HãM¿HãU‡Hãu∏ãEÃâ«ËAê˛ˇHãJ€  HãU‡Hç'ë  HâŒHâ«∏    ËOí˛ˇHâ‹êHãEËdH+%(   tËë˛ˇHã]¯…√Û˙UHâÂHÉÏ0Hâ}ËHâu‡HâUÿHãM‡HãEË∫   HâŒHâ«Ëë˛ˇâE¸É}¸ tUÉ}¸u-ø   ËHè˛ˇHâ¬Hãæ⁄  Hç∑ê  HâŒHâ«∏    Ë«ë˛ˇÎ"Hãû⁄  HãUÿHçõê  HâŒHâ«∏    Ë£ë˛ˇãE¸…√Û˙UHâÂHçüê  Hâ¬Hç•ê  Hâ∆Hçªﬂ  Hâ«ËBˇˇˇÖ¿t
∏    Èè   Hç∑ê  Hâ¬Hçƒê  Hâ∆Hç ﬂ  Hâ«ËˇˇˇÖ¿t∏    ÎaHç–ê  Hâ¬Hç‡ê  Hâ∆Hç‹ﬂ  Hâ«Ë„˛ˇˇÖ¿t∏    Î3Hç¿ê  Hâ¬Hçœê  Hâ∆HçÓﬂ  Hâ«Ëµ˛ˇˇÖ¿t∏    Î∏   ]√Û˙UHâÂHÉÏ Hâ}ËHâu‡ËˇˇˇHãuËHãE‡A∏   π    ∫    Hâ«Ëê˛ˇâEÙÉ}Ù t>É}Ùt8Hãu‡ãEÙπ    ∫    â«ËDé˛ˇHâE¯HãU‡HãM¯ãEÙHâŒâ«Ë˝ˇˇ∏    ÎË©   É}Ù î¿…√Û˙UHâÂHÉÏHâ}¯HãE¯Hçkﬁ  Hâ÷Hâ«ËLˇˇˇ…√Û˙UHâÂHÉÏHâ}¯HãE¯HçÉﬁ  Hâ÷Hâ«Ë$ˇˇˇ…√Û˙UHâÂHÉÏHâ}¯HãE¯Hçõﬁ  Hâ÷Hâ«Ë¸˛ˇˇ…√Û˙UHâÂHÉÏHâ}¯HãE¯Hç≥ﬁ  Hâ÷Hâ«Ë‘˛ˇˇ…√Û˙UHâÂHçﬁ  Hâ«Ë?é˛ˇHç»›  Hâ«Ë0é˛ˇHç9ﬁ  Hâ«Ë!é˛ˇHçjﬁ  Hâ«Ëé˛ˇê]√Û˙UHâÂATSHÉÏHâ}ËHâu‡Hã!ÿ  HãU‡Hç&è  HâŒHâ«∏    Ë&è˛ˇHÉ}Ë tMHãEËHâ«Ëç˛ˇIâƒHãEËHâ«Ë§å˛ˇHâ√HãEËHâ«Ë≈ç˛ˇâ¬HãÃ◊  Mâ‡HâŸHç5”é  Hâ«∏    Ë“é˛ˇêHÉƒ[A\]√Û˙UHâÂATSHÉÏHâ}ËHâu‡Hãä◊  HãU‡Hçèé  HâŒHâ«∏    Ëèé˛ˇHÉ}Ë tMHãEËHâ«Ëúé˛ˇIâƒHãEËHâ«Ëçå˛ˇHâ√HãEËHâ«Ë^å˛ˇâ¬Hã5◊  Mâ‡HâŸHç5<é  Hâ«∏    Ë;é˛ˇêHÉƒ[A\]√Û˙UHâÂHÉÏ0Hâ}ËHâu‡HâUÿdHã%(   HâE¯1¿∆E˜HãEÿHâ«ËJå˛ˇHãUËHâHãEËHã HÖ¿uHãEÿHç‰ç  Hâ÷Hâ«Ë	ˇˇˇ∏    ÎfHãE‡Hâ«Ë~ã˛ˇHâ¬HãEËHã HãM‡HâŒHâ«ËÂä˛ˇÖ¿t HãEËHã Hç¬ç  Hâ÷Hâ«Ë)˛ˇˇ∏    ÎHãEËHã HçU˜æ    Hâ«Ëπç˛ˇ∏   HãU¯dH+%(   tË0å˛ˇ…√Û˙UHâÂHÉÏHâ}¯HâuHãUHãE¯Hâ÷Hâ«Ë_˛ˇˇHãE¯Hâ«Ë€ç˛ˇø   Ëaå˛ˇÛ˙UHâÂHÉÏ Hâ}¯HâuHâUËâ»àE‰HãUËHãEHâ÷Hâ«ËÇ˝ˇˇÄ}‰ tHãEHâ«Ëã˛ˇHãE¯Hâ«ËÉç˛ˇø   Ë	å˛ˇÛ˙UHâÂHÉÏ Hâ}¯âuÙHâUËHâM‡HãE¯∫p   æ    Hâ«Ëòä˛ˇHãE¯ãUÙâP`HãE¯HãUËHâPHãE¯HãU‡HâP@ê…√Û˙UHâÂHÉÏHâ}¯HâuHãE∫(   æ    Hâ«ËIä˛ˇHãEHçpHãEHçHHãUHãE¯IâHç5bå  Hâ«∏    Ëöä˛ˇHãE«@$    ê…√Û˙UHâÂHÉÏHâ}¯HâuHãE∫(   æ    Hâ«Ë‚â˛ˇHãEHçHHãEHçPHãE¯Hç5å  Hâ«∏    Ë:ä˛ˇHãE«@$   ê…√Û˙UHâÂHÉÏHâ}¯HãE¯∫(   æ    Hâ«ËÜâ˛ˇHãE¯«@$   ê…√Û˙UHâÂHÉÏHâ}¯HãE¯∫(   æ    Hâ«ËRâ˛ˇHãE¯«@$    ê…√Û˙UHâÂHÉÏHâ}¯HâuHãE¯ãpHãE¯ãHHãE¯Dã@HãE¯ãxHãE¯ãHãEVQEâ¡Aâ¯â—HçIã  æ   Hâ«∏    ËVã˛ˇHÉƒê…√Û˙UHâÂHÉÏHâ}¯HâuHãE¯ãHHãE¯ãPHãEAâ»â—HçÙä  æ   Hâ«∏    Ëã˛ˇê…√Û˙UHâÂHÉÏHâ}¯HâuHãE¯ãpHãE¯ãHHãE¯ãHãEAâÒAâ»â—Hç∆ä  æ   Hâ«∏    Ëªä˛ˇê…√Û˙UHâÂHÉÏHâ}¯HâuHãE¯Hâ«Ë»á˛ˇÖ¿t8HãEHâ∆Hççä  Hâ«∏    Ë˘Ü˛ˇHãE¯HçÜä  Hâ÷Hâ«ËÑ˙ˇˇ∏ˇˇˇˇÎ∏    …√Û˙UHâÂHÉÏ Hâ}¯HâuHâUËHãUHãE¯Hâ÷Hâ«Ë∫ä˛ˇÑ¿t:HãEËHâ∆Hçä  Hâ«∏    ËãÜ˛ˇHãE¯Hç8ä  Hâ÷Hâ«Ë˙ˇˇH«¿ˇˇˇˇÎOHãE¯Hâ«Ëá˛ˇÖ¿t:HãEËHâ∆Hç’â  Hâ«∏    ËAÜ˛ˇHãE¯HçŒâ  Hâ÷Hâ«ËÃ˘ˇˇH«¿ˇˇˇˇÎ∏    …√Û˙UHâÂHÉÏ0Hâ}ËHâu‡HâUÿHãU‡HãEËHâ÷Hâ«ËÄâ˛ˇÑ¿t;HãEÿHâ∆Hç∑â  Hâ«∏    Ë—Ö˛ˇHãEËHç∂â  Hâ÷Hâ«Ë\˘ˇˇ∏ˇˇˇˇÈ®   HãEËHâ«ËÖÜ˛ˇÖ¿t8HãEÿHâ∆Hç¨â  Hâ«∏    ËÜÖ˛ˇHãEËHç£â  Hâ÷Hâ«Ë˘ˇˇ∏ˇˇˇˇÎ`HãEËHâ«Ë}â˛ˇâE¸É}¸dt>É}¸uÂHãEÿHâ∆HçYâ  Hâ«∏    Ë3Ö˛ˇHãEËHçsâ  Hâ÷Hâ«Ëæ¯ˇˇ∏ˇˇˇˇÎêHãEËHâ«ËâÖ˛ˇ…√Û˙UHâÂHÉÏHâ}¯HâuHãE¯Hâ«ËóÖ˛ˇÖ¿t:HãEHâ∆HçÓà  Hâ«∏    Ë»Ñ˛ˇHãE¯Hç%â  Hâ÷Hâ«ËS¯ˇˇH«¿ˇˇˇˇÎVHãE¯Hâ«Ë}Ö˛ˇÖ¿t:HãEHâ∆Hç§à  Hâ«∏    Ë~Ñ˛ˇHãE¯Hçõà  Hâ÷Hâ«Ë	¯ˇˇH«¿ˇˇˇˇÎHãE¯Hâ«Ë”Ñ˛ˇ…√Û˙UHâÂSHÉÏ(Hâ}ÿHâu–HÉ}ÿ uHãE–Hâ«Ë	à˛ˇÎ]HÉ}– tRHãEÿHâ«Ë‘Ñ˛ˇHâ√HãE–Hâ«Ë≈Ñ˛ˇHÿHÉ¿HâE‡HãU‡HãEÿHâ÷Hâ«Ëáá˛ˇHâEËHãU–HãEËHâ÷Hâ«ËÄá˛ˇÎHãEÿHã]¯…√Û˙UHâÂHÉÏHâ}¯HãE¯Hç1à  Hâ÷Hâ«ËÓÉ˛ˇHÖ¿tHãE¯æ}   Hâ«Ë¯É˛ˇHÖ¿t∏   Î∏    É‡…√Û˙UHâÂHÉÏ Hâ}ËHãEËHâ«ËÑ˛ˇHÉ¿Hâ«Ë
Ü˛ˇHâE¯HãUËHãE¯Hç¬á  HâŒHâ«∏    ËWÉ˛ˇHãE¯…√Û˙UHâÂHÉÏ@Hâ}»dHã%(   HâE¯1¿HãE»Hâ«ËÑˇˇˇHâE»HãE»HâE‡H«EË    HÉ}» Ñ∞   HãE»Hâ«ËˇˇˇÑ¿Ñú   HçUÿHãE‡Hç<á  HâŒHâ«ËyÜ˛ˇHâ¬HãEËHâ÷Hâ«ËF˛ˇˇHâEËHçEÿHâ¬Hçá  Hâ∆ø    ËHÜ˛ˇHâEHÉ} t3HãEHÉ¿Hâ«ËΩÑ˛ˇHâ¬HãEËHâ÷Hâ«Ë˙˝ˇˇHâEËH«E‡    ÈwˇˇˇêHãE»Hâ«ËmÑ˛ˇHãEËÎHãE»HãU¯dH+%(   tËÔÉ˛ˇ…√Û˙UHâÂHâ}ËHãEË∂ <#u∏   ÎA«E¸    ÎÉE¸ãE¸Hc–HãEËH–∂ <#u∏   ÎãE¸Hc–HãEËH–∂ < tÕ∏    ]√Û˙UHâÂHÉÏ0Hâ}ËHâu‡â–àE‹HÉ}‡ t7HãE‡Hâ«Ë_˛ˇˇHâE¯∂U‹HãE¯HçHHãEËHâŒHâ«ËëÑ˛ˇHãE¯Hâ«ËïÉ˛ˇê…√Û˙UHâÂHÉÏ@Hâ}»âàEƒdHã%(   HâE¯1¿H«E–    H«E‡    ÎgHãE–Hâ«ËˇˇˇÉÑ¿tTHãE–HçUÿHçãÖ  HâŒHâ«ËøÑ˛ˇHâEËHçEÿHâ¬HçpÖ  Hâ∆ø    Ë†Ñ˛ˇHâE∂UƒHãMHãEËHâŒHâ«Ë	ˇˇˇHãU»HçM‡HçE–HâŒHâ«Ë.É˛ˇHÉ¯ˇÖxˇˇˇHãE–Hâ«Ë»Ç˛ˇêHãE¯dH+%(   tËSÇ˛ˇ…√Û˙UHâÂAWAVAUATSHÉÏ8Hâ}®dHã%(   HâE»1¿Hâ‡Hâ√HãE®Hâ«Ë˜Ä˛ˇHÉ¿Hâ¬HÉÍHâU∏Iâ∆Aø    IâƒAΩ    ∫   HÉÍH–æ   ∫    H˜ˆHk¿Hâ¡HÅ· ˇˇHâ‚H) H9‘tHÅÏ   HÉå$¯   ÎÈHâ¬Å‚ˇ  H)‘Hâ¬Å‚ˇ  HÖ“t%ˇ  HÉËH‡HÉ Hâ‡HÉ¿ HâE¿HãU®HãE¿Hç#Ñ  HâŒHâ«∏    ËÆ˛ˇHãE¿HçÑ  Hâ÷Hâ«ËòÅ˛ˇHâ‹HãU»dH+%(   tË1Å˛ˇHçeÿ[A\A]A^A_]√Û˙UHâÂHÉÏ Hâ}ËâàE‰HãEËHâ«Ë∞˛ˇˇHâE¯HÉ}¯ u(HãEËHç®É  Hâ÷Hâ«Ë0Å˛ˇHâE¯HÉ}¯ u∏ˇˇˇˇÎ#∂U‰HãE¯â÷Hâ«Ëä˝ˇˇHãE¯Hâ«ËpÄ˛ˇ∏    …√ Û˙HÉÏHÉƒ√                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Fallimento malloc su mezzo (Autista)
   ********************************* *   INTERFACCIA AUTISTA    *  *********************************
      *** Quale operazione vorresti eseguire? ***
    1) Consulta i viaggi ed i mezzi a cui sei assegnato     2) Consulta le localit√† ed i dati temporali delle mete previste per un viaggio  3) Consulta le mappe   4) Aggiorna il valore del conta km dopo un viaggio 5) Esci Select an option Sy˛ˇ_y˛ˇky˛ˇwy˛ˇçy˛ˇ********************************* *   Interfaccia cliente     * *********************************
      *** Quale operazione vorresti eseguire? ***
    1) Visualizza i tour disponibili ed i relativi viaggi previsti  2) Consulta le mete relative ad un viaggio      3) Consulta i servizi offerti da un albergo     4) Consulta i comfort presenti su un modello 5) Esci  Scegli un opzione?    ay˛ˇmy˛ˇyy˛ˇÖy˛ˇëy˛ˇVuoi cancellare questo viaggio? (s/n)   Vuoi cancellare questo tour? (s/n)      Vuoi cancellare questo ricambio? (s/n)  Vuoi cancellare questa revisione? (s/n) Vuoi cancellare questo mezzo? (s/n)     Vuoi cancellare questa prenotazione? (s/n)      Vuoi cancellare questo cliente? (s/n)   Vuoi cancellare questa associazione? (s/n)      Vuoi cancellare queste competenze? (s/n)        Vuoi cancellare questo dipendente? (s/n)        Vuoi cancellare questa relazione foto-modello? (s/n)    Vuoi cancellare questa relazione foto-meta? (s/n)       Vuoi cancellare questa offerta? (s/n)   Vuoi cancellare questo utente? (s/n)    Vuoi cancellare questo posto prenotato? (s/n)   Vuoi cancellare questo modello? (s/n)   Vuoi cancellare questo tagliando? (s/n) Vuoi cancellare questa meta? (s/n)      Vuoi cancellare questa visita? (s/n)    Vuoi cancellare questa localita? (s/n)  Vuoi cancellare questa camera? (s/n)    Vuoi cancellare questa mappa? (s/n)     Vuoi cancellare questa foto? (s/n)      Vuoi cancellare questo comfort? (s/n)   Vuoi cancellare questo servizio? (s/n)  Vuoi cancellare questa sostituzione? (s/n)      Vuoi cancellare questa relazione tra revisione e tagliando? (s/n)       Vuoi cancellare questa relazione tra comfort e modello? (s/n)   Fallimento malloc su cliente (hostess) 
        Fallimento malloc su prenotazione (hostess) 
   Fallimento malloc su postoprenotato (hostess) 
 Fallimento malloc su viaggio (hostess) 
        Fallimento malloc soggiorno (hostess) 
 Fallimento malloc utente  (hostess) 
   ********************************* *   INTERFACCIA HOSTESS    *  *********************************
      *** Quale operazione vorresti eseguire? ***
 1) Consultare prenotazioni 2) Inserire un nuovo cliente    3) Inserire una nuova prenotazione      4) Conferma prenotazione ed intestazione posti 5) Esci Scegli un opzione    è~˛ˇ•~˛ˇ≈~˛ˇ€~˛ˇ˛ˇ

Allocazione avvenuta.
        ** Dettagli inserimento utente **
 Inserisci la mail:  Inserisci la password:   
 Autista =	1; 
 Cliente =	2; 
 Hostess =	3; 
 Meccanico =	4; 
 Manager =	5; Inserisci la tipologia:    
** Dettagli inserimento prenotazione **
       Inserisci l'indirizzo e-mail del cliente che ha effettuato la prenotazione :    Inserisci l'id del viaggio da prenotare :       Inserisci il numero di posti che si desiderano prenotare :      
** Dettagli inserimento passeggero **
 Inserisci il numero di prenotazione:    Inserisci il numero di posto:  Inserisci l'et√†:  Inserisci il nome:  Inserisci il cognome:     
** Dettagli inserimento revisione **
  Inserisci la targa del mezzo revisionato :      Inserisci la mail del meccanico che ha eseguito la revisione :  Inserisci la descrizione delle operazioni eseguite (massimo 5000 caratteri):    Inserisci il numero di km presenti sul conta chilometri del mezzo revisionato :         Inserisci la motivazione della revisione (massimo 5000 caratteri) :     Inserisci la data di inizio[YYYY-MM-DD]:  Data errata!
 Inserisci la data di conclusione[YYYY-MM-DD]:   In questa revisione sono statti sostituiti dei ricambi?         Inserisci il codice del ricambio utilizzato :   Inserisci la quantit√† di ricambi sostituiti :  
** Dettagli inserimento cliente **
 Inserisci l'indirizzo:  Inserisci il codice fiscale:       Inserisci il recapito telefonico:  Inserisci il numero di fax:  Inserisci l'ultima data d'invio dei documuenti [YYYY-MM-DD]:    ** Crea un utente per questo cliente ** 
** Dettagli inserimento ricambio **
 Inserisci il codice:  Inserisci il costo unitario:        Inserisci la quantit√† minima di riordino :     Inserisci la descrizione (massimo 5000 caratteri) :  Inserisci la scorta minima:        Inserisci quantita' di pezzi disponibili:       
** Dettagli inserimento mezzo **
 Inserisci la targa :  Inserisci il modello :  Inserisci gli ingombri :  Inserisci l'autonomia :      Inserisci il valore attuale del conta chilometri:       Inserisci la data dell'ultima revisione presso la motorizzazione [YYYY-MM-DD]:  Inserisci la data di immatricolazione  [YYYY-MM-DD]:    ** Dettagli inserimento competenze **
  Inserisci la mail del meccanico competente :    
** Dettagli inserimento modello **
 Inserisci il nome :        Inserisci la casa costruttrice :        Inserisci i dati tecnici (massimo 5000 caratteri) :     Inserisci il numero di posti:   ** Dettagli inizializzazione competenze **
     Inserisci il primo meccanico competente :       Inserisci il secondo meccanico competente :     Vuoi inserire un'altro meccanico competente?    
** Dettagli inserimento tagliando **
  Inserisci la tipologia del tagliando:   Inserisci le validita' superate (massimo 5000 caratteri) :  
** Dettagli soggiorno**
   Inserisci il numero della camera:       Inserisci l'albergo in cui √® ubicata la camera:        Inserisci il numero della prenotazione in questione:    Inserisci il numero di posto di viaggio dell'ospite:    Inserici la data d'inizio del soggiorno [YYYY-MM-DD]:   Inserisci la data di fine soggiorno [YYYY-MM-DD]:       
** Dettagli sostituzione ricambio**
   Inserisci il numero della revsione in questione:        ** Dettagli inserimento tour **
 Inserisci la denominazione:    Inserisci la descrizione (massimo 5000 caratteri):      Inserisci il numero minimo di partecipanti:     Inserisci il costo dell'assicurazione:  Inserisci il costo del bagaglio:        Inserisci il costo della garanzia di annullamento:      Inserisci l'indicazione sulla presenza di un'accompagnatrice:   Inserisci un valore compreso tra[0,1]!
 ** Dettagli inserimento viaggio **
     Inserisci il tour a cui e' associato:   Inserisci la mail del conducente assegnato:     Inserisci la mail dell'eventuale accompagnatrice:       Inserisci la targa del mezzo impiegato:         Inserisci la data di partenza [YYYY-MM-DD]:  Data Errata!
      Inserisci la data di ritorno [YYYY-MM-DD]:  Inserisci il prezzo:        Inserisci il numero di Km che verranno percorsi:        Inserisci i posti disponibili totali:   ** Dettagli inserimento meta **
        Inserisci la localita di appartenenza:  Inserisci la regione di appartenenza:   Inserisci l'indirizzo e-mail:   Inserisci il numero di telefono:        Inserisci la tipologia (bene o albergo ):  albergo      Inserisci la categoria dell'albergo:    Inserisci l'orario di apertura del bene [HH:MM]:        ** Dettagli inserimento visita **
      Inserisci l'ID del viaggio associato:   Inserisci l'ID della meta visitata:     Inserisci la data di arrivo prevista [YYYY-MM-DD]:  Data errata!        Inserisci la data di partenza prevista [YYYY-MM-DD]:    Inserisci l'orario di arrivo previsto [HH:MM]:  Orario errato!  Inserisci l'orario di partenza previsto [HH:MM]:        Inserisci l'indicazione sulla presenza della guida(si/no):      Inserisci l'importo dell'eventuale supplemento:         Inserisci la descrizione dell'eventuale trattamento alberghiero (massimo 5000 caratteri):       ** Dettagli inserimento camera di albergo **
   Inserisci il numero della camera :      Inserisci l'ID dell'albergo in cui la camera √® ubicata :       Inserisci il prezzo giornaliero del soggiorno:  ** Dettagli inserimento localita **
    Inserisci ll nome della regione:        Inserisci il nome dello stato:  ** Dettagli inserimento mappa **
       Inserisci il nome della citta' rappresentata nella mappa:       Inserisci il nome della regione in cui √® ubicata la citta' rappresentata:      Inserisci il livello di dettaglio:      Inserisci il nome della zona rappresentata dalla mappa:         Inserisci il file della mappa:  ** Dettagli inserimento nuova foto **
 Inserisci la descrizione :  Inserisci l'immagine:        ** Dettagli inserimento offre **
       Inserisci l'id del servizio offerto:    Inserisci l'id dell'albergo offerente :         ** Dettagli inserimento servizio **
    ** Dettagli inserimento fme **
 Inserisci l'di della meta in questione:         Inserisci l'id della foto in questione:         ** Dettagli inserimento fmo **
 Inserisci il nome del modello in questione:     ** Dettagli inserimento comfort **
     ** Dettagli inserimento rt **
  Inserisci l'id della revisione in questione:    Inserisci l'id del tagliando in questione:      ** Dettagli inserimento presenti **
    Inserisci l'id del comfort in questione:        Inserisci il nome del modello associato:        ** Dettagli inserimento dipendente **
  Inserisci il numero di telefono aziendale:      ** Procedura conferma prenotazione **
  Inserisci la mail del cliente prenotante:       

 Vuoi confermare una di queste prenotazioni? (s/n)    Inserisci il numero di prenotazione che si intende confermare:  Modifica data di conferma [YYYY-MM-DD]:         Modifica data di saldo [YYYY-MM-DD]:    

** Associa un passeggero alla prenotazione ** 
       

 Vuoi associare una camera a questo passeggero? (s/n)  
** Associa soggiorno**
       

 Vuoi associare un'altra camera a questo passeggero? (s/n)    

 Vuoi associare un'altro passeggero a questa prenotazione ? (s/n)     ********************************* *   BENVENUTI IN TRIPBUS *    *********************************
 Username:  Password:         Vuoi accedere con utente differente? Quit!      

Vuoi chiudere il database? (s/n)  Üã˛ˇVã˛ˇ]ã˛ˇdã˛ˇkã˛ˇrã˛ˇwã˛ˇFallimento malloc su dipendente (manager) 
     Fallimento malloc servizio(manager) 
   Fallimento malloc utente (manager) 
    Fallimento malloc su utente  (manager)) 
       Fallimento malloc su cliente (manager)) 
       Fallimento malloc su prenotazione (manager) 
   Fallimento malloc su postoprenotato (manager) 
 Fallimento malloc su soggiorno (manager)) 
     Fallimento malloc su mezzo (manager) 
  Fallimento malloc su modello (manager) 
        Fallimento malloc su revisione (manager) 
      Fallimento malloc su ricambio (manager) 
       Fallimento malloc su tagliando (manager) 
      Fallimento malloc su comfort (manager) 
        Fallimento malloc su competenze (manager) 
     Fallimento malloc su sostituito(manager) 
      Fallimento malloc su camera (manager) 
 Fallimento malloc su documentazionefotografica (manager) 
      Fallimento malloc su localita (manager) 
       Fallimento malloc su mappa (manager) 
  Fallimento malloc su meta (manager) 
   Fallimento malloc su viaggio (manager) 
        Fallimento malloc su visita (manager) 
 Fallimento malloc su tour (manager) 
   Fallimento malloc su presenti (manager) 
       Fallimento malloc su rt (manager) 
     Fallimento malloc su fmo (manager) 
    Fallimento malloc fme (manager) 
       Fallimento malloc offre (manager) 
     *** Quale operazione vorresti eseguire? ***
 1) Visualizzazione 2) Inserimento 3) Cancellazione 4) Esci Seleziona un'opzione    *********************************       *   INTERFACCIA AMMINISTRATORE    *     *********************************
 *** In quale ambito ? ***
 1) Gestione interna 2) Gestione tour 3) Gestione officina 4) Gestione clienti     5) Gestione tabelle connessione 6) Esci Allocazione tour avvenuta
  nç˛ˇÓç˛ˇné˛ˇÓé˛ˇnè˛ˇÓè˛ˇnê˛ˇÎê˛ˇ_ë˛ˇ*** Su quale tabella della gestione tour? ***
 1) Tour 2) Viaggio 3) Meta 4) Visita 5) Camera 6) Localit√† 7) Mappa 8) Documentazione fotografica 9) Esci       Allocazione costumer avvenuta
  6í˛ˇ¿í˛ˇ@ì˛ˇ¿ì˛ˇQî˛ˇ—î˛ˇQï˛ˇŒï˛ˇBñ˛ˇ    *** Su quale tabella della gestione officina? ***
 1) Modello  2) Mezzo 3) Ricambio 4) Revisione 5) Tagliando 6) Comfort 7) Competenze 8) Sostituzione  

Allocazione costumer avvenuta.
   Èñ˛ˇió˛ˇÈó˛ˇiò˛ˇ‰ò˛ˇô˛ˇ    *** Su quale tabella della gestione clienti? ***
 1) Cliente 2) Prenotazione 3) Posto prenotato 4) Soggiorno 5) Validazione prenotazioni 

Allocazione gest avvenuta.
  *** Su quale tabella della gestione interna? ***
 1) Dipendenti 2) Utenti 3) Servizi    .ú˛ˇ∏ú˛ˇBù˛ˇÃù˛ˇVû˛ˇ—û˛ˇ*** Su quale delle tabelle di connessione ? ***
 1) Offre 2) Presenti 3) Collegamento foto-modelli 4) Collegamento foto-mete    5) Collegamento revisione-tagliando 2ü˛ˇVü˛ˇJü˛ˇ>ü˛ˇbü˛ˇnü˛ˇ    Impossibile eseguire malloc su revisone Impossibile eseguire malloc su sostituito       Impossibile eseguire malloc su ricambio Inserisci il codice ricambio :  *********************************       *   INTERFACCIA MECCANICO    *  *********************************
      *** Quale operazione vorresti eseguire? ***
    1) Inserisci una nuova revisione        2) Consulta le revisioni scadute 3) Esci Select an option       

**  Dettagli prenotazione ** 
        Inserisci numero d'interesse :  

** Dettagli prenotazione **
   E-mail cliente: 	%s 
 Id viaggio: 		%d 
 Posti prenotati:	%d 
 Data di prenotazione: 	%s 
 Data di conferma: 	%s 
 Data Saldo: 		%s 

 Il numero di prenotazione non esiste
 

**  Dettagli viaggio ** 
 Inserisci l'id d'interesse:   *Tour:				%s 
 Conducente:			%s 
 Accompagnatrice:		%s 
 Targa mezzo:			%s 
 Data di partenza:		%s 
 Data di ritorno:		%s 
 Costo:				%f 
 Chilometri da percorrere:	%d 
 Posti disponibili:		%d 
 Data annullamento:		%s 

 L'id inserito non esiste
  Inserisci la mail d'interesse :  

**  Dettagli cliente ** 
    
 E-mail:  %s 
 Nome: %s 
 Cognome: %s 
 Indirizzo: %s 
 Codice fiscale: %s 
 Recapito telefonico: %s 
 Fax: %s 
 Data documentazione: %s 
 La mail inserita non esiste
 

**  Dettagli tour ** 
       Inserisci la denomiazione d'interesse:  *Descrizione:		%s 
 Minimo partecipanti:	%d 
 Assicurazione medica:	%f 
 Bagaglio: 		%f 
 Garanzia annullamento:	%f 
 Accompagnatrice:	%d 
     La denominazione inserita non esiste
 

**  Dettagli ricambio ** 
      Inserisci il codice del ricambio d'interesse:   *Costo unitario:	%f 
 Quatit√† di Riordino: 	%d 
 Scorta Minima:		%d 
 Quantit√† in magazzino:	%d 
 Descrizione:		%s 
  Il codice inserito non esiste
 

** Dettagli revisione **
      *Mezzo revsionato:	%s 
 Mail adetto: 		%s 
 Data inizio: 		%s 
 Data fine: 		%s
 Chilometraggio:	%d
 Operazioni eseguite:	%s 
 Motivazione:	%s 

 

** Dettagli mezzo **
       Inserisci la targa del mezzo d'interesse:        *Modello:		%s
 Ultima revisone mtc: 	%s 
 Ingombri: 		%s 
 Autonomia: 		%d
 Chilometraggio:	%d
 Data immatricolazione:	%s 

 La targa insertia non esiste
 

** Dettagli soggiorno **
 Inserisci l'id del soggiorno: show
     *Albergo:	%d 
 Camera:	%d 
 Ospite:	%d
 Prenotazione:	%d 
 Data inizio soggiorno: %s 
 Data fine soggiorno:	%s 

       Il soggiorno richiesto non esiste
 

** Dettagli competenze  **
        Inserisci la mail del meccanico competente :    Inserisci il modello d'interesse :      *Nome meccanico:%s 
 Telefono :	%s 

   La competenza richiesta non esiste
 

** Dettagli Dipendente  **
       Inserisci la mail d'interesse:  *Nome:		%s 
 Cognome:	%s 
 Tipologia:	%s 
 Telefono:	%s 

      La mail d'interesse non esiste
 

** Dettagli Foto-Modelli  **
 Inserisci l'id della foto d'interesse:  Inserisci il nome del modello d'interesse:      *Descrizione:	%s 
 Immagine:	%s

       La relazione foto-modello d'interesse non esiste
 

** Dettagli Foto-Mete  **
  Inserisci l'id della meta d'interesse:  *Nome:	%s
 Descrizione:	%s 
 Immagine:	%s

     La relazione foto-mete d'interesse non esiste
  

** Dettagli servizi-offerti  **
      Inserisci l'id del servizio d'interesse:        Inserisci l'id dell'albergo offerente:  *Albergo:	%s
 Servizio:	%s 
 Descrizione:	%s

  La realzione offre d'interesse non esiste
 

** Dettagli presenti **
   Inserisci il modello d'interesse:       Inserici l'id del servizio d'interesse:  *Modello:	%s 
 Comfort:		%d

  La relazione tra comfort e modelli d'interesse non esiste
      

** Dettagli relazione tagliando-revsione **
  Inserisci l'id del tagliando  d'interesse:      Inserisci l'id della revisione  d'interesse:    *Tagliando:	%d 
 Revisione:		%d

 

** Dettagli utente **
 *Password:	%s 
 Tipo:		%d

  

** Dettagli posto prenotato  **
      Inserisci il numero di posto d'interesse:       Inserisci il numero di prenotazione associata   *Nome passeggero:	%s
 Cognome passeggero:	%s 
 Et√†:			%d 

    Il posto prenotato d'interesse non esiste
 

** Dettagli modello  **
   Inserisci il nome d'interesse:  * Casa costruttrice:	%s
 Dati tecnici:		%s 
 Numero di posti:	%d
 Meccanici competenti:	%d
     Il nome del modello inserito non esiste
 

** Dettagli tagliando  **
 Inserisci l'id  d'interesse:      *Tipologia:		%s
 Validit√† superate:	%s 

 

** Dettagli meta  **
      *Nome:		%s
 Tipologia:	%s
 Localit√†:	%s
 Regione:	%s 
 Indirizzo:	%s
 Telefono:	%s
 E-mail:	%s
 Fax:		%s
 Albergo albergo  Categoria:	%s

  Orario di apertura:%s

 

** Dettagli servizio   **
 Inserisci l'id d'interesse:   *Nome:		%s 
 Descrizione:	%s  

 

** Dettagli comfort  **
     

** Dettagli documentazionefotografica  **
    *Foto:		%s 
 Descrizione:	%s  

 

** Dettagli mappa  **
       *Citt√†:		%s 
 Regione:	%s 
 Dettaglio:	%s 
 Zona:		%s 
 Immagine: 	%s 

 L'id inserito non esiste 
 

** Dettagli camera  **
  Inserisci il numero d'interesse:        Inserisci l'id dell'albergo d'interesse: *Tipologia:	%s 
 Costo:		%f

  La camera d'interesse non esiste 
 

** Dettagli localita  **
  Inserisci il nome d'interesse:  Inserisci il nome della regione:  *Stato:		%s

 Il nome d'interesse non esiste
 

** Dettagli visita  **
       *Tour:		%s  Id viaggio:	%d*
*Nome meta:	%s Id meta:	%d*
 Data di arrivo:	%s
 Ora di arrivo:		%s
 Data di partenza:	%s
 Ora di partenza:	%s
 Guida:			%d
 Supplemento:		%f
 Trattamento:		%s

 L'id d'interesse non esiste
      

** Dettagli sostituzione  **
 Inserisci l'id della revisione d'interesse:     Inserisci il codice del ricambio d'interesse: *Quantit√†:	%d

  La sostizione d'interesse non esiste
   ** Ecco i mezzi le cui revisioni risultano scadute o in scadenza**
 

** Tour offerti  **
      

 ** Esplora le destinazioni dei viaggi **
    Inserisca il numero del viaggio a cui √® interessato:  
**
**   

 ** Esplora i servizi offerti dagli alberghi **
      Inserisca il codice dell'albergo a cui √® interessato:  

 ** Esplora comfort presenti sui nostri pullman  **
  Inserisca il nome del modello a cui √® interessato:     ** Ricerca viaggi assegnati **
 Inserisci la mail del conducente:       ** Dettagli del viaggio assegnato **
   ** Ricerca visite d'interesse **
 Inserisci l'ID del viaggio:   ** Dettagli temporali delle visite **
  ** Ricerca la mappa d'interesse **
     Inserisci il nome della localit√†:      ** Dettagli mappe relative alla localit√† inserita **
  Errore! Il tipo dell'utente deve essere diverso da %d 
 Autista =	1; 
 Cliente =	2; 
 Hostess =	3; 
 Meccanico =	4; 
 Manager =	5;
 Reinserisci il tipo dell'utente
    Reinserisci la tipologia dell'utente:   ** Selezione del mezzo d'interesse **
  Vuoi modificare i km di questo mezzo ?  
Inserisci l'attuale numero di km :     localhost Login lgn tripdb call login(?, ?, ?)  Unable to initialize login statement
 Autista drvr call select_assigned_trip(?) Unable to initialize select_assigned_trip statement
 call select_dest_time(?)   Unable to initialize select_dest_time statement
 call select_dvr_map(?) Unable to select_dvr_map statement
 call select_bus(?)  Unable to initialize select_bus statement
 call  update_km(?,?) Unable to initialize update_km statement
 Hostess hstss call insert_costumer(?, ?, ?, ?, ?, ?, ?, ?)    Unable to initialize insert costumer statement
 call insert_reservation(?, ?, ?)        Unable to initialize insert reservation statement
      call insert_seat (?, ?, ?, ?, ?)        Unable to initialize insert seat statement
     call validate_reservation(?, ?, ?)      Unable to initialize validate reservation statement
 call select_costumer(?)    Unable to initialize select costumer statement
 call select_reservation(?)      Unable to initialize select reservation statement
 call select_trip(?)  Unable to initialize select_trip statement
     call insert_stay(?, ?, ?, ?, ?, ?)      Unable to initialize insert_stay statement statement
   call insert_costumer_user(?, ?, ?, ?, ?, ?, ?, ?, ?)    Unable to initialize insert_costumer_userstatement
     call select_reservation_info(?) Unable to select_reservation_info statement
 Cliente cstmr call select_hotel_service(?) Unable to initialize select_hotel_service statement
 call select_all_tour()     Unable to initialize select_all_tour statement
 call select_model_comfort(?)    Unable to initialize select dest tour statement
 call select_dest_tour(?) Meccanico mchn        call insert_review(?, ?, ?, ?, ?, ?, ?, ?)      Unable to initialize insert review statement
   call insert_sostitution(?,?,?)  Unable to initialize insert_sostitution statement
 call select_sparepart(?)     Unable to initialize select_sparepart statement
 call select_review(?)  Unable to initialize select_review statement
   call insert_sost_review(?,?,?,?,?,?,?,?,?)      Unable to initialize insert_sost_review statement
 call select_expired_review() Unable to initialize select_expired_review statement
 Manager mngr call insert_presents(?,?)    Unable to initialize insert_presents statement
 call insert_rt(?,?)     Unable to initialize insert_rt statement
 call  insert_fmo(?, ?)        Unable to initialize insert_fmo statement
      call insert_bus(?, ?, ?, ?, ?, ?, ?)    Unable to initialize  insert_bus statement
     call insert_sparepart(?, ?, ?, ?, ?, ?) Unable to initialize  insert_sparepart statement
 call insert_certify(?, ?)     Unable to initialize  insert_certify statement
 call insert_skills(?, ?)        Unable to initialize  insert_skills statement
 call insert_comfort(?, ?)        Unable to initialize  insert_comfort statement
 call   insert_model(?, ?, ?, ?, ?, ?)   Unable to initialize  insert_model statement
 call  insert_fme(?, ?)    Unable to initialize insert_fme statement
 call  insert_service(?, ?)   Unable to initialize insert_service statement
 call  insert_offert(?, ?)        Unable to initialize insert_offert statement
 call  insert_user(?, ?, ?)        Unable to initialize insert_user statement
     call  insert_employee(?, ?, ?, ?, ?)    Unable to initialize insert_employee statement
 call insert_picture(?, ?)       call insert_map(?, ?, ?, ?, ?) call insert_location(?, ?, ?) call insert_room(?, ?, ?, ?)       call   insert_visit(?, ?, ?, ?, ?, ?, ?, ?, ?)  call  insert_destination(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)  call  insert_trip(?, ?, ?, ?, ?, ?, ?, ?, ?)    call  insert_tour(?, ?, ?, ?, ?, ?, ?) call delete_trip(?)      Unable to initialize delete_trip statement
 call  delete_tour(?)        Unable to initialize delete_tour statement
 call delete_sparepart(?)    Unable to initialize delete_sparepart statement
 call delete_review(?)  Unable to initialize delete_review statement
 call  delete_bus(?)       Unable to initialize delete_bus statement
 call delete_reservation(?)   Unable to initialize delete reservation statement
 call delete_costumer(?)      Unable to initialize delete_costumer statement
 call  delete_stay(?)    Unable to initialize delete_stay statement
 call  delete_skills(?,?)    Unable to initialize delete_skills statement
 call  delete_employee(?)  Unable to initialize delete_employee statement
 call  delete_fmo(?,?)   Unable to initialize delete_fmo statement
 call  delete_fme(?,?)        Unable to initialize delete_fme statement
 call  delete_ofr(?,?)        Unable to initialize delete_ofr statement
 call  delete_user(?) Unable to initialize delete_user statement
 call  delete_seat(?, ?)     Unable to initialize delete_seat statement
 call  delete_model(?)       Unable to initialize delete_model statement
 call  delete_certify(?)    Unable to initialize delete_certify statement
 call  delete_destination(?)      Unable to initialize delete_destination statement
 call  delete_visit(?)        Unable to initialize delete_visit statement
 call  delete_location(?, ?)        Unable to initialize delete_location statement
 call  delete_room(?, ?) Unable to initialize delete_room statement
 call  delete_map(?) Unable to initialize delete_map statement
 call  delete_picture(?)      Unable to initialize delete_picture statement
 call  delete_comfort(?)  Unable to initialize delete_comfort statement
 call  delete_service (?) Unable to initialize delete_service  statement
 call  delete_presents (?, ?)    Unable to initialize delete_presents  statement
 call  delete_rt (?, ?) Unable to initialize delete_rt  statement
      call  delete_sostitution (?, ?) Unable to initialize delete_sostitution  statement
 call  select_stay(?)        Unable to initialize select_stay statement
 call  select_employee(?)    Unable to initialize select_employee statement
 call  select_service (?)        Unable to initialize select_service  statement
 call  select_rt (?, ?)  Unable to initialize select_rt  statement
 call  select_presents (?, ?) Unable to initialize select_presents  statement
        call  select_sostitution (?, ?) Unable to initialize select_sostitution  statement
 call  select_comfort(?)     Unable to initialize select_comfort statement
 call select_costumer(? ) call  select_picture(?) Unable to initialize select_picture statement
 call  select_map(?)      Unable to initialize select_map statement
 call  select_room(?, ?)      Unable to initialize select_room statement
 call  select_location(?, ?) Unable to initialize select_location statement
 call  select_visit(?)   Unable to initialize select_visit statement
 call  select_destination(?)        Unable to initialize select_destination statement
 call  select_tour(?) Unable to initialize select_tour statement
 call  select_certify(?)     Unable to initialize select_certify statement
 call  select_bus(?) call  select_model(?)        Unable to initialize select_model statement
 call  select_seat(?, ?)    Unable to initialize select_seat statement
 call  select_user(?)        Unable to initialize select_user statement
 call  select_ofr(?,?)       Unable to initialize select_ofr statement
 call  select_fme(?,?)        Unable to initialize select_fme statement
 call  select_fmo(?,?)        Unable to initialize select_fmo statement
 call  select_skills(?,?)     Unable to initialize select_skills statement
 call  update_user_type(?,?)       Unable to initialize update_user_type statement
        [FATAL] Unexpected role to prepare statements.
 |ò˛ˇÕò˛ˇû˛ˇ≥ö˛ˇ≥ü˛ˇÊ°˛ˇmysql_init() failed (probably out of memory)
 mysql_real_connect() failed
 [mysql_options] failed.      Binding dei parametri non riuscito Login non riuscito Bind_result non riuscito Fetch non riuscito DB LOGIN_PASS LOGIN_USER      mysql_change_user() failed: %s
 [FATAL] Cannot initialize prepared statements.
 insert_costumer insert_reservation insert_seat insert_stay insert_review validate_reservation insert_sostitution insert_rt insert_presents update_km insert_tour insert_destination insert_trip insert_visit insert_room insert_location insert_map insert_employee insert_offert insert_costumer_user insert_user insert_picture insert_service insert_fmo insert_fme insert_model     Could not bind parameters for insert_model      Could not execute insert_model insert_bus insert_sparepart insert_certify insert_comfort insert_skills select_model select_seat select_user select_ofr select_fme select_fmo select_employee select_skills select_stay select_sparepart select_certify select_bus select_review select_trip select_costumer select_reservation select_tour select_comfort select_picture select_map select_room select_location select_visit select_destination select_rt select_presents select_sostitution select_service delete_model delete_seat delete_user delete_ofr delete_fme delete_fmo delete_employee delete_skills delete_stay delete_sparepart delete_certify delete_bus delete_review delete_trip delete_costumer delete_reservation delete_tour delete_comfort delete_picture delete_map delete_room delete_location delete_visit delete_destination delete_rt delete_presents delete_sostitution delete_service insert_sost_review update_user_type select_model_comfort       Impossibile eseguire la malloc su tour info     

 Impossibile eseguire il bind risult

 ... 
Impossibile eseguire fetch Casa costruttrice:	%s 
 Numero di posti:	%d	

 Comfort:	 	%s 
 %s 
 Descrizione foto:%s

 select_expired_review Procedura: %s *Targa mezzo:		%s 
 Data ultima revisione:	%s	
 Chilometri revisone:	%d 
 Chilometri attuali:	%d	

 select_hotel_service * %s *
 Descrizione:		%s	

 select_dest_tour    Impossibile eseguire la malloc su %s Data di arrivo:		%s	 Ora di arrivo:	  	%s 
 Data di partenza:	%s	 Ora di partenza: 	%s 
 Supplemento:		%f euro
 Tipologia meta:		%s 	
 Bene Orario di apertura:	%s 	
 Guida prevista:		%d 	
 Trattamento:		%s 
 Categoria:		%s 	
 Codice albergo:		%d 
 Foto:  %s	
 Descrizione foto:	%s 

 select_all_tour Descrizione tour:	%s 	
 Minimo partecipanti:	 %d 	
 Diritti iscrizione:        Assicurazione medica:	 %f euro
 Bagaglio:		 %f euro
    Garanzia di annullamento:%f euro
       
-Accompagnatrice prevista:%d 	
 

Viaggi previsti : Modello pullman:	%s 
 Codice viaggio: 	%d 
 Data di partenza:	%s 	
 Data di riotrno:	%s 	
 Prezzo:			%f euro	
 Posti disponibili:	%d 	
 select_assigned_trip Data di riotrno:	%s 	

 Mezzo impiegato Targa:			%s 	
 Autonomia mezzo:	%d km	
 Ingombri:		%s 
 Valore conta km:	%d 	

 select_dest_time Localit√†:		%s 	
 Regione:		%s 	
 Indirizzo:		%s 	
 Ora di partenza: 	%s 

 select_dvr_map Dettaglio:		%s 	
 Zona:			%s 	
 Immagine:		%s 	

 select_reservation_info Impossibile eseguire la malloc su prenotazioni info * Cliente %s *
 Numero prenotazione: 	%d 
 Data di prenotazione:	%s 	
 %s 
 EOF received, leaving... %s [%c/%c]:  %s [%s]:  [2J[H 
Press any key to continue...   Regex match failed: %s
 %s
     Fatal error while setting up %s regex.
 date validation ^([12][0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])) time validation        ^([0-1]?[0-9]|2?[0-3]|[0-9]):([0-5][0-9]|[0-9]) integer number validation ^\d double number validation ^[0-9]+(\.[0-9]+)?       %s
 Error %u (%s): %s
  Could not initialize statement handler Could not prepare statement %4d-%2d-%2d %02d:%02d %4d-%02d-%02d %02d:%02d %4d-%02d-%02d Procedura : %s 
 
Impossibile eseguire execute   
Impossibile eseguire bind param Procedura : %s         

 Impossibile eseguire il bind result

 Procedura : %s 
Impossibile eseguire store result 
Impossibile eseguire fetch   
Impossibile eseguire execute  ${  %s } = 
 %s/.env rb ;Ï     ˜˝ˇ 	  P˚˝ˇH	  `˚˝ˇ`	  †ˇ˝ˇ	  â ˛ˇx	  ∆ ˛ˇò	  Æ˛ˇ∏	  /˛ˇÿ	  l˛ˇ¯	  T˛ˇ
  À˛ˇ8
  ˜˛ˇX
  O˛ˇx
  ß˛ˇò
  ˇ˛ˇ∏
  W˛ˇÿ
  Ø˛ˇ¯
  ˛ˇ  _˛ˇ8  ∑˛ˇX  ˛ˇx  g˛ˇò  ø˛ˇ∏  ˛ˇÿ  o˛ˇ¯  «˛ˇ  	˛ˇ8  w	˛ˇX  œ	˛ˇx  '
˛ˇò  
˛ˇ∏  ◊
˛ˇÿ  /˛ˇ¯  á˛ˇ  ﬂ˛ˇ8  7˛ˇX  è˛ˇx  Á˛ˇò  ?˛ˇ∏  ó˛ˇÿ  ‹˛ˇ¯   ˛ˇ  å˛ˇ8  ˛ˇX  ˛ˇx  Ê˛ˇò  ˛ˇ∏  ã˛ˇÿ  ˛ˇ¯  ˛ˇ  y˛ˇ8  U˛ˇX  £˛ˇx  ?˛ˇò  µ˛ˇ∏  è!˛ˇÿ  i"˛ˇ¯  V$˛ˇ  ¶&˛ˇ8  Å(˛ˇX  E+˛ˇx  X,˛ˇò  Ó,˛ˇ∏  ‘-˛ˇÿ  J.˛ˇ¯   /˛ˇ  v/˛ˇ8  ,0˛ˇX  ”0˛ˇx  I1˛ˇò  ˇ1˛ˇ∏  ¶2˛ˇÿ  3˛ˇ¯  ‘3˛ˇ  <8˛ˇ8  ¿8˛ˇX  Ó8˛ˇx  ı9˛ˇò  §:˛ˇ∏  ø;˛ˇÿ  p=˛ˇ¯  !?˛ˇ  0@˛ˇ8  ÿ@˛ˇX  —A˛ˇx  \F˛ˇò  eG˛ˇ∏  #L˛ˇÿ  ,M˛ˇ¯  –O˛ˇ  ßP˛ˇ8  ¬R˛ˇX  uS˛ˇx  ≤V˛ˇò  âW˛ˇ∏  X˛ˇÿ  <X˛ˇ¯  ﬂX˛ˇ  iY˛ˇ<  2Z˛ˇ\  úZ˛ˇ|  ÒZ˛ˇ†  ˆ[˛ˇ¿  <]˛ˇ‰  ^˛ˇ  _˛ˇ$  Œ_˛ˇD  Õ`˛ˇd  éa˛ˇÑ  ûb˛ˇ§  Xc˛ˇƒ  d˛ˇ‰  d˛ˇ  ˆe˛ˇ$  ˘f˛ˇD  Âg˛ˇd  ‹h˛ˇÑ  pi˛ˇ§  qj˛ˇƒ  k˛ˇ‰  Âk˛ˇ  m˛ˇ$  Gn˛ˇD  o˛ˇd  ◊o˛ˇÑ  √p˛ˇ§  —q˛ˇƒ  Är˛ˇ‰  Às˛ˇ  ≠t˛ˇ(  Ãt˛ˇH  Ît˛ˇh  tu˛ˇà  ˝u˛ˇ®  yv˛ˇ»  ıv˛ˇË  ~w˛ˇ  ˙w˛ˇ(  ßx˛ˇH  dy˛ˇh  Gà˛ˇà  ¢≠˛ˇ®  ÔÆ˛ˇ»  Ø˛ˇË  A±˛ˇ  ≤˛ˇ,  é¥˛ˇL  ùµ˛ˇl  ˇ∂˛ˇå  Ø∏˛ˇ¨  “∫˛ˇÃ  ˇª˛ˇÏ  ¸º˛ˇ  æΩ˛ˇ,  ëæ˛ˇL  nø˛ˇl  =¡˛ˇå  +ƒ˛ˇ¨  ±∆˛ˇÃ  $…˛ˇÏ  Y ˛ˇ  ÇÀ˛ˇ,  3Õ˛ˇL  €Œ˛ˇl  ´œ˛ˇå  ]“˛ˇ¨  u”˛ˇÃ  k‘˛ˇÏ  a’˛ˇ  B÷˛ˇ,  ◊˛ˇL  +Ÿ˛ˇl  0€˛ˇå  Ã‹˛ˇ¨  ¬›˛ˇÃ  ∏ﬁ˛ˇÏ  ©ﬂ˛ˇ  ?·˛ˇ,  Ω‚˛ˇL  Ú„˛ˇl  pÂ˛ˇå  ÒÊ˛ˇ¨  UË˛ˇÃ  ÂÈ˛ˇÏ  VÎ˛ˇ   §Ì˛ˇ,   aÔ˛ˇL   â˛ˇl   „Ú˛ˇå   Bı˛ˇ¨   ç¯˛ˇÃ   Ì˙˛ˇÏ   r˝˛ˇ!  bˇ˛ˇ,!  ä ˇˇL!  ≤ˇˇl!  bˇˇå!  ≤ˇˇ¨!  ¯ˇˇÃ!  m	ˇˇÏ!  -ˇˇ"  yˇˇ,"  ÎˇˇL"  $ˇˇl"  Lˇˇå"  ˚ˇˇ¨"  ÀˇˇÃ"  zˇˇÏ"  Jˇˇ#  ˇˇ,#  ˚ˇˇL#  ™ˇˇl#  òˇˇå#  :ˇˇ¨#  ÈˇˇÃ#  ãˇˇÏ#  :ˇˇ$  ‹ˇˇ,$  ~ˇˇL$  Mˇˇl$  Ôˇˇå$  ûˇˇ¨$  @ˇˇÃ$  ‚ˇˇÏ$  Ñˇˇ%  T ˇˇ,%  B!ˇˇL%  ‰!ˇˇl%  Ü"ˇˇå%  V#ˇˇ¨%  7$ˇˇÃ%  %ˇˇÏ%  ∫%ˇˇ&  I(ˇˇ,&  &)ˇˇL&  ò/ˇˇl&  	4ˇˇå&  U7ˇˇ¨&  &CˇˇÃ&  MˇˇÏ&  =Tˇˇ'  \ˇˇ,'  aˇˇL'  adˇˇp'  ídˇˇå'  gˇˇ¨'  ¥hˇˇ–'  ≈jˇˇÙ'  ‰jˇˇ(  kˇˇ8(  /lˇˇ\(  ¬lˇˇ|(  åmˇˇú(  nˇˇº(  Bnˇˇ‹(  jnˇˇ¸(  ínˇˇ)  ∫nˇˇ<)  oˇˇ`)  òoˇˇÑ)  /pˇˇ®)  qˇˇ»)  Oqˇˇ‰)  ßqˇˇ *  ˝qˇˇ *  drˇˇ@*  ƒrˇˇ`*  ¯rˇˇÄ*  ,sˇˇ†*  ësˇˇ¿*  ÿsˇˇ‡*  (tˇˇ +  ãtˇˇ +  Euˇˇ@+  Yvˇˇ`+  wˇˇÄ+  úwˇˇ§+  Ówˇˇƒ+  ?xˇˇ‰+  Syˇˇ,  ¥yˇˇ$,  zˇˇD,  Ôzˇˇd,  |ˇˇê,             zR xê        êˆ˝ˇ&    D    $   4   ÿÌ˝ˇP   FJwÄ ?:*3$"       \    Ú˝ˇ              t   ¯Ò˝ˇ@             å   	˜˝ˇ=    EÜCt      ¨   &˜˝ˇË    EÜCﬂ     Ã   Ó˜˝ˇÅ    EÜCx     Ï   O¯˝ˇ=    EÜCt        l¯˝ˇË    EÜCﬂ     ,  4˘˝ˇw    EÜCn     L  ã˘˝ˇ,    EÜCc      l  ó˘˝ˇX    EÜCO     å  œ˘˝ˇX    EÜCO     ¨  ˙˝ˇX    EÜCO     Ã  ?˙˝ˇX    EÜCO     Ï  w˙˝ˇX    EÜCO       Ø˙˝ˇX    EÜCO     ,  Á˙˝ˇX    EÜCO     L  ˚˝ˇX    EÜCO     l  W˚˝ˇX    EÜCO     å  è˚˝ˇX    EÜCO     ¨  «˚˝ˇX    EÜCO     Ã  ˇ˚˝ˇX    EÜCO     Ï  7¸˝ˇX    EÜCO       o¸˝ˇX    EÜCO     ,  ß¸˝ˇX    EÜCO     L  ﬂ¸˝ˇX    EÜCO     l  ˝˝ˇX    EÜCO     å  O˝˝ˇX    EÜCO     ¨  á˝˝ˇX    EÜCO     Ã  ø˝˝ˇX    EÜCO     Ï  ˜˝˝ˇX    EÜCO       /˛˝ˇX    EÜCO     ,  g˛˝ˇX    EÜCO     L  ü˛˝ˇX    EÜCO     l  ◊˛˝ˇX    EÜCO     å  ˇ˝ˇX    EÜCO     ¨  Gˇ˝ˇX    EÜCO     Ã  ˇ˝ˇX    EÜCO     Ï  ∑ˇ˝ˇE   EÜC<      ‹ ˛ˇÓ    EÜCÂ     ,  ™˛ˇ¬    EÜCπ     L  L˛ˇ|    EÜCs     l  ®˛ˇ   EÜC˙     å  ã˛ˇ€    EÜC“     ¨  F˛ˇ1   EÜC(    Ã  W˛ˇt   EÜCk    Ï  ´˛ˇê   EÜCá      	˛ˇÒ   EÜCË    ,  Ï
˛ˇm   EÜCd    L  9˛ˇ‹   EÜC”    l  ı˛ˇN    EÜCE     å  #˛ˇú   EÜCì    ¨  ü˛ˇv    EÜCm     Ã  ı˛ˇ⁄   EÜC—    Ï  Ø˛ˇ⁄    EÜC—       i˛ˇÌ   EÜC‰    ,  6˛ˇP   EÜCG    L  f˛ˇ€   EÜC“    l  !˛ˇƒ   EÜCª    å  ≈˛ˇ   EÜC
    ¨  ∏˛ˇñ    EÜCç     Ã  .˛ˇÊ    EÜC›     Ï  Ù˛ˇv    EÜCm       J˛ˇ∂    EÜC≠     ,  ‡˛ˇv    EÜCm     L  6˛ˇ∂    EÜC≠     l  Ã˛ˇß    EÜCû     å  S˛ˇv    EÜCm     ¨  ©˛ˇ∂    EÜC≠     Ã  ? ˛ˇß    EÜCû     Ï  ∆ ˛ˇr    EÜCi     	  !˛ˇº    EÜC≥     ,	  ¥!˛ˇh   EÜC_    L	  ¸%˛ˇÑ    EÜC{     l	  `&˛ˇ.    EÜCe      å	  n&˛ˇ   EÜC˛     ¨	  U'˛ˇØ    EÜC¶     Ã	  ‰'˛ˇ   EÜC    Ï	  ﬂ(˛ˇ±   EÜC®    
  p*˛ˇ±   EÜC®    ,
  ,˛ˇ   EÜC    L
  ,˛ˇ®    EÜCü     l
  x-˛ˇ˘    EÜC     å
  Q.˛ˇã   EÜCÇ    ¨
  º2˛ˇ	   EÜC     Ã
  •3˛ˇæ   EÜCµ    Ï
  C8˛ˇ	   EÜC       ,9˛ˇ§   EÜCõ    ,  ∞;˛ˇ◊    EÜCŒ     L  g<˛ˇ   EÜC    l  b>˛ˇ≥    EÜC™     å  ı>˛ˇ=   EÜC4    ¨  B˛ˇ◊    EÜCŒ     Ã  …B˛ˇá    EÜC~     Ï  0C˛ˇ,    EÜCc        <C˛ˇ£    EÜCö      ,  øC˛ˇä    EÜCEÉ|      P  %D˛ˇ…    EÜC¿     p  ŒD˛ˇj    EÜCa      ê  E˛ˇU    EÜCL         ¥  IE˛ˇ   EÜC¸      ‘  .F˛ˇF   EÜCEÉ8     ¯  PG˛ˇ·    EÜCÿ       H˛ˇ    EÜCÁ     8  ·H˛ˇ¡    EÜC∏     X  ÇI˛ˇˇ    EÜCˆ     x  aJ˛ˇ¡    EÜC∏     ò  K˛ˇ   EÜC    ∏  ÚK˛ˇ∫    EÜC±     ÿ  åL˛ˇ©    EÜC†     ¯  M˛ˇÔ    EÜCÊ       ‰M˛ˇ   EÜC˝     8   N˛ˇ   EÜC˙     X  ≠O˛ˇÏ    EÜC„     x  yP˛ˇ˜    EÜCÓ     ò  PQ˛ˇî    EÜCã     ∏  ƒQ˛ˇ   EÜC¯     ÿ  •R˛ˇ¨    EÜC£     ¯  1S˛ˇ»    EÜCø       ŸS˛ˇö   EÜCë    8  SU˛ˇ»    EÜCø     X  ˚U˛ˇ»    EÜCø     x  £V˛ˇ»    EÜCø     ò  KW˛ˇÏ    EÜC„     ∏  X˛ˇ   EÜC    ÿ  Y˛ˇØ    EÜC¶      ¯  îY˛ˇK   EÜCGåÉ;     ªZ˛ˇ‚    EÜCŸ     <  }[˛ˇ    EÜCV      \  |[˛ˇ    EÜCV      |  {[˛ˇâ    EÜCÄ     ú  ‰[˛ˇâ    EÜCÄ     º  M\˛ˇ|    EÜCs     ‹  ©\˛ˇ|    EÜCs     ¸  ]˛ˇâ    EÜCÄ       n]˛ˇ|    EÜCs     <   ]˛ˇ≠    EÜC§     \  W^˛ˇΩ    EÜC¥     |  Ù^˛ˇ„   EÜC⁄    ú  ∑m˛ˇ[%   EÜCR%    º  Úí˛ˇM   EÜCD    ‹  î˛ˇ    EÜCV      ¸  î˛ˇ3   EÜC*       1ñ˛ˇ›    EÜCCåÉ—    @  Íñ˛ˇp   EÜCg    `  :ô˛ˇ   EÜC    Ä  )ö˛ˇb   EÜCY    †  kõ˛ˇ∞   EÜCß    ¿  ˚ú˛ˇ#   EÜC    ‡  ˛û˛ˇ-   EÜC$       †˛ˇ˝    EÜCÙ        Ë†˛ˇ¬    EÜCπ     @  ä°˛ˇ”    EÜC      `  =¢˛ˇ›    EÜC‘     Ä  ˙¢˛ˇœ   EÜC∆    †  ©§˛ˇÓ   EÜCÂ    ¿  wß˛ˇÜ   EÜC}    ‡  ›©˛ˇs   EÜCj       0¨˛ˇ5   EÜC,       E≠˛ˇ)   EÜC     @  NÆ˛ˇ±   EÜC®    `  ﬂØ˛ˇ®   EÜCü    Ä  g±˛ˇ–    EÜC«     †  ≤˛ˇ≤   EÜC©    ¿  ©¥˛ˇ   EÜC    ‡  °µ˛ˇˆ    EÜCÌ        w∂˛ˇˆ    EÜCÌ        M∑˛ˇ·    EÜCÿ     @  ∏˛ˇ–    EÜC«     `  æ∏˛ˇ   EÜC    Ä  ∑∫˛ˇ   EÜC¸    †  úº˛ˇú   EÜCì    ¿  æ˛ˇˆ    EÜCÌ     ‡  Óæ˛ˇˆ    EÜCÌ        ƒø˛ˇÒ    EÜCË        ï¿˛ˇñ   EÜCç    @  ¬˛ˇ~   EÜCu    `  i√˛ˇ5   EÜC,    Ä  ~ƒ˛ˇ~   EÜCu    †  ‹≈˛ˇÅ   EÜCx    ¿  =«˛ˇd   EÜC[    ‡  Å»˛ˇê   EÜCá       Ò…˛ˇq   EÜCh       BÀ˛ˇN   EÜCE    @  pÕ˛ˇΩ   EÜC¥    `  œ˛ˇ(   EÜC    Ä  –˛ˇZ   EÜCQ    †  O“˛ˇ_   EÜCV    ¿  é‘˛ˇK   EÜCB    ‡  π◊˛ˇ`   EÜCW       ˘Ÿ˛ˇÖ   EÜC|       ^‹˛ˇ   EÜCÁ    @  .ﬁ˛ˇ(   EÜC    `  6ﬂ˛ˇ(   EÜC    Ä  >‡˛ˇ∞   EÜCß    †  Œ·˛ˇP   EÜCG    ¿  ˛‚˛ˇF   EÜC=    ‡  $‰˛ˇu   EÜCl       yÁ˛ˇ¿   EÜC∑       Í˛ˇL   EÜCC    @  EÎ˛ˇr   EÜCi    `  óÏ˛ˇ9   EÜC0    Ä  ∞Ì˛ˇ(   EÜC    †  ∏Ó˛ˇØ    EÜC¶     ¿  GÔ˛ˇ–    EÜC«     ‡  ˜Ô˛ˇØ    EÜC¶        Ü˛ˇ–    EÜC«        6Ò˛ˇ–    EÜC«     @  ÊÒ˛ˇ·    EÜCÿ     `  ßÚ˛ˇØ    EÜC¶     Ä  6Û˛ˇÓ    EÜCÂ     †  Ù˛ˇ¢    EÜCô     ¿  ÜÙ˛ˇØ    EÜC¶     ‡  ı˛ˇ¢    EÜCô        óı˛ˇØ    EÜC¶        &ˆ˛ˇ¢    EÜCô     @  ®ˆ˛ˇ¢    EÜCô     `  *˜˛ˇœ    EÜC∆     Ä  Ÿ˜˛ˇ¢    EÜCô     †  [¯˛ˇØ    EÜC¶     ¿  Í¯˛ˇ¢    EÜCô     ‡  l˘˛ˇ¢    EÜCô        Ó˘˛ˇ¢    EÜCô        p˙˛ˇ–    EÜC«     @   ˚˛ˇÓ    EÜCÂ     `  Ó˚˛ˇ¢    EÜCô     Ä  p¸˛ˇ¢    EÜCô     †  Ú¸˛ˇ–    EÜC«     ¿  ¢˝˛ˇ·    EÜCÿ     ‡  c˛˛ˇ·    EÜCÿ        $ˇ˛ˇ¢    EÜCô        ¶ˇ˛ˇè   EÜCÜ    @  ˇˇ›    EÜC‘     `  “ˇˇr   EÜCi    Ä  $	ˇˇq   EÜCh    †  uˇˇL   EÜCC    ¿  °ˇˇ—   EÜC»    ‡  RˇˇÒ	   EÜCË	       #&ˇˇ&   EÜC       )-ˇˇB   EÜC9    @  K5ˇˇÑ   EÜC{     `  Ø9ˇˇ^   EÜCU        Ñ  È<ˇˇ1    EÜC      †  ˛<ˇˇá   EÜC~     ¿  e?ˇˇõ   EÜCEÉç      ‰  ‹@ˇˇ   EÜCEÉ       …Bˇˇ    EÜCV       (  »Bˇˇ.    EÜCe           L  “Bˇˇ   EÜCEÉ     p  ÀCˇˇì    EÜCä     ê  >Dˇˇ     EÜC¡     ∞  ËDˇˇé    EÜCÖ     –  VEˇˇ(    EÜC_        ^Eˇˇ(    EÜC_         fEˇˇ(    EÜC_      0   nEˇˇ(    EÜC_       P   vEˇˇG    EÜC~           t   ôEˇˇó    EÜCGåÉá     ò   Fˇˇó    EÜCGåÉá    º   Fˇˇ„    EÜC⁄     ‹   BGˇˇ=    EÜC      ¯   cGˇˇX    EÜC      !  üGˇˇV    EÜCM     4!  ’Gˇˇg    EÜC^     T!  Hˇˇ`    EÜCW     t!  \Hˇˇ4    EÜCk      î!  pHˇˇ4    EÜCk      ¥!  ÑHˇˇe    EÜC\     ‘!  …HˇˇG    EÜC~      Ù!  HˇˇP    EÜCG     "   Iˇˇc    EÜCZ     4"  cIˇˇ∫    EÜC±     T"  ˝Iˇˇ   EÜC    t"  ÒJˇˇ∂    EÜC≠      î"  áKˇˇç    EÜCEÉ      ∏"  KˇˇR    EÜCI     ÿ"  "LˇˇQ    EÜCH     ¯"  SLˇˇ   EÜC    #  GMˇˇa    EÜCX     8#  àMˇˇZ    EÜCQ     X#  ¬Mˇˇ·    EÜCÿ  (   x#  ÉNˇˇ/   EÜCMèéçåÉ     §#  ÜOˇˇy    EÜCp                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  †)      `)             p             Ä                            ∏•            êk                          òk                   ı˛ˇo    ∞                           Ë      
       ”                                          †m            `                           x                          h      	                            ˚ˇˇo          ˛ˇˇo    ê      ˇˇˇo           ˇˇo    Ù      ˘ˇˇo                                                                                           †k                     0       @       P       `       p       Ä       ê       †       ∞       ¿       –       ‡               !      !       !      0!      @!      P!      `!      p!      Ä!      ê!      †!      ∞!      ¿!      –!      ‡!      !       "      "       "      0"      @"      P"      `"      p"      Ä"      ê"      †"      ∞"      ¿"      –"      ‡"      "       #      #       #      0#      @#      P#      `#      p#      Ä#      ê#      †#      ∞#      ¿#      –#      ‡#      #       $      $       $      0$      @$      P$      `$                                                      p     Í       ¸     
¸     ¸     ¸     GCC: (Ubuntu 11.2.0-19ubuntu1) 11.2.0                               Òˇ                	     å                  Òˇ                     (                     )              3     `)              I     hp            U     òk             |     †)              à     êk             ß    Òˇ                ±    Òˇ                ª    Òˇ                ¡    Òˇ                À    Òˇ                —    Òˇ                Ÿ    Òˇ                „    Òˇ                Ô    Òˇ                ˆ    Òˇ                ¸    Òˇ                    p                 p                 (p            -    p            :    †q            J    0p            V    ®q            `    ∞q            e    ∏q            ¨    ¿q            {    »q            Õ    –q            ≤    ÿq                 ‡q            P    Ëq            Ì    q            Ä    ¯q            W     r            -    r            Ó    r            *    r            ˝     r                (r                0r            Ò	    8r            …    @r            ã	    Hr            À    Pr            Ë    Xr            W    `r            \    hr                pr            ⁄    xr            p    Är                àr            =    êr                òr            ©    †r            *    ®r            $    ∞r            í    ∏r            À    ¿r            í    »r            '    –r            z    ÿr            r    ‡r            .    Ër            H    r            /    ¯r                 s            »    s                s            ù    s            §     s            5    (s            _    0s                8s            y    @s            h    Hs            ®    Ps            Œ    Xs            •    `s            %    hs            j    ps            ∑    xs            €    Äs            Ä    às            H    ês            v    òs            ø
    †s            Ü    ®s            H    ∞s            a    ∏s            u    ¿s            F    »s            ´    –s            ¶    ÿs            @    ‡s            ú    Ës            Ò    s                ¯s            ß     t                t            #
    t            ¯    t            ¸     t            µ    (t            Ë    0t            O    8t            T    @t            ì    Ht            ‡    Pt            Ù
    Xt            ˛    `t            u    ht            Ö    pt            ñ    xt            ´    Ät            ¿    àt            ∂    êt            ÷    òt            Î    †t            ¸    ®t                ∞t            <    ∏t            è    ¿t            ˇ    »t            #    Ñ¢      „      8    g±      [%      R   Òˇ                W    Åç     1       ]   Òˇ                j    2î           ˇ    Òˇ                y   Òˇ                Ç    /†     ç       â    º†     R       ì    °     Q       °    _°           ≠    s¢     a       ∫    ‘¢     Z       «    .£     ·       Õ    §     /          Òˇ                ⁄    –U                  Òˇ                Ë      )             ˚    †k                 †m                 F     Ø       )    Lú     e       C    :>     ·       Q    æF     ¢       c    ü3      X       µ                     p    ±ú     G       Ö    `q            è    $     Ö      •    “*     ∞      ≥    ¨9      |       «    œ.      X       ◊    @p            Í    '/      X       ˜                         …     ñ          Ìâ      ¡       $    v     N      3                     X    ê      Ï       f    ˇ4      X       r    ë      ˜       z                     é    √F      ú      ò    ﬂd      ±      ¨    o-      X       µ    Oï     ì       √    Oô     „       ◊    u`     —      Â    ÿ     Ò       ˆ    2ö     =           ﬁÊ      ”           àq            )                     N    ÙV      v       Z    a⁄      ›       m    ‡      ∞      |    pp            á                     ö    ‰õ     4       Ø    —Ô      s      ø    -      X       »    8p             œ    Õù             „    ∆[      r       Ó    l:     Ø       ˛    /0      X           Òj      ã          bˇ      –       (    ‘ë           5    Ê)      Ë       E    ∏@     ¢       T    >€      p      g    ß4      X       s    mE     ¢       â    û      â       ü    è            ‡      p             ®                     Ω    êf      ±      Õ     ∞            ‹    t,      w       <    Ù\      h      Í    ¢Ù      ±      ¯                                          1    êq            @                     T    Sˆ      ®      g    0q            p                     ñ    «ö     V       ®    j=     –       ∂    ‡a      .       ∆    >•     y       œ                     Ù    G3      X       ˛  "                                        ,         ~      :    Â      ˝       P                     e    Ç,     P      t    äó     (       Ö    ´?      ê      í    .ÿ      3      †    b            •    è1      X       Æ    Äp            ¡                     Î    î     .       ¯                     	    ‚ï             +	                     I	    O+      =       \	    RÉ      j       M    ‡p            h	    †p            u	                     à	    Ï     ˆ       ö	    õ     g       ≠	   p             ∫	    üñ      »       «	    q            Õ	                     Ó	    K           ¸	                      
    K     ¢       6
     q            E
                     h
    c      Ø       x
    ≤ó     (       à
    yü     ∂       í
    O4      X       ö
    Cu      	      ´
    ∑6      E      º
    ZC     ¢       Õ
    ©Ä      á       ‹
    Ah            Ò
    vL     ·           ´B     Ø           ¬÷      M          [      ß       '    b     K      6    †      â       E    ûD     œ       X    Ñ            i    ˜3      X       r    !ç      Ô       {    ú     4       ã    Âì            ò    –p            £    ´ù     ∫       ¨    ÿ             ¥    ô6     r      ˇ    °      ≠       «    DÚ      5      ÷     X      v       ‚   ∏•             Ë    |o      	      ı                         ˜ò      Ï           /     u      +         d      9                     [    gó      »       h    Ô2      X       x    KÌ      Ü      á    Í8      ¬       ï    Xq            †    ∆O      €      ∞    (:            π    Œ*      Å       ∆    P     ú      ⁄                         ºÉ      U           Î,      ,       )    ƒc            =    Î;     Ø       L    Pp            ^    8\      º       k    eû           w         q      à    ⁄ó     G       ò    ∏ò     ó       §    	B     ¢       ∂    Äq            Ω    ◊/      X       »    ‚     ˆ       ⁄    uF      N           @q            Ï    ,C      m          hq            ˙    Å˛      ·           w.      X           ï      ö      !    ≠!     `      4    ;A      Ò      G    ó2      X       S    )]     L      g    -à      ¡       v    “-     F      â    eT            í    Ñõ     `       •                     ∏    p            ¡    Äv     @       Œ    Hq            ≤    Ëp            ◊                     ˜                         œ·      #      ‰    ¿(      &       "    D9     (      4                     G    Á1      X       P                     d    ëì      ¨       o    «y            ~    !ò     ó       è    ƒ     Ω      £    ö<     –       ±    é            ∫    †õ      K      ≈    _
     ~      ‘                     Á    Óà      ˇ       Û    q            ˘    tI     Ó           FR     r          =á             '    ã˝      ˆ       9    ]}     B      I    ¿p            Q    ¨ñ     é       Z    ÛY      v       f                     â    ‚{      ≥       ñ                     ±                     «                   Õ    ¿u     @       ÿ    M5     L      Â    H     ¢       Û   8p             ˇ    +;      €                            #    “      ◊       3    ¯p            [    »p            9                     b                     u                     á    Hù     c       ê    êí            ö    ©     Z      S                     ®    °Q      ƒ      è    «°      Ω       ≤                     √                     ÷    û†      |       ‰    îû      â       ˝                         LY      ß                            *    9ê     õ      4    ¸7      Ó       E    ê     Å      S    ©)      =       c    «-      X       q                     Ö                     õ    oö     X       ≤    ˇÅ      ä       º    bó     (            (q            ◊    Ωﬁ      b      Ê    ñX      ∂       Ó    ﬂ0      X       ˆ                         Îú      ‚       *    á0      X       2    å+      Ë       C                     V    pq            ^    ‡t     »       i    Òö      Ø       w    `p            ä    V      Ê       í    jW      ∂       ù    ’H      ⁄      ¶    Ê      ¬       ≥    ⁄N     è      …    7v     &      ﬁ     p             Î    ˚˜      –       ¸    iQ     ›           ›     5          ¿v             $    _H      v       0    <      1      9                     M    yÛ      )      `                     t                     á    âK      Ì      ê    8N     ¢       ¢    Ç(     (      ¥                     »         _      Ÿ                     Ì    ®p            ˜    ÿp                Ö      F          7=      t          ü      |       *    }˚            9    Ú„      -      Q                     o    ®u            ~                     ë    xU      ñ       û    8p             ™    êp            ∏    ?2      X       ¬    ï|      =      ‘    xq            €    _6      X       Ë    òq            ı    bJ     ¢           2                                 &                     L    Ø5      X       \    ç2     ¿      r                     É    ZA     Ø       ó                     ©    éË      œ      ∏    vM      P      ¡    Öp      æ      ‘    iZ      ∂       €    xp            È    Pq            Ú                                          0    /ò      »       =    =î      »       J                     ^     ?     Ó       o    u     ê      Ç    òp            í    W5      X       û    Lv      §      ±    ∏p            À    ™)     (      ›    WM     ·       Û    âÇ      …           ôü      |           ¯i      ˘       $    :ó     (       2    í&           A    ¯ú     P       V    ≤ç     á      `    ¸ë      î       j    ∏X     q      }    ï¸      ˆ       è                      ´    6      X       ≤    §H     –       ¡    8q            À                     ﬁ    àp            Û    Æä            ˝    ôD      ‹                           #                     8    Ïù             N     v     @           q            Y    À¯      ≤      q                     Ñ                     °    Å     (      ≥    üÖ     Ñ      Ω    ∞p            ƒ    \Ü      ·       “                     Ê    #ä     ^      ˚    ¶K     –           Fl     Ò	                           >    xå      ©       L    `G     ¢       ^    /      X       g    8     9      }    ¸C     ¢       å    ±Á      ›       ô    ;     –       ®                      ∑    0Å      ,            ØJ      ⁄       ⁄                      Ù    @v     @           71      X       
    Æ›                 x      ◊       1                     T                     g    \a      Ñ       r    ?     Ø       Ö     q            ä    æã      ∫       ñ    „ô            †    Pi      ®       ∞    \Å      £       ø    .      X            ]Í      Ó       Scrt1.o __abi_tag crtstuff.c deregister_tm_clones __do_global_dtors_aux completed.0 __do_global_dtors_aux_fini_array_entry frame_dummy __frame_dummy_init_array_entry autista.c cliente.c dlt.c hostess.c ins.c login.c manager.c meccanico.c show.c upd.c trpdb.c opt_host_name opt_user_name opt_password opt_port_num opt_socket_name opt_db_name opt_flags conn login_procedure select_all_tour select_dest_tour select_hotel_service select_model_comfort select_expired_review select_assigned_trip select_dest_time select_dvr_map select_reservation_info close_prepared_stmts initialize_prepared_stmts io.c leave validation.c print_regerror dotenv.c concat is_nested prepare_value parse_value is_commented set_variable parse open_default __FRAME_END__ __GNU_EH_FRAME_HDR _DYNAMIC _GLOBAL_OFFSET_TABLE_ do_delete_tour mysql_timestamp_to_string do_delete_fmo do_delete_comfort dlt_location mysql_time_to_string tagliando do_select_reservation do_select_map run_hstss_interface dlt_reservation stdout@GLIBC_2.2.5 dlt_costumer strcspn@GLIBC_2.2.5 do_select_model show_bus do_select_stay mysql_real_connect@libmysqlclient_18 show_presents dlt_comfort show_rt sprintf@GLIBC_2.2.5 ins_model allocation_workshop dlt_tour setting_regex setup_prepared_stmt get_mete_info do_insert_skills finish_with_error do_insert_presents revisione_mch mysql_stmt_prepare@libmysqlclient_18 ins_picture db_switch_to_login do_insert_stay mezzo_drvr strstr@GLIBC_2.2.5 init_mysql_timestamp do_insert_visit dlt_trip _edata show_expired_review ins_skills do_delete_model dlt_employee get_table_tour do_insert_fme multi_choice get_drvr_action do_delete_stay do_insert_costumer dlt_picture do_delete_reservation show_tour_destination show_ofr strerror@GLIBC_2.2.5 allocation_tour _IO_stdin_used exe_cstmr_act do_insert_map strchr@GLIBC_2.2.5 mysql_stmt_num_rows@libmysqlclient_18 sostituito_mch longjmp@GLIBC_2.2.5 do_insert_employee presenti mysql_stmt_sqlstate@libmysqlclient_18 set_binding_param do_delete_fme ask_for_relogin env_load mysql_stmt_execute@libmysqlclient_18 dlt_visit __cxa_finalize@GLIBC_2.2.5 strlen@GLIBC_2.2.5 do_select_ofr do_insert_sostitution regerror@GLIBC_2.2.5 do_select_room validate_integer ins_costumer attempt_login main dlt_user prenotazione_hstss mysql_stmt_store_result@libmysqlclient_18 press_anykey mysql_stmt_error@libmysqlclient_18 init_validation mysql_errno@libmysqlclient_18 run_drvr_interface exe_mch_act utente_hstss memset@GLIBC_2.2.5 do_insert_certify date_to_mysql_time __dso_handle show_service mezzo mysql_sqlstate@libmysqlclient_18 do_insert_bus mysql_change_user@libmysqlclient_18 do_delete_destination postoprenotato mysql_stmt_close@libmysqlclient_18 allocation_gest validate_double take_rows dlt_map workshop_section allocation_hstss do_delete_review exe_mngr_group allocation_con_table do_delete_presents do_delete_bus init_db ins_presents do_select_trip show_dest_time do_delete_costumer show_reservation dlt_room show_fmo init_mysql_date clear_screen competenze bind_exe fini_db do_select_presents do_insert_room ins_service _fini tour_section __libc_start_main@GLIBC_2.34 show_map do_select_visit do_select_fmo mysql_stmt_init@libmysqlclient_18 show_comfort dlt_destination do_insert_trip exe_hstss_act sostituito ins_destination ins_user exe_drvr_act do_insert_sparepart mysql_stmt_free_result@libmysqlclient_18 run_mch_interface run_cstmr_interface allocation_costumer do_delete_user stdin@GLIBC_2.2.5 ins_employee take_result do_select_skills fini_validation print_error do_delete_certify utente dlt_skills do_insert_comfort ins_another_skill ins_sparepart do_insert_fmo dlt_bus show_destination do_select_costumer ins_costumer_hstss dlt_certify get_servizi_albergo show_sparepart do_select_location ins_room time_to_mysql_time strcpy@GLIBC_2.2.5 localita regex_double ricambio mysql_options@libmysqlclient_18 __isoc99_sscanf@GLIBC_2.7 do_insert_review do_select_service fclose@GLIBC_2.2.5 dlt_seat regfree@GLIBC_2.2.5 show_model get_table_gest print_stmt_error do_select_sparepart do_delete_ofr show_fme show_visit do_select_seat fileno@GLIBC_2.2.5 show_review offre do_delete_location get_info_modello show_tour do_insert_service get_mete_visite cliente validate ins_comfort mysql_stmt_errno@libmysqlclient_18 gest_section __stack_chk_fail@GLIBC_2.4 tcgetattr@GLIBC_2.2.5 _init regex_date do_select_rt do_delete_map __TMC_END__ ins_prenotation regcomp@GLIBC_2.2.5 tab_con_section mappa mysql_stmt_next_result@libmysqlclient_18 fflush@GLIBC_2.2.5 fopen@GLIBC_2.2.5 exe_proc show_seat do_select_bus ins_visit exit@GLIBC_2.2.5 getenv@GLIBC_2.2.5 show_drvr_map show_service_destination regexec@GLIBC_2.3.4 ins_fmo atof@GLIBC_2.2.5 yes_or_no get_hstss_action do_select_fme drvr_allocation dlt_sparepart getline@GLIBC_2.2.5 tcsetattr@GLIBC_2.2.5 finish_with_stmt_error selection validate_time prenotazione do_insert_seat ins_fme dlt_fme mysql_stmt_reset@libmysqlclient_18 show_sostitution dlt_fmo get_cstmr_action malloc@GLIBC_2.2.5 viaggio leave_buff show_location stderr@GLIBC_2.2.5 ins_map ins_offert ins_stay do_insert_rt do_insert_sost_review get_viaggi_assegnati __data_start do_insert_offert do_update_user_type do_select_user _end ins_certify ins_seat getchar@GLIBC_2.2.5 do_insert_location putchar@GLIBC_2.2.5 strcmp@GLIBC_2.2.5 ins_tour do_delete_service do_select_comfort fprintf@GLIBC_2.2.5 do_select_review tolower@GLIBC_2.2.5 soggiorno dipendente show_trip ins_review show_comfort_model do_insert_user do_validate_reservation mysql_error@libmysqlclient_18 io_initialized setenv@GLIBC_2.2.5 ins_location __bss_start viaggio_hstss dlt_model get_table_con_tab visita dlt_presents ricambio_mch do_delete_visit do_insert_model puts@GLIBC_2.2.5 mysql_stmt_attr_set@libmysqlclient_18 dlt_sostitution do_select_destination atoi@GLIBC_2.2.5 do_delete_sparepart fgets@GLIBC_2.2.5 do_insert_tour ins_trip get_table_workshop ins_rt cliente_hstss servizio snprintf@GLIBC_2.2.5 mysql_stmt_bind_result@libmysqlclient_18 show_picture show_certify realloc@GLIBC_2.2.5 do_delete_skills do_select_employee soggiorno_hstss dlt_service get_table_costumer documentazionefotografica do_select_picture do_delete_sostitution get_mch_action show_assigned_trip get_mngr_group validate_date do_select_tour mysql_date_to_string get_input show_user get_info_revisioni do_insert_picture _ITM_deregisterTMCloneTable dlt_rt do_delete_room revisione strcat@GLIBC_2.2.5 postoprenotato_hstss show_stay ins_bus mysql_close@libmysqlclient_18 strtok_r@GLIBC_2.2.5 show_tour_information regex_time do_insert_costumer_user strdup@GLIBC_2.2.5 mysql_init@libmysqlclient_18 do_select_certify get_mappe camera show_costumer toupper@GLIBC_2.2.5 get_reservation_info do_delete_rt get_tour_info mysql_stmt_bind_param@libmysqlclient_18 show_employee do_delete_picture dlt_stay do_select_sostitution do_delete_trip do_update_km do_delete_seat __gmon_start__ run_mngr_interface ins_sostitution _ITM_registerTMCloneTable regex_integer dlt_ofr do_insert_reservation costumer_section mysql_stmt_fetch@libmysqlclient_18 fwrite@GLIBC_2.2.5 view_login do_delete_employee meta show_skills show_room get_mngr_action allocation_mch dlt_review do_insert_destination  .symtab .strtab .shstrtab .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt.got .plt.sec .text .fini .rodata .eh_frame_hdr .eh_frame .init_array .fini_array .dynamic .data .bss .comment                                                                                                                              #             8      8      0                              6             h      h      $                              I             å      å                                     W   ˆˇˇo       ∞      ∞      4                             a             Ë      Ë      8                          i                           ”                             q   ˇˇˇo       Ù      Ù      ö                            ~   ˛ˇˇo       ê      ê      Ä                            ç                         h                           ó      B       x      x      `                          °                                                           ú                             P                            ß             p$      p$                                   ∞             Ä$      Ä$      @                            π             ¿(      ¿(      ˜|                            ø             ∏•     ∏•                                   ≈              ∞      ∞      y                             Õ              )      )     Ï                             €             2     2     ƒ#                             Â             êk     ê[                                  Ò             òk     ò[                                  ˝             †k     †[                                 ´             †m     †]     `                                         p      `     8                                          @p     8`     Ä                                   0               8`     &                                                   ``     ê3         ó                 	                      ì     ‡                                                   –Ø                                  #include <string.h>
#include "../model/trpdb.h"
#include "show.h" 



int show_reservation (struct prenotazione * prenotazione)
{	

	char buff[NUM_LEN];
	printf("\n\n**  Dettagli prenotazione ** \n\n"); 
	get_input("Inserisci numero d'interesse : ", NUM_LEN , buff, false); 
	prenotazione->numerodiprenotazione = atoi(buff); 
    if(do_select_reservation(prenotazione)>0) {
		printf("\n\n** Dettagli prenotazione **\n\n");
 		printf(" E-mail cliente: 	%s \n Id viaggio: 		%d \n Posti prenotati:	%d \n Data di prenotazione: 	%s \n Data di conferma: 	%s \n Data Saldo: 		%s \n\n",
			prenotazione->clienteprenotante,
			prenotazione->viaggioassociato, 
			prenotazione->numerodipostiprenotati,
			prenotazione->datadiprenotazione, 
			prenotazione->datadiconferma, 
			prenotazione->datasaldo);
		 }
	else {
		printf("Il numero di prenotazione non esiste\n\n"); 
		return -1; 
	}
	return 0; 

}

int show_trip(struct viaggio *viaggio)
{	
	char buff[NUM_LEN]; 
	printf("\n\n**  Dettagli viaggio ** \n\n"); 
	get_input("Inserisci l'id d'interesse: ", NUM_LEN, buff, false); 
	viaggio->idviaggio = atoi(buff); 
	if(do_select_trip(viaggio)>0){
 		printf("*Tour:				%s \n Conducente:			%s \n Accompagnatrice:		%s \n Targa mezzo:			%s \n Data di partenza:		%s \n Data di ritorno:		%s \n Costo:				%f \n Chilometri da percorrere:	%d \n Posti disponibili:		%d \n Data annullamento:		%s \n\n", 
			viaggio->tourassociato,
			viaggio->conducente, 					
			viaggio->accompagnatrice, 				
			viaggio->mezzoimpiegato, 			
			viaggio->datadipartenzaviaggio, 
			viaggio->datadiritornoviaggio, 
			viaggio->costodelviaggio, 
			viaggio->numerodikm, 
			viaggio->postidisponibili,
			viaggio->datadiannullamento); 
		 }
	else{
		 printf("L'id inserito non esiste\n\n"); 
		 	return -1; 
	}
	return 0; 
}

int show_costumer (struct cliente * cliente)
{	
	
	get_input("Inserisci la mail d'interesse : ", VARCHAR_LEN , cliente->emailcliente, false);
    if(do_select_costumer(cliente)>0){
		printf("\n\n**  Dettagli cliente ** \n\n");
			printf("\n E-mail:  %s \n Nome: %s \n Cognome: %s \n Indirizzo: %s \n Codice fiscale: %s \n Recapito telefonico: %s \n Fax: %s \n Data documentazione: %s \n", 
			cliente->emailcliente,
			cliente->nomecliente,
			cliente->cognomecliente,
			cliente->indirizzocliente,
			cliente->codicefiscale,
			cliente->recapitotelefonico,
			cliente->fax,
			cliente->datadocumentazione);
		}
	else {
		printf("La mail inserita non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}

int show_tour(struct tour *tour)
{
	printf("\n\n**  Dettagli tour ** \n\n");
	get_input("Inserisci la denomiazione d'interesse: ", VARCHAR_LEN, tour->denominazionetour, false); 
	if(do_select_tour(tour) > 0) {
		printf("*Descrizione:		%s \n Minimo partecipanti:	%d \n Assicurazione medica:	%f \n Bagaglio: 		%f \n Garanzia annullamento:	%f \n Accompagnatrice:	%d \n",  
			tour->descrizionetour, 
			tour->minimopartecipanti,
			tour->assicurazionemedica, 
			tour->bagaglio, 
			tour->garanziaannullamento, 
			tour->accompagnatrice);
		}
	else { 
		printf("La denominazione inserita non esiste\n\n"); 
			return -1; 
	}
	return 0; 

}



int show_sparepart(struct ricambio *ricambio)
{	


	printf("\n\n**  Dettagli ricambio ** \n\n");
	get_input("Inserisci il codice del ricambio d'interesse: ",VARCHAR_LEN, ricambio->codice, false);
	if(do_select_sparepart(ricambio) > 0){
		printf("*Costo unitario:	%f \n Quatit√† di Riordino: 	%d \n Scorta Minima:		%d \n Quantit√† in magazzino:	%d \n Descrizione:		%s \n", 
			ricambio->costounitario,
			ricambio->quantitadiriordino,
			ricambio->scortaminima,
			ricambio->quantitainmagazzino,
			ricambio->descrizione);	
		}
	else {
		printf("Il codice inserito non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}

int show_review (struct revisione *revisione){

	char buff[NUM_LEN]; 
	printf("\n\n** Dettagli revisione **\n\n");
	get_input("Inserisci l'id d'interesse: ", NUM_LEN, buff, false); 
	revisione->idrevisione = atoi(buff);
	if(do_select_review(revisione) > 0){
 		printf("*Mezzo revsionato:	%s \n Mail adetto: 		%s \n Data inizio: 		%s \n Data fine: 		%s\n Chilometraggio:	%d\n Operazioni eseguite:	%s \n Motivazione:	%s \n\n",
			revisione->mezzorevisionato,
			revisione->addettoallarevisione,
			revisione->datainizio,
			revisione->datafine,
			revisione->chilometraggio,
			revisione->operazionieseguite,
			revisione->motivazione);
		}
	else { 
		printf("L'id inserito non esiste\n\n"); 
		return -1; 
	}
	return 0; 

}

int show_bus(struct mezzo *mezzo)
{	
	printf("\n\n** Dettagli mezzo **\n\n");
	get_input("Inserisci la targa del mezzo d'interesse: ", VARCHAR_LEN, mezzo->targa, false); 
	if(do_select_bus(mezzo) > 0){
 		printf(" *Modello:		%s\n Ultima revisone mtc: 	%s \n Ingombri: 		%s \n Autonomia: 		%d\n Chilometraggio:	%d\n Data immatricolazione:	%s \n\n",
			mezzo->modellomezzo,
			mezzo->dataultimarevisioneinmotorizzazione, 
			mezzo->ingombri, 
			mezzo->autonomia,
			mezzo->valorecontakm, 
			mezzo->dataimmatricolazione); 
		}
	else { 
		printf("La targa insertia non esiste\n\n"); 
		return -1; 
	}
	return 0; 

}

int show_stay(struct soggiorno *soggiorno)
{	
	char buff [NUM_LEN]; 
	printf("\n\n** Dettagli soggiorno **\n\n");
	get_input("Inserisci l'id del soggiorno:",NUM_LEN, buff, false); 
	soggiorno->idsoggiorno = atoi(buff); 
	printf("show\n\n"); 
	if(do_select_stay(soggiorno) > 0){
		printf("show\n\n"); 
 		printf("*Albergo:	%d \n Camera:	%d \n Ospite:	%d\n Prenotazione:	%d \n Data inizio soggiorno: %s \n Data fine soggiorno:	%s \n\n",
			soggiorno->albergoinquestione,
			soggiorno->cameraprenotata,
			soggiorno->ospite,
			soggiorno->prenotazioneinquestione,
			soggiorno->datainiziosoggiorno,
			soggiorno->datafinesoggiorno); 
		}
	else { 
		printf("Il soggiorno richiesto non esiste\n\n"); 
		return -1; 
	}
	return 0; 

}

int show_skills(struct competenze *competenze)
{	
	printf("\n\n** Dettagli competenze  **\n\n");
	get_input("Inserisci la mail del meccanico competente :",VARCHAR_LEN, competenze->meccanicocompetente, false); 
	get_input("Inserisci il modello d'interesse :",VARCHAR_LEN, competenze->modelloassociato, false);
	
	if(do_select_skills(competenze) > 0){
 		printf("*Nome meccanico:%s \n Telefono :	%s \n\n",
			competenze->nomemeccanico,
			competenze->telefono);
			}
	else { 
		printf("La competenza richiesta non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}

int show_employee(struct dipendente *dipendente)
{	
	printf("\n\n** Dettagli Dipendente  **\n\n");
	get_input("Inserisci la mail d'interesse:",VARCHAR_LEN,dipendente->emaildipendente, false); 
	if(do_select_employee(dipendente) > 0){
 		printf("*Nome:		%s \n Cognome:	%s \n Tipologia:	%s \n Telefono:	%s \n\n",
			dipendente->nomedipendente,
			dipendente->cognomedipendente,
			dipendente->tipologiadipendente,
			dipendente->telefonoaziendale);
		
	}
	else { 
		printf("La mail d'interesse non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}


int show_fmo(struct fmo *fmo)
{	
	char buff [NUM_LEN]; 
	printf("\n\n** Dettagli Foto-Modelli  **\n\n");
	get_input("Inserisci l'id della foto d'interesse:",NUM_LEN, buff, false); 
	fmo->foto = atoi(buff); 
	get_input("Inserisci il nome del modello d'interesse:",VARCHAR_LEN, fmo->modello,  false);

	if(do_select_fmo(fmo) > 0) {
 		printf("*Descrizione:	%s \n Immagine:	%s\n\n",
			fmo->descrizione,
			fmo->immagine); 
	}
	else {
		printf("La relazione foto-modello d'interesse non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}

int show_fme(struct fme *fme)
{	
	char buff [NUM_LEN]; 
	printf("\n\n** Dettagli Foto-Mete  **\n\n");
	get_input("Inserisci l'id della foto d'interesse:",NUM_LEN, buff, false); 
	fme->foto = atoi(buff); 
	get_input("Inserisci l'id della meta d'interesse:",NUM_LEN, buff, false);
	fme->meta = atoi(buff); 
	if(do_select_fme(fme) > 0){
 		printf("*Nome:	%s\n Descrizione:	%s \n Immagine:	%s\n\n",
			fme->nome,
			fme->descrizione,
			fme->immagine); 
	}
	else { 
		printf("La relazione foto-mete d'interesse non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}

int show_ofr(struct offre *offre)
{	
	char buff [NUM_LEN]; 
	printf("\n\n** Dettagli servizi-offerti  **\n\n");
	get_input("Inserisci l'id del servizio d'interesse:",NUM_LEN, buff, false); 
	offre->idservizio = atoi(buff); 
	get_input("Inserisci l'id dell'albergo offerente:",NUM_LEN, buff, false);
	offre->albergoofferente = atoi(buff); 
	if(do_select_ofr(offre) > 0) {
 		printf("*Albergo:	%s\n Servizio:	%s \n Descrizione:	%s\n\n",
			offre->meta,
			offre->servizio,
			offre->descrizione); 
	}
	else { 
		printf("La realzione offre d'interesse non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}



int show_presents(struct presenti *presenti){

	char buff[NUM_LEN]; 
	printf("\n\n** Dettagli presenti **\n\n");
	get_input("Inserisci il modello d'interesse:", VARCHAR_LEN, presenti->modelloassciato, false);
	get_input("Inserici l'id del servizio d'interesse: ", NUM_LEN, buff, false); 
	presenti->comfortpresenti = atoi(buff); 
	if(do_select_presents(presenti) > 0 ){
 		printf("*Modello:	%s \n Comfort:		%d\n\n",
			presenti->modelloassciato,
			presenti->comfortpresenti); 
	}
	else { 
		printf("La relazione tra comfort e modelli d'interesse non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}

int show_rt(struct rt *rt){

	char buff[NUM_LEN]; 
	printf("\n\n** Dettagli relazione tagliando-revsione **\n\n");
	get_input("Inserisci l'id del tagliando  d'interesse:", NUM_LEN, buff, false);
	rt->tagliandoassociato = atoi(buff); 
	get_input("Inserisci l'id della revisione  d'interesse: ", NUM_LEN, buff, false); 
	rt->revisionerelativa = atoi(buff); 
	if(do_select_rt(rt) > 0 ){
 		printf("*Tagliando:	%d \n Revisione:		%d\n\n",
			rt->tagliandoassociato,
			rt->revisionerelativa); 
	}
	else { 
		printf("La relazione tra comfort e modelli d'interesse non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}

int show_user(struct utente *utente){

	printf("\n\n** Dettagli utente **\n\n");
	get_input("Inserisci la mail d'interesse:", VARCHAR_LEN, utente->email, false);
	if(do_select_user(utente) > 0){
 		printf("*Password:	%s \n Tipo:		%d\n\n",
			utente->pswrd,
			utente->tipo); 
	}
	else { 
		printf("L'id inserito non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}

int show_seat(struct postoprenotato *postoprenotato){

	char buff [NUM_LEN]; 
	printf("\n\n** Dettagli posto prenotato  **\n\n");
	get_input("Inserisci il numero di posto d'interesse:",NUM_LEN, buff, false); 
	postoprenotato->numerodiposto = atoi(buff); 
	get_input("Inserisci il numero di prenotazione associata ",NUM_LEN, buff, false);
	postoprenotato->prenotazioneassociata = atoi(buff); 
	if(do_select_seat(postoprenotato) > 0){
 		printf("*Nome passeggero:	%s\n Cognome passeggero:	%s \n Et√†:			%d \n\n",
			postoprenotato->nomepasseggero,
			postoprenotato->cognomepasseggero,
			postoprenotato->etapasseggero);
	}
	else {
		printf("Il posto prenotato d'interesse non esiste\n\n"); 
		return -1; 
	}
	return 0; 

}

int show_model(struct modello *modello){
	
	printf("\n\n** Dettagli modello  **\n\n");
	get_input("Inserisci il nome d'interesse:",VARCHAR_LEN, modello->nomemodello, false); 
	if(do_select_model(modello) > 0){
 		printf("* Casa costruttrice:	%s\n Dati tecnici:		%s \n Numero di posti:	%d\n Meccanici competenti:	%d\n",
			modello->casacostruttrice,
			modello->datitecnici,
			modello->numeroposti,
			modello->numeromeccanicicompetenti);
	}
	else { 
		printf("Il nome del modello inserito non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}

int show_certify(struct tagliando *tagliando){
	
	char buff[NUM_LEN];
	printf("\n\n** Dettagli tagliando  **\n\n");
	get_input("Inserisci l'id  d'interesse:",NUM_LEN, buff, false); 
	tagliando->idtagliando= atoi(buff); 
	if(do_select_certify(tagliando) > 0){
 		printf("*Tipologia:		%s\n Validit√† superate:	%s \n\n",
			tagliando->tipologiatagliando,
			tagliando->validitasuperate);
	}
	else {
		printf("L'id inserito non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}

int show_destination(struct meta *meta){

	char buff[NUM_LEN];
	printf("\n\n** Dettagli meta  **\n\n");
	get_input("Inserisci l'id  d'interesse:",NUM_LEN, buff, false); 
	meta->idmeta= atoi(buff); 
	if(do_select_destination(meta) > 0){
		printf("*Nome:		%s\n Tipologia:	%s\n Localit√†:	%s\n Regione:	%s \n Indirizzo:	%s\n Telefono:	%s\n E-mail:	%s\n Fax:		%s\n",
			meta->nomemeta,
			meta->tipologiameta,
			meta->localitadiappartenenza,
			meta->regiodiappartenennza,
			meta->indirizzo,
			meta->telefonometa,
			meta->emailmeta,
			meta->faxmeta); 
		if(strcmp((meta->tipologiameta), "Albergo")||strcmp((meta->tipologiameta),"albergo" )== 0)
			printf(" Categoria:	%s\n\n", meta->categoriaalbergo); 
		else
			printf(" Orario di apertura:%s\n\n", meta->orariodiapertura); 
	}
	else { 
		printf("L'id inserito non esiste\n\n"); 
		return -1; 
	}
	return 0; 

}

int show_service (struct servizio  *servizio ){

	char buff[NUM_LEN]; 
	printf("\n\n** Dettagli servizio   **\n\n");
	get_input("Inserisci l'id d'interesse:",NUM_LEN, buff, false); 
	servizio ->idservizio  = atoi(buff); 
	if(do_select_service (servizio ) > 0){
		printf("*Nome:		%s \n Descrizione:	%s  \n\n",
			servizio->nomeservizio ,
			servizio->descrizioneservizio);
			}
	else {
		printf("L'id inserito non esiste\n\n");
		return -1; 
	}
	return 0; 
}

int show_comfort(struct comfort *comfort){

	char buff[NUM_LEN]; 
	printf("\n\n** Dettagli comfort  **\n\n");
	get_input("Inserisci l'id d'interesse:",NUM_LEN, buff, false); 
	comfort->idcomfort = atoi(buff); 
	if(do_select_comfort(comfort) > 0){
		printf("*Nome:		%s \n Descrizione:	%s  \n\n",
			comfort->nomecomfort,
			comfort->descrizionecomfort);
	}
	else {	
		printf("L'id inserito non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}


int show_picture(struct documentazionefotografica *documentazionefotografica){

	char buff[NUM_LEN]; 
	printf("\n\n** Dettagli documentazionefotografica  **\n\n");
	get_input("Inserisci l'id d'interesse:",NUM_LEN, buff, false); 
	documentazionefotografica->idfoto = atoi(buff); 
	if(do_select_picture(documentazionefotografica) > 0) {
		printf("*Foto:		%s \n Descrizione:	%s  \n\n",
			documentazionefotografica->foto,
			documentazionefotografica->descrzione);
	}
	else {
		printf("L'id inserito non esiste\n\n"); 
		return -1; 
	}
	return 0; 
}


int show_map(struct mappa *mappa){

	char buff[NUM_LEN]; 
	printf("\n\n** Dettagli mappa  **\n\n");
	get_input("Inserisci l'id d'interesse:",NUM_LEN, buff, false); 
	mappa->idmappa = atoi(buff); 
	if(do_select_map(mappa) > 0) {
		printf("*Citt√†:		%s \n Regione:	%s \n Dettaglio:	%s \n Zona:		%s \n Immagine: 	%s \n\n",
			mappa->citta,
			mappa->localitarappresentata,
			mappa->dettaglio, 
			mappa->zona,
			mappa->immagine);
	}
	else {
		printf("L'id inserito non esiste \n\n"); 
		return -1; 
	}
	return 0; 

}

int show_room(struct camera *camera){

	char buff[NUM_LEN]; 
	printf("\n\n** Dettagli camera  **\n\n");
	get_input("Inserisci il numero d'interesse:",NUM_LEN, buff, false); 
	camera->numerocamera = atoi(buff); 
	get_input("Inserisci l'id dell'albergo d'interesse:",NUM_LEN, buff, false); 
	camera->albergo = atoi(buff);
	if(do_select_room(camera) >0) {
		printf("*Tipologia:	%s \n Costo:		%f\n\n",
			camera->tipologia,
			camera->costo);
	}
	else {
		printf("La camera d'interesse non esiste \n\n"); 
		return -1; 
	}
	return 0; 

}

int show_location(struct localita *localita){


	printf("\n\n** Dettagli localita  **\n\n");
	get_input("Inserisci il nome d'interesse: ",VARCHAR_LEN, localita->nomelocalita, false); 
	get_input("Inserisci il nome della regione: ", VARCHAR_LEN, localita->regione, false);
	if (do_select_location(localita) > 0){
		printf("*Stato:		%s\n\n",
			localita->stato);
	}
	else {
		printf("Il nome d'interesse non esiste\n\n"); 
		return -1; 
	}
	return 0; 

}

int show_visit(struct visita *visita){
	char buff[NUM_LEN];
	printf("\n\n** Dettagli visita  **\n\n");
	get_input("Inserisci l'id  d'interesse:",NUM_LEN, buff, false); 
	visita->idvisita= atoi(buff); 
	if(do_select_visit(visita) > 0){
		printf("*Tour:		%s  Id viaggio:	%d*\n*Nome meta:	%s Id meta:	%d*\n Data di arrivo:	%s\n Ora di arrivo:		%s\n Data di partenza:	%s\n Ora di partenza:	%s\n Guida:			%d\n Supplemento:		%f\n Trattamento:		%s\n\n",
			visita->tour,
			visita->viaggiorelativo,
			visita->meta,
			visita->metavisitata,
			visita->datadiarrivo,
			visita->oradiarrivo,
			visita->datadipartenza,
			visita->oradipartenza, 
			visita->guida,
			visita->supplemento,
			visita->trattamentoalberghiero);
	}
	else {
		printf("L'id d'interesse non esiste\n\n"); 
		return -1; 
	}
	return 0; 

}

 int show_sostitution(struct sostituito *sostituito){
	char buff [NUM_LEN]; 
	printf("\n\n** Dettagli sostituzione  **\n\n");
	get_input("Inserisci l'id della revisione d'interesse:",NUM_LEN, buff, false); 
	sostituito->revisioneassociata = atoi(buff); 
	get_input("Inserisci il codice del ricambio d'interesse:",VARCHAR_LEN, sostituito->ricambioutilizzato,  false);

	if(do_select_sostitution(sostituito) > 0) {
 		printf("*Quantit√†:	%d\n\n",
			sostituito->quantitasostituita); 
	}
	else {
		printf("La sostizione d'interesse non esiste\n\n"); 
			return -1; 
	}
	return 0; 
 }


void show_expired_review (void) 
{	
	printf("** Ecco i mezzi le cui revisioni risultano scadute o in scadenza**\n\n");
	get_info_revisioni();
}


void show_tour_information(void)
{	
	printf("\n\n** Tour offerti  **\n\n"); 
	get_tour_info(); 
}

void show_tour_destination(void)
{
	char buff[VARCHAR_LEN]; 
	int idv; 
	printf("\n\n ** Esplora le destinazioni dei viaggi **\n\n"); 
	get_input("Inserisca il numero del viaggio a cui √® interessato: ",VARCHAR_LEN, buff, false);  
	printf("\n**\n**\n"); 
	idv = atoi(buff); 
	get_mete_info(idv); 
}


void show_service_destination(void)
{	
	char buff[VARCHAR_LEN]; 
	int idh; 
	printf("\n\n ** Esplora i servizi offerti dagli alberghi **\n\n"); 
	get_input("Inserisca il codice dell'albergo a cui √® interessato: ",VARCHAR_LEN, buff, false);  
	printf("\n**\n**\n"); 
	idh = atoi(buff); 
	get_servizi_albergo(idh); 
}


void show_comfort_model(void)
{	
	char buff[VARCHAR_LEN]; 
	
	printf("\n\n ** Esplora comfort presenti sui nostri pullman  **\n\n"); 
	get_input("Inserisca il nome del modello a cui √® interessato: ",VARCHAR_LEN, buff, false);  
	printf("\n**\n**\n");  
	get_info_modello(buff); 
}


void show_assigned_trip(void)
{	
	char buff[VARCHAR_LEN];

	printf("** Ricerca viaggi assegnati **\n\n");
	get_input("Inserisci la mail del conducente:", VARCHAR_LEN,buff, false);
	printf("** Dettagli del viaggio assegnato **\n\n");
	get_viaggi_assegnati(buff); 
}

void show_dest_time(void)
{	
	char buff[NUM_LEN];
	int dvr; 

	printf("** Ricerca visite d'interesse **\n\n");
	get_input("Inserisci l'ID del viaggio:", VARCHAR_LEN, buff, false);
	dvr = atoi(buff); 
	printf("** Dettagli temporali delle visite **\n\n");
	get_mete_visite(dvr); 
}

void show_drvr_map(void)
{
	char buff[VARCHAR_LEN];
	printf("** Ricerca la mappa d'interesse **\n\n");
	get_input("Inserisci il nome della localit√†:", VARCHAR_LEN, buff, false);
	printf("** Dettagli mappe relative alla localit√† inserita **\n\n");
	get_mappe(buff); 
}

#pragma once

#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>

#include "../utils/io.h"
#include "../utils/validation.h"

#include "../model/trpdb.h"

extern int show_reservation (struct prenotazione * prenotazione);
extern int show_trip(struct viaggio *viaggio); 
extern int show_costumer (struct cliente * cliente); 
extern int show_tour(struct tour *tour); 
extern int show_service(struct servizio * servizio); 
extern int show_sparepart(struct ricambio *ricambio);
extern int show_review(struct revisione *revisione); 
extern int show_bus(struct mezzo *mezzo); 
extern int show_stay(struct soggiorno *soggiorno); 
extern int show_skills(struct competenze *competenze);
extern int show_employee(struct dipendente *dipendente); 
extern int show_fmo(struct fmo *fmo); 
extern int show_fme(struct fme *fme); 
extern int show_ofr(struct offre *offre);
extern int show_user(struct utente *utente); 
extern int show_seat(struct postoprenotato *postoprenotato); 
extern int show_model(struct modello *modello); 
extern int show_certify(struct tagliando *tagliando); 
extern int show_destination(struct meta *meta); 
extern int show_visit(struct visita *visita); 
extern int show_location(struct localita *localita); 
extern int show_room(struct camera *camera); 
extern int show_map(struct mappa *mappa); 
extern int show_picture(struct documentazionefotografica *documentazionefotografica); 
extern int show_comfort(struct comfort *comfort); 
extern int show_service(struct servizio *servizio); 
extern void show_expired_review (void); 
extern int show_prenotation_details(struct prenotazione *prenotazione ); 
extern int show_sostitution(struct sostituito *sostituito); 
extern int show_presents(struct presenti *presenti); 
extern int show_rt(struct rt *rt); 
extern void show_tour_information(void);
extern void show_tour_destination(void);
extern void show_service_destination(void); 
extern void show_comfort_model(void); 
extern void show_assigned_trip(void); 
extern void show_dest_time(void); 
extern void show_drvr_map(void); 
#include<stdio.h>
#include<stdlib.h>

#include "upd.h"
#include "show.h"

void update_user_type( struct utente *utente, int type) {

	char buff [NUM_LEN]; 
	do{
		if(utente->tipo == type)
			printf("Errore! Il tipo dell'utente deve essere diverso da %d \n Autista =	1; \n Cliente =	2; \n Hostess =	3; \n Meccanico =	4; \n Manager =	5;\n Reinserisci il tipo dell'utente\n", utente->tipo); 
		get_input("Reinserisci la tipologia dell'utente:", NUM_LEN,buff, false); 
		utente->tipo = atoi (buff);
	}while(utente->tipo == type); 
	do_update_user_type(utente); 
}

void update_km(struct mezzo *mezzo)
{
	char buff[VARCHAR_LEN];
	bool ans; 
	printf("** Selezione del mezzo d'interesse **\n\n");
	show_bus(mezzo ); 
	ans =yes_or_no("Vuoi modificare i km di questo mezzo ? ", 's', 'n', false, false); 
	if(ans){
		get_input("\nInserisci l'attuale numero di km : ",NUM_LEN, buff, false); 
		mezzo->valorecontakm = atoi(buff); 
		do_update_km(mezzo ); 
		}

}

			#include<stdio.h>
#include<stdlib.h>
#include <string.h>

#include "../utils/validation.h"
#include "../model/trpdb.h"

extern void update_user_type( struct utente *utente, int type); 
extern void update_km(struct mezzo *mezzo); 

